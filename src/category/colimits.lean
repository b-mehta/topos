import category_theory.elements
import category_theory.limits.limits
import category_theory.functor_category
import category_theory.limits.types
import category_theory.limits.functor_category
import category_theory.adjunction.opposites

namespace category_theory

open category limits
universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

variables {C : Type u‚ÇÅ} [small_category C]

namespace colimit_adj
variables {‚Ñ∞ : Type u‚ÇÇ} [category.{u‚ÇÅ} ‚Ñ∞]
variables [has_colimits ‚Ñ∞]
variable (A : C ‚•§ ‚Ñ∞)

@[simps]
def R : ‚Ñ∞ ‚•§ (C·µí·µñ ‚•§ Type u‚ÇÅ) :=
{ obj := Œª E,
  { obj := Œª c, A.obj c.unop ‚ü∂ E,
    map := Œª c c' f k, A.map f.unop ‚â´ k },
  map := Œª E E' k, { app := Œª c f, f ‚â´ k } }.

private noncomputable def L_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : ‚Ñ∞ :=
colimit ((category_of_elements.œÄ P).left_op ‚ãô A)

def Le' (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞) {c : cocone ((category_of_elements.œÄ P).left_op ‚ãô A)}
  (t : is_colimit c) : (c.X ‚ü∂ E) ‚âÉ (P ‚ü∂ (R A).obj E) :=
(t.hom_iso' E).to_equiv.trans
{ to_fun := Œª k,
  { app := Œª c p, k.1 (opposite.op ‚ü®_, p‚ü©),
    naturality' := Œª c c' f,
    begin
      ext p,
      let p' : P.elements·µí·µñ := opposite.op ‚ü®c, p‚ü©,
      let p'' : P.elements·µí·µñ := opposite.op ‚ü®c', P.map f p‚ü©,
      let f' : p'' ‚ü∂ p' := has_hom.hom.op ‚ü®f, rfl‚ü©,
      apply (k.2 f').symm,
    end },
  inv_fun := Œª œÑ,
  { val := Œª p, œÑ.app p.unop.1 p.unop.2,
    property := Œª p p' f,
    begin
      simp_rw [‚Üê f.unop.2],
      apply (congr_fun (œÑ.naturality f.unop.1) p'.unop.2).symm,
    end },
  left_inv :=
  begin
    rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©,
    ext,
    dsimp,
    congr' 1,
    simp,
  end,
  right_inv :=
  begin
    rintro ‚ü®_, _‚ü©,
    ext,
    refl,
  end }

lemma Le'_natural (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E‚ÇÅ E‚ÇÇ : ‚Ñ∞) (g : E‚ÇÅ ‚ü∂ E‚ÇÇ)
  {c : cocone _} (t : is_colimit c) (k : c.X ‚ü∂ E‚ÇÅ) :
Le' A P E‚ÇÇ t (k ‚â´ g) = Le' A P E‚ÇÅ t k ‚â´ (R A).map g :=
begin
  ext _ X p,
  apply (assoc _ _ _).symm,
end

noncomputable def L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
adjunction.left_adjoint_of_equiv
(Œª P E, Le' A P E (colimit.is_colimit _))
(Œª P E E' g, Le'_natural A P E E' g _)

noncomputable def L_adjunction : L A ‚ä£ R A := adjunction.adjunction_of_equiv_left _ _
end colimit_adj

open colimit_adj

def right_is_id : R (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
nat_iso.of_components
(Œª P, nat_iso.of_components (Œª X, yoneda_sections_small X.unop _)
  (Œª X Y f, funext $ Œª x,
  begin
    apply eq.trans _ (congr_fun (x.naturality f) (ùüô _)),
    dsimp [ulift_trivial, yoneda_lemma],
    simp only [id_comp, comp_id],
  end))
(Œª _ _ _, nat_trans.ext _ _ $ funext $ Œª _, funext $ Œª _, rfl)

noncomputable def left_is_id : L (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
adjunction.left_adjoint_uniq (L_adjunction _) (adjunction.of_nat_iso_right adjunction.id right_is_id.symm)

noncomputable def main (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  colimit ((category_of_elements.œÄ P).left_op ‚ãô yoneda) ‚âÖ P :=
left_is_id.app P

-- This is a cocone with point `P`, for which the diagram consists solely of representables.
noncomputable def the_cocone (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  cocone ((category_of_elements.œÄ P).left_op ‚ãô yoneda) :=
cocone.extend (colimit.cocone _) (main P).hom

lemma desc_self {J : Type v‚ÇÅ} {C : Type u‚ÇÅ} [small_category J] [category.{v‚ÇÅ} C]
  (F : J ‚•§ C) {c : cocone F} (t : is_colimit c) : t.desc c = ùüô c.X :=
(t.uniq _ _ (Œª j, comp_id _)).symm

lemma col_desc_self {J : Type v‚ÇÅ} {C : Type u‚ÇÅ} [small_category J] [category.{v‚ÇÅ} C] (F : J ‚•§ C)
  [has_colimit F] : colimit.desc F (colimit.cocone F) = ùüô (colimit F) :=
desc_self F (colimit.is_colimit _)

noncomputable def is_a_limit (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : is_colimit (the_cocone P) :=
begin
  apply is_colimit.of_point_iso (colimit.is_colimit ((category_of_elements.œÄ P).left_op ‚ãô yoneda)),
  change is_iso (colimit.desc _ (cocone.extend _ _)),
  rw [colimit.desc_extend, col_desc_self, id_comp],
  apply_instance,
end

end category_theory
