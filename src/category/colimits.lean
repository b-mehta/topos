import category_theory.elements
import category_theory.limits.limits
import category_theory.functor_category
import category_theory.limits.types
import category_theory.limits.functor_category
import category_theory.adjunction
import category.adjunction

namespace category_theory

open category limits
universes v‚ÇÅ v‚ÇÇ u‚ÇÅ u‚ÇÇ

set_option pp.universes true

-- check what happens if we allow C's homs to be in another universe
variables {C : Type u‚ÇÅ} [small_category C]

section
variables {‚Ñ∞ : Type u‚ÇÇ} [category.{u‚ÇÅ} ‚Ñ∞]
variables [has_colimits ‚Ñ∞]
variable (A : C ‚•§ ‚Ñ∞)

def R : ‚Ñ∞ ‚•§ (C·µí·µñ ‚•§ Type u‚ÇÅ) :=
{ obj := Œª E,
  { obj := Œª c, A.obj c.unop ‚ü∂ E,
    map := Œª c c' f k, A.map f.unop ‚â´ k },
  map := Œª E E' k, { app := Œª c f, f ‚â´ k } }.

def L_obj (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : ‚Ñ∞ :=
colimit ((category_of_elements.œÄ P).left_op ‚ãô A)

set_option pp.universes false

def Le (P : C·µí·µñ ‚•§ Type u‚ÇÅ) (E : ‚Ñ∞) : (L_obj A P ‚ü∂ E) ‚âÉ (P ‚ü∂ (R A).obj E) :=
(colimit.hom_iso' ((category_of_elements.œÄ P).left_op ‚ãô A) E).to_equiv.trans
{ to_fun := Œª k,
  { app := Œª c p, k.1 (opposite.op ‚ü®_, p‚ü©),
    naturality' := Œª c c' f,
    begin
      ext p,
      let p' : (P.elements)·µí·µñ := (opposite.op ‚ü®c, p‚ü©),
      let p'' : (P.elements)·µí·µñ := (opposite.op ‚ü®c', P.map f p‚ü©),
      let f' : p'' ‚ü∂ p' := has_hom.hom.op ‚ü®f, rfl‚ü©,
      apply (k.2 f').symm,
    end },
  inv_fun := Œª œÑ,
  { val := Œª p, œÑ.app p.unop.1 p.unop.2,
    property := Œª p p' f,
    begin
      change A.map f.unop.1.unop ‚â´ œÑ.app p'.unop.1 p'.unop.2 = œÑ.app p.unop.1 p.unop.2,
      have := congr_fun (œÑ.naturality f.unop.1) p'.unop.2,
      dsimp [R] at this,
      erw [‚Üê this, f.unop.2],
    end },
  left_inv :=
  begin
    rintro ‚ü®k‚ÇÅ, k‚ÇÇ‚ü©,
    ext,
    dsimp,
    congr' 1,
    rw opposite.op_eq_iff_eq_unop,
    cases x.unop,
    refl,
  end,
  right_inv :=
  begin
    rintro ‚ü®_, _‚ü©,
    ext,
    refl,
  end }

def L : (C·µí·µñ ‚•§ Type u‚ÇÅ) ‚•§ ‚Ñ∞ :=
adjunction.left_adjoint_of_equiv (Œª P E, Le A P E)
begin
  intros P E E' g k,
  ext,
  dsimp [Le, colimit.hom_iso', is_colimit.hom_iso', R],
  simp,
end

def L_adjunction : L A ‚ä£ R A := adjunction.adjunction_of_equiv_left _ _
end

set_option pp.universes false

def right_is_id : R (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
nat_iso.of_components
(Œª P,
nat_iso.of_components (Œª X, by apply yoneda_sections_small X.unop)
(Œª X Y f,
begin
  ext,
  dsimp [R, yoneda_lemma, ulift_trivial],
  have := congr_fun (x.naturality f) (ùüô _),
  dsimp at this,
  rw [id_comp, ‚Üê this, comp_id]
end))
begin
  intros,
  ext c g,
  refl,
end

def left_is_id : L (yoneda : C ‚•§ _) ‚âÖ ùü≠ _ :=
left_adjoint_uniq (L_adjunction _) (adjunction.of_nat_iso_right adjunction.id right_is_id.symm)

def main (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  colimit ((category_of_elements.œÄ P).left_op ‚ãô yoneda) ‚âÖ P :=
left_is_id.app P

def the_cocone (P : C·µí·µñ ‚•§ Type u‚ÇÅ) :
  cocone ((category_of_elements.œÄ P).left_op ‚ãô yoneda) :=
 cocone.extend (colimit.cocone _) (main P).hom

def is_a_limit (P : C·µí·µñ ‚•§ Type u‚ÇÅ) : is_colimit (the_cocone P) :=
begin
  apply is_colimit.of_point_iso (colimit.is_colimit ((category_of_elements.œÄ P).left_op ‚ãô yoneda)),
  change is_iso (main P).hom,
  apply_instance,
end

#check L_adjunction yoneda

end category_theory
