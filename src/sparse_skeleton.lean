/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.opposites
import category_theory.sparse
import category_theory.limits.lattice
import category_theory.limits.shapes.finite_products
import category_theory.limits.shapes.terminal
import category_theory.full_subcategory
import category_theory.limits.shapes.regular_mono
import category_theory.closed.cartesian
import category_theory.limits.shapes.pullbacks
import category_theory.limits.over
import category_theory.currying
import tactic
import adjunction

universes v v‚ÇÇ v‚ÇÉ u u‚ÇÇ u‚ÇÉ

namespace category_theory

open category_theory category_theory.category

variables {C : Type u} [category.{v} C]
variables {D : Type u‚ÇÇ} [category.{v‚ÇÇ} D]
variables {E : Type u‚ÇÉ} [category.{v‚ÇÉ} E]

def are_iso (X Y : C) : Prop := nonempty (X ‚âÖ Y)

variables (C)

def skeletal : Prop := ‚àÄ (X Y : C), (X ‚âÖ Y) ‚Üí X = Y

instance up_to_iso : setoid C :=
{ r := are_iso,
  iseqv :=
  begin
    refine ‚ü®Œª X, ‚ü®iso.refl _‚ü©, Œª X Y, _, Œª X Y Z, _‚ü©,
    rintro ‚ü®i‚ü©,
    refine ‚ü®i.symm‚ü©,
    rintro ‚ü®i‚ü© ‚ü®j‚ü©,
    refine ‚ü®i.trans j‚ü©,
  end }

def skel := quotient (category_theory.up_to_iso C)

instance skel_preorder : preorder (skel C) :=
{ le :=
  begin
    refine quotient.lift‚ÇÇ (Œª X Y, nonempty (X ‚ü∂ Y)) _,
    rintros _ _ _ _ ‚ü®i‚ÇÅ‚ü© ‚ü®i‚ÇÇ‚ü©,
    apply propext,
    split,
    rintro ‚ü®f‚ü©,
    refine ‚ü®i‚ÇÅ.inv ‚â´ f ‚â´ i‚ÇÇ.hom‚ü©,
    rintro ‚ü®g‚ü©,
    refine ‚ü®i‚ÇÅ.hom ‚â´ g ‚â´ i‚ÇÇ.inv‚ü©,
  end,
  le_refl :=
  begin
    refine quotient.ind (Œª a, _),
    exact ‚ü®ùüô _‚ü©,
  end,
  le_trans :=
  begin
    intros _ _ _,
    apply quotient.induction_on‚ÇÉ a b c,
    rintros _ _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
    refine ‚ü®f ‚â´ g‚ü©,
  end }

instance skel_subsingleton {X Y : skel C} : subsingleton (X ‚ü∂ Y) :=
‚ü®by { rintros ‚ü®‚ü®f‚ÇÅ‚ü©‚ü© ‚ü®‚ü®f‚ÇÇ‚ü©‚ü©, refl }‚ü©

instance skel_iso_subsingleton {X Y : skel C} : subsingleton (X ‚âÖ Y) :=
‚ü®by { rintros i‚ÇÅ i‚ÇÇ, ext1, apply subsingleton.elim }‚ü©

def skel_quotient : C ‚•§ skel C :=
{ obj := quotient.mk,
  map := Œª X Y f, ‚ü®‚ü®‚ü®f‚ü©‚ü©‚ü© }

variables {C}

@[simps]
def skel_map (F : C ‚•§ D) : skel C ‚•§ skel D :=
{ obj :=
  begin
    refine quotient.lift _ _,
    intro x,
    apply quotient.mk (F.obj x),
    rintros x y ‚ü®k‚ü©,
    apply quotient.sound,
    refine ‚ü®_‚ü©,
    apply F.map_iso k,
  end,
  map :=
  begin
    refine quotient.rec _ _,
    { intro x,
      refine quotient.rec _ _,
      { intros y k,
        refine ‚ü®‚ü®_‚ü©‚ü©,
        rcases k with ‚ü®‚ü®‚ü®k‚ü©‚ü©‚ü©,
        refine ‚ü®F.map k‚ü© },
      { intros y z h,
        apply subsingleton.elim } },
    { intros x y h,
      apply subsingleton.elim }
  end }

lemma skel_quotient_map (F : C ‚•§ D) : skel_quotient C ‚ãô skel_map F = F ‚ãô skel_quotient D :=
rfl

def skel_map_comp (F : C ‚•§ D) (G : D ‚•§ E) : skel_map (F ‚ãô G) ‚âÖ skel_map F ‚ãô skel_map G :=
nat_iso.of_components (Œª X, quotient.rec_on_subsingleton X (Œª x, iso.refl _)) (by tidy)

def skel_map_id : skel_map (ùü≠ C) ‚âÖ ùü≠ _ :=
nat_iso.of_components (Œª X, quotient.rec_on_subsingleton X (Œª x, iso.refl _)) (by tidy)

def skel_map_func {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (k : F‚ÇÅ ‚ü∂ F‚ÇÇ) : skel_map F‚ÇÅ ‚ü∂ skel_map F‚ÇÇ :=
{ app := Œª X, quotient.rec_on_subsingleton X (Œª x, ‚ü®‚ü®‚ü®k.app x‚ü©‚ü©‚ü©) }

def skel_map_iso {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (h : F‚ÇÅ ‚âÖ F‚ÇÇ) : skel_map F‚ÇÅ ‚âÖ skel_map F‚ÇÇ :=
{ hom := skel_map_func h.hom, inv := skel_map_func h.inv }

variables [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)]

def iso_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âÖ Y :=
{ hom := f, inv := g }

lemma equiv_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âà Y :=
‚ü®iso_of_both_ways f g‚ü©

instance : partial_order (skel C) :=
{ le_antisymm :=
  begin
    refine quotient.ind‚ÇÇ _,
    rintros _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
    apply quotient.sound,
    apply equiv_of_both_ways f g,
  end,
  ..category_theory.skel_preorder C }

lemma skel_is_skel : skeletal (skel C) :=
begin
  intros X Y,
  apply quotient.induction_on‚ÇÇ X Y,
  rintros _ _ ‚ü®‚ü®‚ü®‚ü®f‚ü©‚ü©‚ü©, ‚ü®‚ü®‚ü®g‚ü©‚ü©‚ü©, _, _‚ü©,
  apply quotient.sound,
  apply equiv_of_both_ways f g,
end

def skel_map‚ÇÇ (F : C ‚•§ D ‚•§ E) : skel C ‚•§ skel D ‚•§ skel E :=
category_theory.curry_obj
{ obj :=
  begin
    rintro ‚ü®x‚ÇÅ, x‚ÇÇ‚ü©,
    refine quotient.map‚ÇÇ _ _ x‚ÇÅ x‚ÇÇ,
    intros c d, apply (F.obj c).obj d,
    rintros c‚ÇÅ c‚ÇÇ ‚ü®hc‚ü© d‚ÇÅ d‚ÇÇ ‚ü®hd‚ü©,
    refine ‚ü®(F.map_iso hc).app d‚ÇÅ ‚â™‚â´ (F.obj c‚ÇÇ).map_iso hd‚ü©,
  end,
  map :=
  begin
    rintros ‚ü®X‚ÇÅ,Y‚ÇÅ‚ü©,
    rintros ‚ü®X‚ÇÇ,Y‚ÇÇ‚ü©,
    refine quotient.rec_on_subsingleton X‚ÇÅ _,
    refine quotient.rec_on_subsingleton Y‚ÇÅ _,
    refine quotient.rec_on_subsingleton X‚ÇÇ _,
    refine quotient.rec_on_subsingleton Y‚ÇÇ _,
    rintros y‚ÇÇ x‚ÇÇ y‚ÇÅ x‚ÇÅ ‚ü®‚ü®‚ü®hx‚ü©‚ü©, ‚ü®‚ü®hy‚ü©‚ü©‚ü©,
    dsimp at hx hy,
    refine ‚ü®‚ü®_‚ü©‚ü©,
    cases hx, cases hy,
    exact ‚ü®(F.map hx).app y‚ÇÅ ‚â´ (F.obj x‚ÇÇ).map hy‚ü©,
  end }

def skel_map_eq {F‚ÇÅ F‚ÇÇ : C ‚•§ D} (h : F‚ÇÅ ‚âÖ F‚ÇÇ) : skel_map F‚ÇÅ = skel_map F‚ÇÇ :=
begin
  apply functor.ext (quotient.ind _) _,
  { intro x,
    apply quotient.sound,
    refine ‚ü®h.app x‚ü© },
  { tidy },
end

end category_theory