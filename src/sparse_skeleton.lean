/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.opposites
import category_theory.sparse
import category_theory.limits.lattice
import category_theory.limits.shapes.finite_products
import category_theory.limits.shapes.terminal
import category_theory.full_subcategory
import category_theory.limits.shapes.regular_mono
import category_theory.closed.cartesian
import category_theory.limits.shapes.pullbacks
import category_theory.limits.over

universes v u

namespace category_theory

open category_theory category_theory.category

variables {C : Type u} [category.{v} C]

def are_iso (X Y : C) : Prop := nonempty (X ‚âÖ Y)

variables (C)

instance up_to_iso : setoid C :=
{ r := are_iso,
  iseqv :=
  begin
    refine ‚ü®Œª X, ‚ü®iso.refl _‚ü©, Œª X Y, _, Œª X Y Z, _‚ü©,
    rintro ‚ü®i‚ü©,
    refine ‚ü®i.symm‚ü©,
    rintro ‚ü®i‚ü© ‚ü®j‚ü©,
    refine ‚ü®i.trans j‚ü©,
  end }

def skel := quotient (category_theory.up_to_iso C)

instance skel_preorder : preorder (skel C) :=
{ le :=
  begin
    refine quotient.lift‚ÇÇ (Œª X Y, nonempty (X ‚ü∂ Y)) _,
    rintros _ _ _ _ ‚ü®i‚ÇÅ‚ü© ‚ü®i‚ÇÇ‚ü©,
    apply propext,
    split,
    rintro ‚ü®f‚ü©,
    refine ‚ü®i‚ÇÅ.inv ‚â´ f ‚â´ i‚ÇÇ.hom‚ü©,
    rintro ‚ü®g‚ü©,
    refine ‚ü®i‚ÇÅ.hom ‚â´ g ‚â´ i‚ÇÇ.inv‚ü©,
  end,
  le_refl :=
  begin
    refine quotient.ind (Œª a, _),
    exact ‚ü®ùüô _‚ü©,
  end,
  le_trans :=
  begin
    intros _ _ _,
    apply quotient.induction_on‚ÇÉ a b c,
    rintros _ _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
    refine ‚ü®f ‚â´ g‚ü©,
  end }

variables {C} [‚àÄ X Y : C, subsingleton (X ‚ü∂ Y)]

lemma iso_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âÖ Y :=
{ hom := f,
  inv := g }

lemma equiv_of_both_ways {X Y : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ X) : X ‚âà Y :=
‚ü®iso_of_both_ways f g‚ü©

instance : partial_order (skel C) :=
{ le_antisymm :=
  begin
    refine quotient.ind‚ÇÇ _,
    rintros _ _ ‚ü®f‚ü© ‚ü®g‚ü©,
    apply quotient.sound,
    apply equiv_of_both_ways f g,
  end,
  ..category_theory.skel_preorder C }

def skel_quotient : C ‚•§ skel C :=
{ obj := quotient.mk,
  map := Œª X Y f, ‚ü®‚ü®‚ü®f‚ü©‚ü©‚ü© }

end category_theory