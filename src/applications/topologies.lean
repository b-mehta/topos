import applications.functor_category
import grothendieck
import sheaf
import category.element
import tactic.equiv_rw
import data.quot
import pullback_colimit
import category.colimits

namespace category_theory

universes v u

variables {C : Type u} [small_category C] (J : sieve_set C) [grothendieck J]

open classifier limits category

noncomputable theory

@[ext]
structure closure_operator (Œ± : Type*) [has_le Œ±] :=
(to_fun : Œ± ‚Üí Œ±)
(ord' : ‚àÄ {x y : Œ±}, x ‚â§ y ‚Üí to_fun x ‚â§ to_fun y)
(inflate' : ‚àÄ x, x ‚â§ to_fun x)
(idem' : ‚àÄ x, to_fun (to_fun x) = to_fun x)

instance (Œ± : Type*) [has_le Œ±] : has_coe_to_fun (closure_operator Œ±) :=
‚ü®_, closure_operator.to_fun‚ü©

instance (Œ± : Type*) [has_le Œ±] : has_le (closure_operator Œ±) :=
‚ü®Œª c‚ÇÅ c‚ÇÇ, ‚àÄ x, c‚ÇÅ x ‚â§ c‚ÇÇ x‚ü©

lemma closure_operator.ord {Œ± : Type*} [has_le Œ±] (c : closure_operator Œ±) {x y : Œ±} (h : x ‚â§ y) :
  c x ‚â§ c y :=
c.ord' h

lemma closure_operator.inflate {Œ± : Type*} [has_le Œ±] (c : closure_operator Œ±) (x : Œ±) :
  x ‚â§ c x := c.inflate' x

lemma closure_operator.idem {Œ± : Type*} [has_le Œ±] (c : closure_operator Œ±) (x : Œ±) :
  c (c x) = c x := c.idem' x

/-- The sieve-set induced by a closure operator on sieves. -/
def grothendieck_from_natural_operator (c : Œ† (X : C), closure_operator (sieve X)) :
  sieve_set C :=
Œª X S, c X S = ‚ä§

/-- If a closure operator on sieves is natural, it induces a Grothendieck topology. -/
instance natural_operator_is_grothendieck (c : Œ† (X : C), closure_operator (sieve X))
  (hc : ‚àÄ (X Y : C) (f : X ‚ü∂ Y) (S : sieve Y), (c Y S).pullback f = c _ (S.pullback f)) :
grothendieck (grothendieck_from_natural_operator c) :=
{ max := Œª X,
  begin
    apply top_unique,
    apply (c _).inflate,
  end,
  stab := Œª X Y S hS f,
  begin
    change _ = _ at hS,
    change _ = _,
    rw [‚Üê hc, hS, sieve.pullback_top],
  end,
  trans := Œª X S hS T hT,
  begin
    change _ = _,
    rw ‚Üê (c X).idem,
    apply top_unique,
    change _ = _ at hS,
    rw ‚Üê hS,
    apply (c _).ord,
    intros Y g hg,
    rw sieve.pullback_eq_top_iff_mem,
    rw hc,
    apply hT g hg,
  end }

@[simps]
def close {c : C} (S : sieve c) : sieve c :=
{ arrows := Œª g, grothendieck.covers J S g.hom,
  subs := Œª d e f h k,
  begin
    change S.pullback (h ‚â´ f) ‚àà J e,
    change S.pullback f ‚àà J d at k,
    rw sieve.pullback_comp,
    apply grothendieck.stab (S.pullback f) k h,
  end }


lemma close_preserves_order {c : C} {S T : sieve c} (h : S ‚â§ T) :
  close J S ‚â§ close J T :=
begin
  intros d g hg,
  change S.pullback g ‚àà J d at hg,
  apply grothendieck.superset_covering (sieve.pullback_le_map h g) hg,
end

lemma close_inflationary {c : C} (S : sieve c) :
  S ‚â§ close J S :=
begin
  intros d g hg,
  change S.pullback g ‚àà J d,
  rw sieve.pullback_eq_top_iff_mem at hg,
  rw hg,
  apply grothendieck.max,
end

lemma close_idem (c : C) (S : sieve c) :
  close J (close J S) = close J S :=
begin
  apply le_antisymm,
    intros d g hg,
    change (close J S).pullback g ‚àà J d at hg,
    apply grothendieck.trans _ hg,
    intros e g' hg',
    change (S.pullback g).pullback g' ‚àà J e,
    rw ‚Üê S.pullback_comp,
    exact hg',
  apply close_preserves_order J (close_inflationary _ _),
end

lemma close_inter (c : C) (S T : sieve c) :
  close J (S ‚äì T) = close J S ‚äì close J T :=
begin
  apply le_antisymm,
  { refine le_inf (close_preserves_order _ inf_le_left) (close_preserves_order _ inf_le_right) },
  rintros d g ‚ü®hg‚ÇÅ, hg‚ÇÇ‚ü©,
  change S.pullback g ‚àà J d at hg‚ÇÅ,
  change (S ‚äì T).pullback g ‚àà J d,
  rw sieve.pullback_inter,
  apply grothendieck.intersection_covering hg‚ÇÅ hg‚ÇÇ,
end

lemma close_pullback (c d : C) (S : sieve c) (f : d ‚ü∂ c) :
  close J (S.pullback f) = (close J S).pullback f :=
begin
  ext e g,
  change (S.pullback f).pullback g ‚àà J e ‚Üî S.pullback (g ‚â´ f) ‚àà J e,
  rw S.pullback_comp,
end

lemma incl_iff_closure_eq_top (c : C) (S : sieve c) : S ‚àà J c ‚Üî close J S = ‚ä§ :=
begin
  split,
    intro h,
    ext d f,
    change S.pullback f ‚àà J d ‚Üî true,
    simpa using grothendieck.stab S h f,
  rw [close],
  intro q,
  refine grothendieck.trans ‚ä§ (grothendieck.max _) _ _,
  intros d g hg,
  rw ‚Üê q at hg,
  exact hg,
end

/-- Natural closure operators on the set of sieves are the same thing as Grothendieck topologies. -/
def operators_equiv_topology :
  {c : Œ† (X : C), closure_operator (sieve X) // ‚àÄ X Y f S, (c Y S).pullback f = c X (S.pullback f)}
‚âÉ {J : sieve_set C // grothendieck J} :=
{ to_fun := Œª c, ‚ü®grothendieck_from_natural_operator c.1, category_theory.natural_operator_is_grothendieck _ c.2‚ü©,
  inv_fun := Œª J, by { haveI := J.2, refine ‚ü®Œª X, ‚ü®close J.1, Œª x y, close_preserves_order _, close_inflationary _, close_idem _ _‚ü©, Œª X Y f S, _‚ü©, symmetry, apply close_pullback, },
  left_inv :=
  begin
    rintro ‚ü®c‚ÇÅ, c‚ÇÇ‚ü©,
    ext x S y f,
    dsimp [close, grothendieck.covers, grothendieck_from_natural_operator],
    change c‚ÇÅ y (S.pullback f) = ‚ä§ ‚Üî over.mk f ‚àà (c‚ÇÅ x S).arrows,
    rw ‚Üê c‚ÇÇ,
    rw sieve.pullback_eq_top_iff_mem,
  end,
  right_inv :=
  begin
    rintro ‚ü®J, _‚ü©,
    resetI,
    ext c S,
    apply (incl_iff_closure_eq_top J c S).symm,
  end }

@[simps]
def j : Œ© (C·µí·µñ ‚•§ Type u) ‚ü∂ Œ© (C·µí·µñ ‚•§ Type u) :=
{ app := Œª c S, close J S,
  naturality' := Œª c c' f,
  begin
    ext1 S,
    change sieve c.unop at S,
    apply close_pullback,
  end }

lemma yoneda_generates (X Y : C·µí·µñ ‚•§ Type u) (f g : X ‚ü∂ Y)
  (h : ‚àÄ (c : C·µí·µñ) (k : yoneda.obj c.unop ‚ü∂ X), k ‚â´ f = k ‚â´ g) :
  f = g :=
begin
  ext c t,
  specialize h c ((yoneda_sections_small c.unop X).inv t),
  have := congr_arg (Œª i, nat_trans.app i c) h,
  dsimp [yoneda_lemma, ulift_trivial] at this,
  have z := congr_fun this (has_hom.hom.unop (ùüô _)),
  dsimp at z,
  rw [X.map_id] at z,
  exact z,
end

def sieve_equiv_arrow (c : C) : sieve c ‚âÉ (yoneda.obj c ‚ü∂ Œ© _) :=
(yoneda_sections_small c (Œ© _)).to_equiv.symm

lemma equiv_close (c : C) (S : sieve c) :
  sieve_equiv_arrow _ (close J S) = sieve_equiv_arrow _ S ‚â´ j J :=
begin
  ext d f : 3,
  symmetry,
  apply close_pullback,
end

def sub_repr (c : C) : sieve c ‚âÉ subq (yoneda.obj c) :=
(sieve_equiv_arrow c).trans classification

lemma sub_repr_eq (c : C) (S : sieve c) : sub_repr c S = subq.mk S.functor_inclusion :=
begin
  change classification _ = _,
  rw ‚Üê classification.eq_symm_apply,
  ext c' f c'' g,
  change over.mk (g ‚â´ f) ‚àà S.arrows ‚Üî ‚àÉ (x : {h // over.mk h ‚àà S.arrows}), x.1 = g ‚â´ f,
  rw [subtype.exists],
  simp,
end

def sieve_subq (c : C) :
sieve c ‚âÉo subq (yoneda.obj c) :=
{ to_equiv := sub_repr c,
  map_rel_iff' :=
  begin
    intros S T,
    rw [sub_repr_eq, sub_repr_eq],
    change S ‚â§ T ‚Üî nonempty (_ ‚ü∂ _),
    split,
    intro h,
      exact ‚ü®sub.hom_mk (sieve.le_as_functor h) (sieve.le_as_functor_comm h)‚ü©,
    rintro ‚ü®a‚ü© d f hf,
    let f' := a.left.app (opposite.op d) ‚ü®f, hf‚ü©,
    have := sub.w a,
    dsimp at *,
    have q := congr_arg (Œª t, nat_trans.app t (opposite.op d)) this,
    dsimp at q,
    replace q := congr_fun q ‚ü®f, hf‚ü©,
    dsimp at q,
    rw ‚Üê q,
    apply (a.left.app (opposite.op d) ‚ü®f, hf‚ü©).2,
  end }

lemma inclusion_inter (c : C) (S T : sieve c) :
  sieve_subq _ (S ‚äì T) = sieve_subq _ S ‚äì sieve_subq _ T :=
order_iso.map_inf _ _ _

@[reassoc]
lemma and_arrow_sieve (c : C) (S T : sieve c) :
  (prod.lift (sieve_equiv_arrow _ S) (sieve_equiv_arrow _ T) ‚â´ and_arrow _) = sieve_equiv_arrow _ (S ‚äì T) :=
begin
  have : ‚àÄ (S : sieve _), sieve_equiv_arrow c S = classify (sieve_subq _ S),
    intro S,
    change _ = classify (classification (sieve_equiv_arrow c S)),
    symmetry,
    apply classification.left_inv,
  rw [this, this, this],
  rw and_property,
  rw inclusion_inter,
end

instance : topology (j J) :=
{ ax1 :=
  begin
    ext c ‚ü®‚ü© d f,
    change J d ((‚ä§ : sieve _).pullback f) ‚Üî true,
    rw sieve.pullback_top,
    simp only [iff_true],
    exact grothendieck.max d,
  end,
  ax2 :=
  begin
    ext c S : 3,
    apply close_idem,
  end,
  ax3 :=
  begin
    apply yoneda_generates,
    intros c k,
    equiv_rw prod.equiv (yoneda.obj c.unop) (Œ© _) (Œ© _) at k,
    cases k with k‚ÇÅ k‚ÇÇ,
    change prod.lift k‚ÇÅ k‚ÇÇ ‚â´ _ = prod.lift k‚ÇÅ k‚ÇÇ ‚â´ _ ‚â´ _,
    rw prod.lift_map_assoc,
    equiv_rw (sieve_equiv_arrow c.unop).symm at k‚ÇÅ,
    equiv_rw (sieve_equiv_arrow c.unop).symm at k‚ÇÇ,

    rw [‚Üê equiv_close, ‚Üê equiv_close, and_arrow_sieve, and_arrow_sieve_assoc, ‚Üê equiv_close],
    rw (sieve_equiv_arrow _).apply_eq_iff_eq,
    rw close_inter,
  end }.


def dense_inclusion (c : C) (S : sieve c) (h : S ‚àà J c) : closure.dense (j J) S.functor_inclusion :=
begin
  constructor,
  change classification (classify (subq.mk _) ‚â´ _) = _,
  rw ‚Üê sub_repr_eq,
  dsimp only [sub_repr, equiv.trans],
  change classification (classification.symm (classification _) ‚â´ _) = _,
  rw classification.symm_apply_apply,
  erw ‚Üê equiv_close,
  change sieve_subq _ _ = _,
  rw ‚Üê order_iso.map_top (sieve_subq c),
  congr' 1,
  ext d f,
  change S.pullback f ‚àà J d ‚Üî true,
  simpa using grothendieck.stab S h f,
end

lemma dense_inclusion_iff (c : C) (S : sieve c) (h : closure.dense (j J) S.functor_inclusion) :
  S ‚àà J c :=
begin
  have := h.closure_eq_top,
  change classification (classify (subq.mk _) ‚â´ _) = _ at this,
  rw ‚Üê sub_repr_eq at this,
  dsimp only [sub_repr, equiv.trans] at this,
  change classification (classification.symm (classification _) ‚â´ _) = _ at this,
  rw classification.symm_apply_apply at this,
  erw ‚Üê equiv_close at this,
  change sieve_subq _ _ = _ at this,
  rw ‚Üê order_iso.map_top (sieve_subq c) at this,
  erw (sieve_subq c).to_equiv.apply_eq_iff_eq at this,
  rw close at this,
  refine grothendieck.trans ‚ä§ (grothendieck.max _) _ _,
  intros d g hg,
  rw ‚Üê this at hg,
  exact hg,
end

def jsheaf_is_Jsheaf (P : C·µí·µñ ‚•§ Type u) (h : sheaf_condition (j J) P) : grothendieck.sheaf_condition J P :=
begin
  intros c S Œ≥ hS,
  change S.as_functor ‚ü∂ _ at Œ≥,
  haveI : closure.dense (j J) S.functor_inclusion := dense_inclusion _ _ _ hS,
  apply h S.functor_inclusion Œ≥,
end

-- This can be generalised to show it suffices to check the sheaf condition on a
-- generating set (in the sense of colimits).
def sheaf.yoneda_mk (P : C·µí·µñ ‚•§ Type u)
  (h : Œ† c S f' (m : S ‚ü∂ yoneda.obj c) [closure.dense (j J) m], {f : yoneda.obj c ‚ü∂ P // m ‚â´ f = f' ‚àß ‚àÄ a, m ‚â´ a = f' ‚Üí a = f}) :
  sheaf_condition (j J) P :=
sheaf_condition.mk' _ _
begin
  introsI E A m œÉ _,
  let A' : (E.elements)·µí·µñ ‚Üí (C·µí·µñ ‚•§ Type u) := Œª i, pullback ((the_cocone E).Œπ.app i) m,
  let m' : Œ† (i : E.elements·µí·µñ), A' i ‚ü∂ yoneda.obj i.unop.1.unop := Œª i, pullback.fst,
  let top_map : Œ† (i : E.elements·µí·µñ), A' i ‚ü∂ A := Œª i, pullback.snd,
  have pb : ‚àÄ (i : E.elements·µí·µñ), m' i ‚â´ _ = top_map i ‚â´ m := Œª i, pullback.condition,
  let A'diagram : E.elements·µí·µñ ‚•§ (C·µí·µñ ‚•§ Type u),
  { refine { functor . obj := A',
             map := Œª i j f,
              pullback.lift (m' i ‚â´ yoneda.map f.unop.1.unop) (top_map i)
                (by erw [‚Üê pb i, assoc, (the_cocone E).w f]), map_id' := _, map_comp' := _},
    { intro j,
      apply pullback.hom_ext;
      simp },
    { intros i‚ÇÅ i‚ÇÇ i‚ÇÉ f g,
      apply pullback.hom_ext; simp } },
  let œÑ : A'diagram ‚ü∂ ((category_of_elements.œÄ E).left_op ‚ãô yoneda) :=
    { nat_trans . app := m', naturality' := Œª i j f, pullback.lift_fst _ _ _ },
  let A'cocone : cocone A'diagram,
    refine ‚ü®A, Œª i, top_map i, _‚ü©,
    intros i j f,
    rw pullback.lift_snd,
    apply (comp_id _).symm,
  let A'colimit := pullback_colimit A'cocone (is_a_limit E) œÑ m pb (Œª i, cone_is_pullback _ _),
  let h' : Œ† (i : E.elements·µí·µñ), {f // m' i ‚â´ f = top_map i ‚â´ œÉ ‚àß ‚àÄ a, m' i ‚â´ a = top_map i ‚â´ œÉ ‚Üí a = f} :=
    Œª i, (h _ _ (top_map i ‚â´ œÉ) (m' i)),
  let h'‚ÇÅ : Œ† (i : E.elements·µí·µñ), yoneda.obj i.unop.1.unop ‚ü∂ P := Œª i, (h' i).1,
  have h'‚ÇÇ : ‚àÄ (i : E.elements·µí·µñ), m' i ‚â´ h'‚ÇÅ i = top_map i ‚â´ œÉ := Œª i, (h' i).2.1,
  have h'‚ÇÉ : ‚àÄ (i : E.elements·µí·µñ) a, m' i ‚â´ a = top_map i ‚â´ œÉ ‚Üí a = h'‚ÇÅ i := Œª i, (h' i).2.2,
  have legs : ‚àÄ (i j : E.elements·µí·µñ) (f : i ‚ü∂ j), yoneda.map (has_hom.hom.unop f).1.unop ‚â´ h'‚ÇÅ j = h'‚ÇÅ i ‚â´ ùüô P,
  { intros,
    rw comp_id,
    apply h'‚ÇÉ i,
    let hf : A' i ‚ü∂ A' j := pullback.lift (m' i ‚â´ yoneda.map f.unop.1.unop) (top_map i)
                              (by erw [‚Üê pb i, assoc, (the_cocone E).w f]),
    have : hf ‚â´ m' j = m' i ‚â´ yoneda.map _ := pullback.lift_fst _ _ _,
    rw ‚Üê reassoc_of this,
    rw h'‚ÇÇ j,
    apply pullback.lift_snd_assoc },
  refine ‚ü®(is_a_limit E).desc ‚ü®P, h'‚ÇÅ, legs‚ü©, _, _‚ü©,
  { apply A'colimit.hom_ext,
    intro i,
    rw ‚Üê pullback.condition_assoc,
    rw (is_a_limit E).fac,
    apply h'‚ÇÇ },
  { intros q hq,
    apply (is_a_limit E).hom_ext,
    intro i,
    rw (is_a_limit E).fac,
    apply h'‚ÇÉ i,
    rw pullback.condition_assoc,
    rw hq }
end.

def Jsheaf_is_jsheaf (P : C·µí·µñ ‚•§ Type u) (h : grothendieck.sheaf_condition J P) : sheaf_condition (j J) P :=
sheaf.yoneda_mk J P
begin
  introsI c S' f' m hm,
  let S := (sub_repr _).symm ‚ü¶sub.mk' m‚üß,
  have same_class := sub_repr_eq _ S,
  rw (sub_repr _).apply_symm_apply at same_class,
  have : closure.dense (j J) S.functor_inclusion,
  refine ‚ü®_‚ü©,
  change closure.operator _ (subq.mk _) = _,
  rw ‚Üê same_class,
  apply hm.closure_eq_top,
  have := dense_inclusion_iff J _ S this,
  have : classifier_of m = classifier_of S.functor_inclusion,
    change classify ‚ü¶sub.mk' m‚üß = classify ‚ü¶sub.mk' S.functor_inclusion‚üß,
    rw same_class,
  let i := how_inj_is_classifier m S.functor_inclusion this,
  have hi : i.hom ‚â´ _ = _ := c_very_inj this,
  refine ‚ü®(h _ S (i.inv ‚â´ f') ‚ÄπS ‚àà J c‚Ä∫).1.1.1, _, _‚ü©,
  rw [‚Üê hi, assoc, (h _ S (i.inv ‚â´ f') ‚ÄπS ‚àà J c‚Ä∫).1.1.2], simp,
  intros a ha,
  apply subtype.ext_iff.1 ((h _ S (i.inv ‚â´ f') ‚ÄπS ‚àà J c‚Ä∫).2 ‚ü®a, _‚ü©),
  rw iso.eq_inv_comp,
  rw reassoc_of hi,
  rw ha,
end

def equivalent_sheaf_conditions (P : C·µí·µñ ‚•§ Type u) :
  grothendieck.sheaf_condition J P ‚âÉ sheaf_condition (j J) P :=
{ to_fun := Jsheaf_is_jsheaf _ _,
  inv_fun := jsheaf_is_Jsheaf _ _,
  left_inv := Œª _, subsingleton.elim _ _,
  right_inv := Œª _, subsingleton.elim _ _ }

end category_theory