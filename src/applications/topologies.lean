import applications.functor_category
import grothendieck
import sheaf
import category.element
import tactic.equiv_rw
import data.quot

namespace category_theory

universes v u

variables {C : Type u} [small_category C] (J : sieve_set C) [grothendieck J]

open classifier limits

noncomputable theory

def one_equiv (X : C·µí·µñ ‚•§ Type u) :
  (one C ‚ü∂ X) ‚âÉ {f : Œ† (c : C·µí·µñ), X.obj c // ‚àÄ {c c' : C·µí·µñ} (g : c ‚ü∂ c'), X.map g (f c) = f c'} :=
{ to_fun := Œª f, ‚ü®Œª c, f.app c ‚ü®‚ü©, Œª c c' g, congr_fun (f.naturality g).symm punit.star‚ü©,
  inv_fun := Œª f,
  { app := Œª c _, f.1 c,
    naturality' := Œª c c' g,
    begin
      ext1 ‚ü®‚ü©,
      exact (f.2 g).symm,
    end },
  left_inv := Œª f,
  begin
    ext c ‚ü®‚ü©,
    refl,
  end,
  right_inv := Œª f,
  begin
    ext,
    refl,
  end }

def one_to_truth :
  (one C ‚ü∂ Œ© _) ‚âÉ {J : Œ† (c : C·µí·µñ), sieve c.unop // ‚àÄ {c c' : C·µí·µñ} (g : c ‚ü∂ c'), (J c).pullback g.unop = J c'} :=
one_equiv _

lemma one_equiv_truth : (one_equiv _ (truth (C·µí·µñ ‚•§ Type u))).1 = Œª c, (‚ä§ : sieve c.unop) :=
begin
  ext,
  refl,
end

lemma maps_eq (F : C·µí·µñ ‚•§ Type u) (f g : Œ© _ ‚ü∂ F)
  (h : ‚àÄ (c : C·µí·µñ) (S : sieve c.unop), f.app c S = g.app c S) : f = g :=
begin
  ext,
  apply h,
end

lemma pair_maps_eq (F : C·µí·µñ ‚•§ Type u) (f g : Œ© _ ‚®Ø Œ© _ ‚ü∂ F) :
  (‚àÄ {Q} (k‚ÇÅ k‚ÇÇ : Q ‚ü∂ Œ© _), limits.prod.lift k‚ÇÅ k‚ÇÇ ‚â´ f = limits.prod.lift k‚ÇÅ k‚ÇÇ ‚â´ g) ‚Üí f = g :=
begin
  intro h,
  apply eq_of_comp_right_eq,
  intros Q pq,
  specialize h (pq ‚â´ limits.prod.fst) (pq ‚â´ limits.prod.snd),
  have : limits.prod.lift (pq ‚â´ limits.prod.fst) (pq ‚â´ limits.prod.snd) = pq,
    apply limits.prod.hom_ext; simp,
  simp_rw this at h,
  exact h,
end


@[simps]
def close (J : sieve_set C) [grothendieck J] {c : C·µí·µñ} (S : sieve c.unop) : sieve c.unop :=
{ arrows := Œª g, S.pullback g.hom ‚àà J g.left,
  subs := Œª d e f h k,
  begin
    change S.pullback (h ‚â´ f) ‚àà J e,
    change S.pullback f ‚àà J d at k,
    rw sieve.pullback_comp,
    apply grothendieck.stab (S.pullback f) k h,
  end }

lemma close_preserves_order {c : C·µí·µñ} {S T : sieve c.unop} (h : S ‚â§ T) :
  close J S ‚â§ close J T :=
begin
  intros d g hg,
  change S.pullback g ‚àà J d at hg,
  apply grothendieck.superset_covering (sieve.pullback_le_map h g) hg,
end

lemma close_inflationary {c : C·µí·µñ} (S : sieve c.unop) :
  S ‚â§ close J S :=
begin
  intros d g hg,
  change S.pullback g ‚àà J d,
  rw sieve.pullback_eq_top_iff_mem at hg,
  rw hg,
  apply grothendieck.max,
end

lemma close_idem (c : C·µí·µñ) (S : sieve c.unop) :
  close J (close J S) = close J S :=
begin
  apply le_antisymm,
    intros d g hg,
    change (close J S).pullback g ‚àà J d at hg,
    apply grothendieck.trans _ hg,
    intros e g' hg',
    change (S.pullback g).pullback g' ‚àà J e,
    rw ‚Üê S.pullback_comp,
    exact hg',
  apply close_preserves_order J (close_inflationary _ _),
end

lemma close_inter (c : C·µí·µñ) (S T : sieve c.unop) :
  close J (S ‚äì T) = close J S ‚äì close J T :=
begin
  apply le_antisymm,
  { refine le_inf (close_preserves_order _ inf_le_left) (close_preserves_order _ inf_le_right) },
  rintros d g ‚ü®hg‚ÇÅ, hg‚ÇÇ‚ü©,
  change S.pullback g ‚àà J d at hg‚ÇÅ,
  change (S ‚äì T).pullback g ‚àà J d,
  rw sieve.pullback_inter,
  apply grothendieck.intersection_covering hg‚ÇÅ hg‚ÇÇ,
end

lemma close_pullback (c d : C·µí·µñ) (S : sieve c.unop) (f : d.unop ‚ü∂ c.unop) :
  close J (S.pullback f) = (close J S).pullback f :=
begin
  ext e g,
  change (S.pullback f).pullback g ‚àà J e ‚Üî S.pullback (g ‚â´ f) ‚àà J e,
  rw S.pullback_comp,
end

@[simps]
def j : Œ© (C·µí·µñ ‚•§ Type u) ‚ü∂ Œ© (C·µí·µñ ‚•§ Type u) :=
{ app := Œª c S, close J S,
  naturality' := Œª c c' f,
  begin
    ext1 S,
    change sieve c.unop at S,
    apply close_pullback,
  end }


-- lemma one_generating (X Y : C·µí·µñ ‚•§ Type u) (f g : X ‚ü∂ Y) :
--   (‚àÄ (i : one C ‚ü∂ X), i ‚â´ f = i ‚â´ g) ‚Üî f = g :=
-- ‚ü®begin
--   intro k,
--   ext c x,
--   have q := k ((one_equiv _).symm ‚ü®_, _‚ü©),
--   apply_fun nat_trans.app at q,
--   replace q := congr_fun q c,
--   replace q := congr_fun q ‚ü®‚ü©,
--   dsimp [one_equiv] at q,
-- end
-- , Œª k, by simp [k]‚ü©

lemma yoneda_generates (X Y : C·µí·µñ ‚•§ Type u) (f g : X ‚ü∂ Y)
  (h : ‚àÄ (c : C·µí·µñ) (k : yoneda.obj c.unop ‚ü∂ X), k ‚â´ f = k ‚â´ g) :
  f = g :=
begin
  ext c t,
  specialize h c ((yoneda_sections_small c.unop X).inv t),
  have := congr_arg (Œª i, nat_trans.app i c) h,
  dsimp [yoneda_lemma, ulift_trivial] at this,
  have z := congr_fun this (has_hom.hom.unop (ùüô _)),
  dsimp at z,
  rw [X.map_id] at z,
  exact z,
end

def sieve_equiv_arrow (c : C·µí·µñ) : sieve c.unop ‚âÉ (yoneda.obj c.unop ‚ü∂ Œ© _) :=
(yoneda_sections_small c.unop (Œ© _)).to_equiv.symm
def equiv_close (c : C·µí·µñ) (S : sieve c.unop) :
  sieve_equiv_arrow _ (close J S) = sieve_equiv_arrow _ S ‚â´ j J :=
begin
  ext d f : 3,
  symmetry,
  apply close_pullback,
end

def sub_repr (c : C) : sieve c ‚âÉ subq (yoneda.obj c) :=
(sieve_equiv_arrow (opposite.op c)).trans classification

lemma sub_repr_eq (c : C) (S : sieve c) : sub_repr c S = subq.mk S.functor_inclusion :=
begin
  change classification _ = _,
  rw ‚Üê classification.eq_symm_apply,
  ext c' f c'' g,
  change over.mk (g ‚â´ f) ‚àà S.arrows ‚Üî ‚àÉ (x : {h // over.mk h ‚àà S.arrows}), x.1 = g ‚â´ f,
  rw [subtype.exists],
  simp,
end

def sieve_subq (c : C) :
  ((‚â§) : sieve c ‚Üí sieve c ‚Üí Prop) ‚âÉo ((‚â§) : subq (yoneda.obj c) ‚Üí subq (yoneda.obj c) ‚Üí Prop) :=
{ to_equiv := sub_repr c,
  ord' :=
  begin
    intros S T,
    rw [sub_repr_eq, sub_repr_eq],
    change S ‚â§ T ‚Üî nonempty (_ ‚ü∂ _),
    split,
    intro h,
      exact ‚ü®sub.hom_mk (sieve.le_as_functor h) (sieve.le_as_functor_comm h)‚ü©,
    rintro ‚ü®_‚ü© d f hf,
    let f' := a.left.app (opposite.op d) ‚ü®f, hf‚ü©,
    have := sub.w a,
    dsimp at *,
    have q := congr_arg (Œª t, nat_trans.app t (opposite.op d)) this,
    dsimp at q,
    replace q := congr_fun q ‚ü®f, hf‚ü©,
    dsimp at q,
    rw ‚Üê q,
    apply (a.left.app (opposite.op d) ‚ü®f, hf‚ü©).2,
  end }

lemma inclusion_inter (c : C) (S T : sieve c) :
  sieve_subq _ (S ‚äì T) = sieve_subq _ S ‚äì sieve_subq _ T :=
order_iso.map_inf _

@[reassoc]
lemma and_arrow_sieve (c : C·µí·µñ) (S T : sieve c.unop) :
  (prod.lift (sieve_equiv_arrow _ S) (sieve_equiv_arrow _ T) ‚â´ and_arrow _) = sieve_equiv_arrow _ (S ‚äì T) :=
begin
  have : ‚àÄ (S : sieve _), sieve_equiv_arrow c S = classify (sieve_subq _ S),
    intro S,
    change _ = classify (classification (sieve_equiv_arrow c S)),
    symmetry,
    apply classification.left_inv,
  rw [this, this, this],
  rw and_property,
  rw inclusion_inter,
end

instance : topology (j J) :=
{ ax1 :=
  begin
    ext c ‚ü®‚ü© d f,
    change J d ((‚ä§ : sieve _).pullback f) ‚Üî true,
    rw sieve.pullback_top,
    simp only [iff_true],
    exact grothendieck.max d,
  end,
  ax2 :=
  begin
    ext c S : 3,
    apply close_idem,
  end,
  ax3 :=
  begin
    apply yoneda_generates,
    intros c k,
    equiv_rw prod.equiv (yoneda.obj c.unop) (Œ© _) (Œ© _) at k,
    cases k with k‚ÇÅ k‚ÇÇ,
    change prod.lift k‚ÇÅ k‚ÇÇ ‚â´ _ = prod.lift k‚ÇÅ k‚ÇÇ ‚â´ _ ‚â´ _,
    rw prod.lift_map_assoc,
    equiv_rw (sieve_equiv_arrow c).symm at k‚ÇÅ,
    equiv_rw (sieve_equiv_arrow c).symm at k‚ÇÇ,

    rw [‚Üê equiv_close, ‚Üê equiv_close, and_arrow_sieve, and_arrow_sieve_assoc, ‚Üê equiv_close],
    rw (sieve_equiv_arrow _).apply_eq_iff_eq,
    rw close_inter,
  end }.

def dense_inclusion (c : C) (S : sieve c) (h : S ‚àà J c) : closure.dense (j J) S.functor_inclusion :=
begin
  constructor,
  change classification (classify (subq.mk _) ‚â´ _) = _,
  rw ‚Üê sub_repr_eq,
  dsimp only [sub_repr, equiv.trans],
  change classification (classification.symm (classification _) ‚â´ _) = _,
  rw classification.symm_apply_apply,
  erw ‚Üê equiv_close,
  change sieve_subq _ _ = _,
  rw ‚Üê order_iso.map_top (sieve_subq c),
  congr' 1,
  ext d f,
  change S.pullback f ‚àà J d ‚Üî true,
  simpa using grothendieck.stab S h f,
end

def jsheaf_is_Jsheaf (P : sheaf (j J)) : grothendieck.sheaf J P.A :=
begin
  intros c S Œ≥ hS,
  change S.as_functor ‚ü∂ _ at Œ≥,
  haveI : closure.dense (j J) S.functor_inclusion := dense_inclusion _ _ _ hS,
  apply unique_extend P S.functor_inclusion Œ≥,
end

-- def Jsheaf_is_jsheaf (P : C·µí·µñ ‚•§ Type u) (h : grothendieck.sheaf J P) : sheaf (j J) :=
-- sheaf.mk' P
-- begin
--   introsI E A m œÉ _,
--   refine ‚ü®_, _, _‚ü©,
--   refine ‚ü®_, _‚ü©,
--   intros c e,
--   let S : sieve c.unop := ‚ü®Œª f, ‚àÉ (t : A.obj _), m.app _ t = E.map f.hom.op e, _‚ü©,
--   have : S ‚àà J c.unop,
--     sorry,
--   sorry,
--   intros,
--   change ‚àÉ (x : A.obj (opposite.op Y)), m.app _ _ = E.map f.op e at a,
--   change ‚àÉ (x : A.obj (opposite.op Z)), m.app (opposite.op Z) _ = E.map (f.op ‚â´ g.op) e,
--   cases a,
--   refine ‚ü®A.map g.op a_w, _‚ü©,
--   change (A.map g.op ‚â´ m.app _) _ = _,
--   rw m.naturality,
--   dsimp,
--   rw [a_h, E.map_comp],
--   refl,
--   -- specialize h c.unop,
-- end

end category_theory