import category_theory.limits.shapes
import category_theory.limits.types
import category_theory.types
import category_theory.limits.shapes.binary_products
import subobject_classifier

universes v v‚ÇÇ u

/-!
# Types

Show that Type has a subobject classifier (assuming unique choice).
-/

open category_theory category_theory.category category_theory.limits

local attribute [instance] has_finite_limits_of_has_limits
local attribute [instance] has_finite_products_of_has_finite_limits

lemma set_classifier {U X : Type} {f : U ‚ü∂ X} {œá‚ÇÅ : X ‚ü∂ Prop} (q : @classifying _ category_theory.types _ unit _ _ (Œª _, true) f œá‚ÇÅ) :
  ‚àÄ x, œá‚ÇÅ x ‚Üî ‚àÉ a, f a = x :=
begin
  obtain ‚ü®ka, la, ma‚ü© := q,
  intro x,
  split, intro,
    have: ((ùüô _ : unit ‚ü∂ unit) ‚â´ Œª (_ : unit), true) = (Œª (_ : unit), x) ‚â´ œá‚ÇÅ,
      ext y, simp, show true ‚Üî œá‚ÇÅ x, simpa,
    set new_cone := pullback_cone.mk (ùüô unit) (Œª _, x) this,
    set g := ma.lift new_cone,
    use g (),
    have := ma.fac new_cone walking_cospan.right, simp at this,
    have := congr_fun this (), simp at this,
    exact this,
  rintro ‚ü®t, rfl‚ü©, have := congr_fun la t, simp at this, exact this,
end

-- Note this is obviously implied by full choice.
axiom unique_choice {Œ± : Sort u} [subsingleton Œ±] : nonempty Œ± ‚Üí Œ±

noncomputable def get_unique {Œ± : Sort u} (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ a, p a) (h‚ÇÇ : ‚àÄ a b, p a ‚Üí p b ‚Üí a = b) : {a // p a} :=
begin
  haveI: subsingleton {a // p a} := _,
  apply unique_choice,
    cases h‚ÇÅ,
    split, exact ‚ü®h‚ÇÅ_w, h‚ÇÅ_h‚ü©,
  split,
    rintros ‚ü®a, ha‚ü© ‚ü®b, hb‚ü©,
    congr,
    apply h‚ÇÇ a b ha hb,
end

noncomputable def get_unique_value {Œ± : Sort u} (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ a, p a) (h‚ÇÇ : ‚àÄ a b, p a ‚Üí p b ‚Üí a = b) : Œ± := (get_unique p h‚ÇÅ h‚ÇÇ).val
lemma get_unique_property {Œ± : Sort u} (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ a, p a) (h‚ÇÇ : ‚àÄ a b, p a ‚Üí p b ‚Üí a = b) : p (get_unique_value p h‚ÇÅ h‚ÇÇ) := (get_unique p h‚ÇÅ h‚ÇÇ).property

noncomputable def invert_mono {U X : Type u} (m : U ‚ü∂ X) [mon : mono m] (t : X) (h : ‚àÉ i, m i = t) : {i : U // m i = t} :=
begin
  apply get_unique _ h _,
  intros,
  rw mono_iff_injective at mon,
  apply mon,
  rw [a_1, a_2]
end

def truth : punit ‚ü∂ ulift Prop := Œª _, ulift.up true
instance : mono truth := ‚ü®Œª A f g _, by ext‚ü©

lemma set_classifier_u {U X : Type u} {f : U ‚ü∂ X} {œá‚ÇÅ : X ‚ü∂ ulift Prop} (q : classifying truth f œá‚ÇÅ) :
  ‚àÄ x, (œá‚ÇÅ x).down ‚Üî ‚àÉ (a : U), f a = x :=
begin
  obtain ‚ü®ka, la, ma‚ü© := q,
  intro x,
  split, rintro,
  { let g := ma.lift (pullback_cone.mk (ùüô _) (Œª _, x) (by simp [ulift.ext_iff, function.funext_iff, a, truth])),
    refine ‚ü®g punit.star, _‚ü©,
    have : (g ‚â´ f) _ = (Œª _, x) _ := congr_fun (ma.fac _ walking_cospan.right) punit.star,
    exact this },
  rintro ‚ü®t, rfl‚ü©, have : _ = _ := congr_fun la t, simp at this, rw ‚Üê this, trivial,
end

noncomputable instance types_has_subobj_classifier : @has_subobject_classifier (Type u) category_theory.types :=
{ Œ© := ulift Prop,
  Œ©‚ÇÄ := punit,
  truth := truth,
  is_subobj_classifier :=
  { classifier_of := Œª A B f mon b, ulift.up (‚àÉ (a : A), f a = b),
    classifies' :=
    begin
      introsI A B f mon,
      refine ‚ü®Œª _, punit.star, _, _‚ü©,
      funext, ext1, dsimp [truth], rw [eq_iff_iff, true_iff], use x,
      refine is_limit.mk''' _ mon _,
      intro s,
      refine ‚ü®Œª i, (invert_mono f (s.snd i) _).1, _‚ü©,
      have z : _ = _ := congr_fun s.condition i,
      rw ‚Üê ulift.up.inj z, trivial,
      ext i,
      apply (invert_mono f (s.snd i) _).2,
    end,
    uniquely' :=
    begin
      introv _ fst, ext x,
      rw set_classifier_u fst x,
    end } }

@[simps]
def currying_equiv (A X Y : Type u) : ((prod_functor.obj A).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ A ‚Üí Y) :=
{ to_fun := Œª f b a,
  begin
    refine f ‚ü®Œª j, walking_pair.cases_on j a b, Œª j‚ÇÅ j‚ÇÇ, _‚ü©,
    rintros ‚ü®‚ü®rfl‚ü©‚ü©, refl
  end,
  inv_fun := Œª g ab, g (ab.1 walking_pair.right) (ab.1 walking_pair.left),
  left_inv := Œª f, by { ext ‚ü®ba‚ü©, dsimp, congr, ext ‚ü®j‚ü©, simp },
  right_inv := Œª _, rfl }

-- instance type_exponentiable (A : Type u) : exponentiable A :=
-- { is_adj :=
--   { right := adjunction.right_adjoint_of_equiv (currying_equiv A) (
--     begin
--       intros X X' Y f g,
--       dsimp [currying_equiv],
--       ext,
--       congr,
--       dunfold limits.prod.map,

--       -- rw types.types_limit_map,
--       -- congr, ext ‚ü®j‚ü©,
--       -- simp,
--       -- simp,
--     end),
--     adj := adjunction.adjunction_of_equiv_right _ _ } }

-- instance type_cc : cartesian_closed (Type u) :=
-- begin
--   split,
--   intro A,
--   apply_instance
-- end
