/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/

import category_theory.limits.shapes
import category_theory.limits.shapes.regular_mono
import category_theory.epi_mono
import sub

/-!
# Subobject classifiers

Define a subobject classifier, show that it implies there's a terminal object,
show that if there is a subobject classifier then every mono is regular.
-/
universes v u v‚ÇÇ u‚ÇÇ

open category_theory category_theory.category category_theory.limits

variables {C : Type u} [category.{v} C]

-- Define what it means for œá to classify the mono f.
abbreviation classifying {Œ© Œ©‚ÇÄ U X : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) (f : U ‚ü∂ X) (œá : X ‚ü∂ Œ©) := has_pullback_top f œá truth

instance subsingleton_classifying {Œ© Œ©‚ÇÄ U X : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) [mono truth] (f : U ‚ü∂ X) (œá : X ‚ü∂ Œ©) :
  subsingleton (classifying truth f œá) :=
‚ü®by { intros P Q, cases P, cases Q, congr, rw [‚Üê cancel_mono truth, P_comm, Q_comm] }‚ü©

structure is_subobject_classifier {Œ© Œ©‚ÇÄ : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) :=
(classifier_of : ‚àÄ {U X} (f : U ‚ü∂ X) [mono.{v} f], X ‚ü∂ Œ©)
(classifies' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f], classifying truth f (classifier_of f))
(uniquely' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f] (œá‚ÇÅ : X ‚ü∂ Œ©), classifying truth f œá‚ÇÅ ‚Üí classifier_of f = œá‚ÇÅ)

variable (C)
class has_subobject_classifier :=
(Œ© Œ©‚ÇÄ : C)
(truth : Œ©‚ÇÄ ‚ü∂ Œ©)
[truth_mono : mono.{v} truth]
(is_subobj_classifier : is_subobject_classifier truth)

def fork.is_limit.mk' {X Y : C} {f g : X ‚ü∂ Y} (t : fork f g)
  (create : Œ† (s : fork f g), {l : s.X ‚ü∂ t.X // l ‚â´ t.Œπ = s.Œπ ‚àß ‚àÄ {m : s.X ‚ü∂ t.X}, m ‚â´ t.Œπ = s.Œπ ‚Üí m = l}) :
is_limit t :=
fork.is_limit.mk t (Œª s, (create s).1) (Œª s, (create s).2.1) (Œª s m w, (create s).2.2 (w walking_parallel_pair.zero))

namespace classifier

variables [has_subobject_classifier.{v} C]

def Œ© : C := has_subobject_classifier.Œ©.{v}
def Œ©‚ÇÄ : C := has_subobject_classifier.Œ©‚ÇÄ.{v}
def truth : Œ©‚ÇÄ C ‚ü∂ Œ© C := has_subobject_classifier.truth
instance truth_mono : mono (truth C) := has_subobject_classifier.truth_mono
def subobj_classifier_is_subobj_classifier : is_subobject_classifier (truth C) := has_subobject_classifier.is_subobj_classifier

variable {C}
def classifier_of {U X : C} (f : U ‚ü∂ X) [mono f] : X ‚ü∂ Œ© C :=
(subobj_classifier_is_subobj_classifier C).classifier_of f
def classifies {U X : C} (f : U ‚ü∂ X) [mono f] : classifying (truth C) f (classifier_of f) :=
(subobj_classifier_is_subobj_classifier C).classifies' f
lemma uniquely {U X : C} (f : U ‚ü∂ X) [mono f] (œá‚ÇÅ : X ‚ü∂ Œ© C) (hœá : classifying (truth C) f œá‚ÇÅ) : classifier_of f = œá‚ÇÅ :=
(subobj_classifier_is_subobj_classifier C).uniquely' f œá‚ÇÅ hœá

end classifier

open classifier

variable {C}
-- Usually we would assume C has finite limits, and Œ©‚ÇÄ C might not be equal to it.
instance unique_to_Œ©‚ÇÄ [has_subobject_classifier.{v} C] (P : C) : unique (P ‚ü∂ Œ©‚ÇÄ C) :=
{ default := (classifies (ùüô _)).top,
  uniq := Œª a,
  begin
    rw [‚Üê cancel_mono (truth C), (classifies (ùüô _)).comm, id_comp, uniquely],
    apply left_iso_has_pullback_top a (ùüô P) (truth C) _ (id_comp _).symm,
  end }

variable (C)
instance truth_is_split [has_subobject_classifier.{v} C] : split_mono (truth C) :=
{ retraction := default _ }
variable {C}

def regular_of_is_pullback_of_regular {P Q R S : C} {f : P ‚ü∂ Q} {g : P ‚ü∂ R} {h : Q ‚ü∂ S} {k : R ‚ü∂ S} [hr : regular_mono h]
  (comm : f ‚â´ h = g ‚â´ k) (t : is_limit (pullback_cone.mk _ _ comm)) : regular_mono g :=
{ Z := hr.Z,
  left := k ‚â´ hr.left,
  right := k ‚â´ hr.right,
  w := by rw [‚Üê reassoc_of comm, ‚Üê reassoc_of comm, hr.w],
  is_limit :=
  begin
    apply fork.is_limit.mk' _ _,
    intro s,
    have l‚ÇÅ : (fork.Œπ s ‚â´ k) ‚â´ regular_mono.left = (fork.Œπ s ‚â´ k) ‚â´ regular_mono.right,
      rw [assoc, s.condition, assoc],
    let l‚ÇÇ : fork hr.left hr.right := fork.of_Œπ (s.Œπ ‚â´ k) l‚ÇÅ,
    let p‚ÇÇ : pullback_cone h k := pullback_cone.mk (hr.is_limit.lift l‚ÇÇ) s.Œπ (hr.is_limit.fac _ walking_parallel_pair.zero),
    refine ‚ü®t.lift p‚ÇÇ, t.fac p‚ÇÇ walking_cospan.right, _‚ü©,
    intros m w,
    have z : m ‚â´ g = t.lift p‚ÇÇ ‚â´ g,
      erw w, exact (t.fac p‚ÇÇ walking_cospan.right).symm,
    apply t.hom_ext,
    apply (pullback_cone.mk f g comm).equalizer_ext,
    erw [‚Üê cancel_mono h, assoc, assoc, comm],
    rw reassoc_of z,
    exact z,
  end }

instance regular_of_pullback_regular {P Q R : C} (f : P ‚ü∂ R) (g : Q ‚ü∂ R) [has_limit (cospan f g)] [regular_mono f] : regular_mono (pullback.snd : pullback f g ‚ü∂ Q) :=
regular_of_is_pullback_of_regular pullback.condition (cone_is_pullback f g)

variable [has_subobject_classifier.{v} C]
def mono_is_regular {A B : C} (m : A ‚ü∂ B) [mono m] : regular_mono m :=
regular_of_is_pullback_of_regular _ (classifies m).is_pb

def raised_factors {X Y Z : C} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (h : factors_through f g) [mono g] : {k // k ‚â´ g = f} :=
by haveI := mono_is_regular g; exact regular_mono.lift' _ _ (by { cases h, simp [‚Üê h_h, regular_mono.w] })

def balanced {A B : C} (f : A ‚ü∂ B) [ef : epi f] [mono f] : is_iso f :=
@is_iso_limit_cone_parallel_pair_of_epi _ _ _ _ _ _ _ (mono_is_regular f).is_limit ef

def reflects_isos (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] (F : C ‚•§ D) [faithful F] : reflects_isomorphisms F :=
‚ü®Œª A B f i, by exactI
begin
  haveI : epi f := faithful_reflects_epi F (by apply_instance),
  haveI : mono f := faithful_reflects_mono F (by apply_instance),
  apply balanced
end‚ü©