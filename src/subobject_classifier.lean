/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/

import category_theory.limits.shapes
import category_theory.limits.shapes.regular_mono
import category_theory.epi_mono
import sub

/-!
# Subobject classifiers

Define a subobject classifier, show that it implies there's a terminal object,
show that if there is a subobject classifier then every mono is regular.
-/
universes v u v‚ÇÇ u‚ÇÇ

open category_theory category_theory.category category_theory.limits

variables {C : Type u} [category.{v} C]

/-- Define what it means for œá to classify the mono f. -/
abbreviation classifying {Œ© Œ©‚ÇÄ U X : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) (f : U ‚ü∂ X) (œá : X ‚ü∂ Œ©) := has_pullback_top f œá truth

instance subsingleton_classifying {Œ© Œ©‚ÇÄ U X : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) [mono truth] (f : U ‚ü∂ X) (œá : X ‚ü∂ Œ©) :
  subsingleton (classifying truth f œá) :=
‚ü®by { intros P Q, cases P, cases Q, congr, rw [‚Üê cancel_mono truth, P_comm, Q_comm] }‚ü©

/--
`is_subobject_classifier truth` holds if the morphism `truth : Œ©‚ÇÄ ‚ü∂ Œ©` is a subobject classifier,
i.e. that for any monomorphism `U ‚ü∂ X`, there is a unique morphism `X ‚ü∂ Œ©` forming a pullback
square.
Note we do not require `truth` to be a monomorphism here, nor that `Œ©‚ÇÄ` is terminal.
-/
structure is_subobject_classifier {Œ© Œ©‚ÇÄ : C} (truth : Œ©‚ÇÄ ‚ü∂ Œ©) :=
(classifier_of : ‚àÄ {U X} (f : U ‚ü∂ X) [mono.{v} f], X ‚ü∂ Œ©)
(classifies' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f], classifying truth f (classifier_of f))
(uniquely' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f] (œá‚ÇÅ : X ‚ü∂ Œ©), classifying truth f œá‚ÇÅ ‚Üí classifier_of f = œá‚ÇÅ)

variable (C)

/--
A category has a subobject classifier if there is a monomorphism `truth` which is a
subobject classifier.
We do not require `Œ©‚ÇÄ` to be terminal, nor do we assume the existence of any limits.
-/
class has_subobject_classifier :=
(Œ© Œ©‚ÇÄ : C)
(truth : Œ©‚ÇÄ ‚ü∂ Œ©)
[truth_mono : mono.{v} truth]
(is_subobj_classifier : is_subobject_classifier truth)

variables [has_subobject_classifier.{v} C]

/-! Convenience interface to the `has_subobject_classifier` class. -/
namespace classifier

/-- Convenience notation for the classifier target given the typeclass `has_subobject_classifier`. -/
def Œ© : C := has_subobject_classifier.Œ©.{v}
/-- Convenience notation for the classifier source given the typeclass `has_subobject_classifier`. -/
def Œ©‚ÇÄ : C := has_subobject_classifier.Œ©‚ÇÄ.{v}
/-- Convenience notation for the classifier given the typeclass `has_subobject_classifier`. -/
def truth : Œ©‚ÇÄ C ‚ü∂ Œ© C := has_subobject_classifier.truth
/-- From the typeclass `has_subobject_classifier`, show that the classifier `truth` is a monomorphism. -/
instance truth_mono : mono (truth C) := has_subobject_classifier.truth_mono
/-- The subobject classifier given by `has_subobject_classifier` is actually a classifier. -/
def subobj_classifier_is_subobj_classifier : is_subobject_classifier (truth C) := has_subobject_classifier.is_subobj_classifier

variable {C}
def classifier_of {U X : C} (f : U ‚ü∂ X) [mono f] : X ‚ü∂ Œ© C :=
(subobj_classifier_is_subobj_classifier C).classifier_of f
def classifies {U X : C} (f : U ‚ü∂ X) [mono f] : classifying (truth C) f (classifier_of f) :=
(subobj_classifier_is_subobj_classifier C).classifies' f
lemma uniquely {U X : C} (f : U ‚ü∂ X) [mono f] (œá‚ÇÅ : X ‚ü∂ Œ© C) (hœá : classifying (truth C) f œá‚ÇÅ) : classifier_of f = œá‚ÇÅ :=
(subobj_classifier_is_subobj_classifier C).uniquely' f œá‚ÇÅ hœá

end classifier

open classifier

-- Usually we would assume C has finite limits, and Œ©‚ÇÄ C might not be equal to it.
instance unique_to_Œ©‚ÇÄ (P : C) : unique (P ‚ü∂ Œ©‚ÇÄ C) :=
{ default := (classifies (ùüô _)).top,
  uniq := Œª a,
  begin
    rw [‚Üê cancel_mono (truth C), (classifies (ùüô _)).comm, id_comp, uniquely],
    apply left_iso_has_pullback_top a (ùüô P) (truth C) _ (id_comp _).symm,
  end }

instance truth_is_split : split_mono (truth C) :=
{ retraction := default _ }

variable {C}

/-- In a category with a subobject classifier, any mono is regular. -/
def mono_is_regular {A B : C} (m : A ‚ü∂ B) [mono m] : regular_mono m :=
regular_of_is_pullback_snd_of_regular _ (classifies m).is_pb

/--
`factors_through f g` is usually a `Prop`, but if `g` is a mono, it's a regular mono so we can
lift it to data.
-/
def raised_factors {X Y Z : C} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} (h : factors_through f g) [mono g] : {k // k ‚â´ g = f} :=
begin
  haveI := mono_is_regular g,
  refine regular_mono.lift' _ _ _,
  casesI h,
  have : h.left ‚â´ g = f := over.w h,
  rw [‚Üê this, assoc, assoc, regular_mono.w],
end

/-- A category with a subobject classifier is balanced. -/
-- Making this an instance screws with resolution (unsurprisingly).
def balanced {A B : C} (f : A ‚ü∂ B) [ef : epi f] [mono f] : is_iso f :=
@is_iso_limit_cone_parallel_pair_of_epi _ _ _ _ _ _ _ (mono_is_regular f).is_limit ef

/--
If the source of a faithful functor has a subobject classifier, the functor reflects
isomorphisms. This holds for any balanced category.
-/
def reflects_isos (D : Type u‚ÇÇ) [category.{v‚ÇÇ} D] (F : C ‚•§ D) [faithful F] : reflects_isomorphisms F :=
‚ü®Œª A B f i, by exactI
begin
  haveI : epi f := faithful_reflects_epi F (by apply_instance),
  haveI : mono f := faithful_reflects_mono F (by apply_instance),
  apply balanced
end‚ü©
