import category_theory.monad
/-
Copyright (c) 2020 Wojciech Nawrocki. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Author: Wojciech Nawrocki
-/

/-! # Kleisli category on a monad
TODO(WN): reference a book or the notes -/
namespace category_theory

universes v u -- declare the `v`'s first; see `category_theory.category` for an explanation

variables {C : Type u} [ùíû : category.{v} C]
include ùíû

def kleisli (T : C ‚•§ C) [monad.{v} T] := C

instance kleisli.category (T : C ‚•§ C) [monad.{v} T] : category (kleisli T) :=
{ hom  := Œª (X Y : C), X ‚ü∂ T.obj Y,
  id   := Œª X, (Œ∑_ T).app X,
  comp := Œª X Y Z f g, f ‚â´ T.map g ‚â´ (Œº_ T).app Z,

  id_comp' := Œª X Y f, by simp [‚Üêcategory.assoc, ‚Üênat_trans.naturality (Œ∑_ T) f, monad.left_unit'],
  comp_id' := Œª X Y f, by simp only [category.comp_id, monad.right_unit ],
  assoc'   := Œª W X Y Z f g h, begin
    simp only [functor.map_comp, category.assoc],
    congr' 2, rw monad.assoc T Z,
    conv_rhs { erw [‚Üêcategory.assoc, nat_trans.naturality (Œº_ T) h,
                    category.assoc] } -- TODO(WN): assoc_rw pls
  end }

namespace kleisli

variables (T : C ‚•§ C) [monad.{v} T]

-- TODO(WN): what to call these functors (F_T and G_T)?
@[simps] def F_T : C ‚•§ kleisli T :=
{ obj       := Œª X, X,
  map       := Œª X Y f, by dunfold has_hom.hom; exact f ‚â´ (Œ∑_ T).app Y,
  map_id'   := Œª X, by simpa only [category.id_comp],
  map_comp' := Œª X Y Z f g, begin
    dunfold category_struct.comp, dsimp,
    simpa only [monad.right_unit, category.comp_id,
                 functor.map_comp, category.assoc,
                 ‚Üênat_trans.naturality (Œ∑_ T) g] end }

@[simps] def G_T : kleisli T ‚•§ C :=
{ obj       := Œª X, T.obj X,
  map       := Œª X Y f, T.map f ‚â´ (Œº_ T).app Y,
  map_id'   := Œª X, by simp only [category_struct.id, monad.right_unit],
  map_comp' := Œª X Y Z f g, begin
    dunfold category_struct.comp, dsimp,
    simp only [monad.assoc T Z, functor.map_comp, category.assoc],
    congr' 1,
    erw [‚Üêcategory.assoc, nat_trans.naturality (Œº_ T) g, category.assoc],
  end }

theorem F_T_G_T_eq_T : F_T T ‚ãô G_T T = T :=
begin
  apply functor.ext,
  { intros X Y f,
    show T.map (f ‚â´ (Œ∑_ T).app Y) ‚â´ (Œº_ T).app Y = _,
    simp only [category.comp_id, category.id_comp,
               eq_to_hom_refl, monad.right_unit,
               category.assoc, functor.map_comp] },
  { intro X, refl }
end

/- The Kleisli adjunction which gives rise to the monad (T, Œ∑_ T, Œº_ T). -/
def adj : F_T T ‚ä£ G_T T :=
adjunction.mk_of_unit_counit
{ unit := by rw [F_T_G_T_eq_T]; exact Œ∑_ T,
  counit :=
    { app := Œª X, ùüô (T.obj X),
      naturality' := Œª X Y f, begin
        dunfold category_struct.comp, dsimp,
        simp only [category.comp_id, category.id_comp, category.assoc,
                   functor.map_id, monad.left_unit] end },
  left_triangle' := begin
    ext X, simp, dunfold category_struct.comp, dsimp,
    simp [category_struct.id],
    congr, exact F_T_G_T_eq_T T,
    simp only [eq_mpr_heq]
  end,
  right_triangle' := begin
    sorry
    -- TODO(WN): rw in unit causes horrible heq stuff here, how to get rid?
    -- or alternatively, how to write a reasonable proof using heqs?
  end }

end kleisli
end category_theory
