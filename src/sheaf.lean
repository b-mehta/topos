import power
import category_theory.full_subcategory
import category_theory.limits.creates
import category_theory.reflect_isomorphisms
import reflects
import cartesian_closed
import sub

open category_theory category_theory.category category_theory.limits
open subobj

universes v u u‚ÇÇ

def tag (n : ‚Ñï) {Œ± : Sort u} (x : Œ±) : Œ± := x

variables (C : Type u) [ùíû : category.{v} C]
include ùíû

variable {C}
def tag' (n : ‚Ñï) (A B : C) (f : A ‚ü∂ B) : A ‚ü∂ B := f

variables [has_finite_limits.{v} C] [has_subobject_classifier.{v} C] [is_cartesian_closed.{v} C]

lemma classify_pullback {E F A : C} (m : A ‚ü∂ E) (f : F ‚ü∂ E) [mono m] : f ‚â´ classifier_of m = classifier_of (pullback.snd : pullback m f ‚ü∂ F) :=
begin
  apply has_subobject_classifier.uniquely,
  apply left_right_hpb_to_both_hpb _ has_pullback_top_of_pb (subobj.classifies m),
end

@[reducible]
def get_subobject_obj {B : C} (c : B ‚ü∂ Œ© C) : C := pullback (truth C) c
def get_subobject {B : C} (c : B ‚ü∂ Œ© C) : get_subobject_obj c ‚ü∂ B := pullback.snd

instance get_subobject_mono {B : C} (c : B ‚ü∂ Œ© C) : mono (get_subobject c) := pullback.snd_of_mono

lemma classify_inv {E : C} (c : E ‚ü∂ Œ© C) : classifier_of (get_subobject c) = c :=
(has_subobject_classifier.uniquely _ _ has_pullback_top_of_pb).symm

lemma class_lift_of_is_iso {A‚ÇÅ A‚ÇÇ E : C} {m‚ÇÅ : A‚ÇÅ ‚ü∂ E} {m‚ÇÇ : A‚ÇÇ ‚ü∂ E} [mono m‚ÇÅ] [mono m‚ÇÇ] (h : A‚ÇÇ ‚ü∂ A‚ÇÅ) [is_iso h] :
  h ‚â´ m‚ÇÅ = m‚ÇÇ ‚Üí classifier_of m‚ÇÅ = classifier_of m‚ÇÇ :=
begin
  intros k,
  apply has_subobject_classifier.uniquely,
  change has_pullback_top _ _ _,
  rw ‚Üê id_comp (classifier_of m‚ÇÅ),
  apply left_right_hpb_to_both_hpb m‚ÇÅ,
  apply top_iso_has_pullback_top h,
    simpa,
  apply subobj.classifies,
end

lemma class_lift_of_iso {A‚ÇÅ A‚ÇÇ E : C} {m‚ÇÅ : A‚ÇÅ ‚ü∂ E} {m‚ÇÇ : A‚ÇÇ ‚ü∂ E} [mono m‚ÇÅ] [mono m‚ÇÇ] (h : A‚ÇÅ ‚âÖ A‚ÇÇ) :
  m‚ÇÅ = h.hom ‚â´ m‚ÇÇ ‚Üí classifier_of m‚ÇÅ = classifier_of m‚ÇÇ :=
begin
  intro l,
  apply class_lift_of_is_iso h.inv,
  simp [l],
end

lemma class_lift_of_both_factor {A‚ÇÅ A‚ÇÇ E : C} {m‚ÇÅ : A‚ÇÅ ‚ü∂ E} {m‚ÇÇ : A‚ÇÇ ‚ü∂ E} [mono m‚ÇÅ] [mono m‚ÇÇ] (hom : A‚ÇÅ ‚ü∂ A‚ÇÇ) (inv : A‚ÇÇ ‚ü∂ A‚ÇÅ) :
  m‚ÇÅ = hom ‚â´ m‚ÇÇ ‚Üí m‚ÇÇ = inv ‚â´ m‚ÇÅ ‚Üí classifier_of m‚ÇÅ = classifier_of m‚ÇÇ :=
begin
  intros k l,
  apply class_lift_of_iso ‚ü®hom, inv, _, _‚ü© k,
  rw ‚Üê cancel_mono m‚ÇÅ, simp [‚Üê k, ‚Üê l],
  rw ‚Üê cancel_mono m‚ÇÇ, simp [‚Üê k, ‚Üê l],
end

def how_inj_is_classifier {E A‚ÇÅ A‚ÇÇ : C} (m‚ÇÅ : A‚ÇÅ ‚ü∂ E) (m‚ÇÇ : A‚ÇÇ ‚ü∂ E) [mono m‚ÇÅ] [mono m‚ÇÇ] (h : classifier_of m‚ÇÅ = classifier_of m‚ÇÇ) :
A‚ÇÅ ‚âÖ A‚ÇÇ :=
{ hom := (subobj.square.is_pullback m‚ÇÇ).lift (pullback_cone.mk (subobj.square.k m‚ÇÅ) m‚ÇÅ (h ‚ñ∏ subobj.square.commutes m‚ÇÅ)),
  inv := (subobj.square.is_pullback m‚ÇÅ).lift (pullback_cone.mk (subobj.square.k m‚ÇÇ) m‚ÇÇ (h.symm ‚ñ∏ subobj.square.commutes m‚ÇÇ)),
  hom_inv_id' :=
  begin
    erw [‚Üê cancel_mono m‚ÇÅ, assoc,
         (subobj.square.is_pullback m‚ÇÅ).fac _ walking_cospan.right,
         (subobj.square.is_pullback m‚ÇÇ).fac _ walking_cospan.right],
    simp
  end,
  inv_hom_id' :=
  begin
    erw [‚Üê cancel_mono m‚ÇÇ, assoc,
         (subobj.square.is_pullback m‚ÇÇ).fac _ walking_cospan.right,
         (subobj.square.is_pullback m‚ÇÅ).fac _ walking_cospan.right],
    simp
  end }

lemma c_very_inj {E A‚ÇÅ A‚ÇÇ : C} {m‚ÇÅ : A‚ÇÅ ‚ü∂ E} {m‚ÇÇ : A‚ÇÇ ‚ü∂ E} [mono m‚ÇÅ] [mono m‚ÇÇ] (h : classifier_of m‚ÇÅ = classifier_of m‚ÇÇ) :
  (how_inj_is_classifier _ _ h).hom ‚â´ m‚ÇÇ = m‚ÇÅ :=
(subobj.square.is_pullback m‚ÇÇ).fac _ walking_cospan.right

@[simps]
def classification {B : C} : sub B ‚âÉ (B ‚ü∂ Œ© C) :=
{ to_fun := Œª f,
  begin
    apply quotient.lift_on f _ _,
    intro f',
    exact @classifier_of _ _ _ _ _ f'.1.hom f'.2,
    rintros a b ‚ü®‚ü®k, hk‚ü©, ‚ü®l, hl‚ü©‚ü©,
    haveI := a.2,
    haveI := b.2,
    refine class_lift_of_both_factor k l hk hl,
  end,
  inv_fun := Œª f, ‚ü¶‚ü®over.mk (get_subobject f), get_subobject_mono f‚ü©‚üß,
  left_inv := Œª f,
  begin
    dsimp,
    apply quotient.induction_on f,
    intro f',
    apply quotient.sound,
    haveI := f'.2,
    refine ‚ü®‚ü®_, ((subobj.square.is_pullback f'.1.hom).fac _ walking_cospan.right).symm‚ü©,
            ‚ü®_, (pullback.lift_snd _ _ (subobj.square.commutes f'.1.hom)).symm‚ü©‚ü©,
  end,
  right_inv := Œª c, classify_inv c }

-- @[reducible]
-- def classify (f : sub B) : B ‚ü∂ Œ© C := classification

lemma classification_natural {B B' : C} (f : B ‚ü∂ B') (m : sub B') : f ‚â´ classification.to_fun m = classification.to_fun (sub_map f m) :=
begin
  revert m, apply quotient.ind, intro m,
  dsimp [sub_map],
  apply classify_pullback,
end

lemma classification_natural_symm {B B' : C} (f : B ‚ü∂ B') (c : B' ‚ü∂ Œ© C) : classification.inv_fun (f ‚â´ c) = sub_map f (classification.inv_fun c) :=
begin
  erw classification.symm_apply_eq,
  conv_lhs {rw ‚Üê classification.right_inv c},
  rw classification_natural,
  refl
end

def sub_bot {B : C} : sub B := ‚ü¶‚ü®over.mk (initial.to B), category_theory.initial_mono B‚ü©‚üß
instance {B : C} : order_bot (sub B) :=
{ bot := sub_bot,
  bot_le :=
  begin
    apply quotient.ind, intro a,
    refine ‚ü®initial.to _, _‚ü©,
    dsimp,
    apply subsingleton.elim,
  end,
  ..category_theory.sub_partial }

-- lemma inf_eq_intersection :
namespace intersect

def indicators {B : C} (m : B ‚ü∂ Œ© C) (n : B ‚ü∂ Œ© C) : B ‚ü∂ Œ© C :=
classification.to_fun (classification.inv_fun m ‚äì classification.inv_fun n)

def indicators_natural {B B' : C} (f : B' ‚ü∂ B) (m : B ‚ü∂ Œ© C) (n : B ‚ü∂ Œ© C) :
  f ‚â´ indicators m n = indicators (f ‚â´ m) (f ‚â´ n) :=
begin
  dunfold indicators,
  rw [classification_natural, intersect_prop, ‚Üê classification_natural_symm, ‚Üê classification_natural_symm],
end

end intersect

variable (C)

def and_arrow : Œ© C ‚®Ø Œ© C ‚ü∂ Œ© C := intersect.indicators limits.prod.fst limits.prod.snd

lemma property {B : C} (m‚ÇÅ m‚ÇÇ : sub B) :
  limits.prod.lift (classification.to_fun m‚ÇÅ) (classification.to_fun m‚ÇÇ) ‚â´ and_arrow C = classification.to_fun (m‚ÇÅ ‚äì m‚ÇÇ) :=
by rw [and_arrow, intersect.indicators_natural, prod.lift_fst, prod.lift_snd, intersect.indicators, classification.left_inv, classification.left_inv]

class topology (j : Œ© C ‚ü∂ Œ© C) :=
(ax1 : truth C ‚â´ j = truth C)
(ax2 : j ‚â´ j = j)
(ax3 : and_arrow C ‚â´ j = limits.prod.map j j ‚â´ and_arrow C)

variable {C}

lemma classify_self {E : C} : classifier_of (ùüô E) = default (E ‚ü∂ Œ©‚ÇÄ C) ‚â´ truth C :=
begin
  symmetry,
  apply has_subobject_classifier.uniquely,
  apply left_iso_has_pullback_top (default (E ‚ü∂ Œ©‚ÇÄ C)),
  rw id_comp
end

lemma classify_top (E : C) : classification.to_fun ‚ä§ = default (E ‚ü∂ Œ©‚ÇÄ C) ‚â´ truth C :=
by { dsimp [top_eq_top, classification_to_fun, sub_top], rw classify_self }
-- def pushforward_well_defined {B A A‚ÇÅ A‚ÇÇ : C} (n : A ‚ü∂ B) [mono n] (m‚ÇÅ : A‚ÇÅ ‚ü∂ A) (m‚ÇÇ : A‚ÇÇ ‚ü∂ A) [mono m‚ÇÅ] [mono m‚ÇÇ]
--   (h : classifier_of m‚ÇÅ = classifier_of m‚ÇÇ) : classifier_of (m‚ÇÅ ‚â´ n) = classifier_of (m‚ÇÇ ‚â´ n) :=
-- begin
--   let i := how_inj_is_classifier _ _ h,
--   apply class_lift_of_iso i _,
--   rw [‚Üê c_very_inj h, assoc],
-- end

-- def c_leq_prop {E A‚ÇÅ A‚ÇÇ : C} (m‚ÇÅ : A‚ÇÅ ‚ü∂ E) (m‚ÇÇ : A‚ÇÇ ‚ü∂ E) [mono m‚ÇÅ] [mono m‚ÇÇ] :
--   (‚àÉ (k : A‚ÇÅ ‚ü∂ A‚ÇÇ), m‚ÇÅ = k ‚â´ m‚ÇÇ) ‚Üî prod.lift (classifier_of m‚ÇÅ) (classifier_of m‚ÇÇ) ‚â´ and_arrow C = classifier_of m‚ÇÅ :=
-- begin

--   -- have q : ‚àÄ k, m‚ÇÅ ‚â´ prod.lift (ùüô E) (terminal.from E) = k ‚â´ m‚ÇÇ ‚â´ prod.lift (ùüô E) (terminal.from E) ‚Üî m‚ÇÅ = k ‚â´ m‚ÇÇ,
--   --   intro k,
--   --   refine ‚ü®Œª p, _, _‚ü©,
--   --   { simpa using p =‚â´ limits.prod.fst },
--   --   { intro,
--   --     rw ‚Üê assoc,
--   --     congr' 1,
--   --     exact a },
--   -- have : (‚àÉ (k : A‚ÇÅ ‚ü∂ A‚ÇÇ), m‚ÇÅ ‚â´ prod.lift (ùüô E) (terminal.from E) = k ‚â´ m‚ÇÇ ‚â´ prod.lift (ùüô E) (terminal.from E)) ‚Üî
--   --        limits.prod.lift (classifier_of m‚ÇÅ) (classifier_of m‚ÇÇ) ‚â´ and_arrow C = prod.lift (classifier_of _) _ ‚â´ _ := leq_prop _ _ _ _ _ _,
--   --   rw prod.lift_fst at this,
--   --   conv_lhs at this {congr, funext, rw q k},
--   -- exact this,
-- end

-- Heh. Lift the exists from `c_leq_prop` into data.
-- def make_le {E A‚ÇÅ A‚ÇÇ : C} (m‚ÇÅ : A‚ÇÅ ‚ü∂ E) (m‚ÇÇ : A‚ÇÇ ‚ü∂ E) [mono m‚ÇÅ] [mono m‚ÇÇ]
--   (h : prod.lift (classifier_of m‚ÇÅ) (classifier_of m‚ÇÇ) ‚â´ and_arrow C = classifier_of m‚ÇÅ) :
--   A‚ÇÅ ‚ü∂ A‚ÇÇ :=
-- begin
--   rw ‚Üê c_leq_prop at h,
--   have comm : default _ ‚â´ truth C = m‚ÇÅ ‚â´ classifier_of m‚ÇÇ,
--     cases h,
--     rw h_h,
--     rw assoc,
--     rw ‚Üê subobj.square.commutes m‚ÇÇ,
--     rw ‚Üê assoc,
--     congr,
--   exact (subobj.square.is_pullback m‚ÇÇ).lift (pullback_cone.mk _ _ comm)
-- end

-- def make_mono {A B : C}

-- lemma make_le_comm {E A‚ÇÅ A‚ÇÇ : C} (m‚ÇÅ : A‚ÇÅ ‚ü∂ E) (m‚ÇÇ : A‚ÇÇ ‚ü∂ E) [mono m‚ÇÅ] [mono m‚ÇÇ]
--   (h : prod.lift (classifier_of m‚ÇÅ) (classifier_of m‚ÇÇ) ‚â´ and_arrow C = classifier_of m‚ÇÅ) :
--   make_le m‚ÇÅ m‚ÇÇ h ‚â´ m‚ÇÇ = m‚ÇÅ :=
-- (subobj.square.is_pullback m‚ÇÇ).fac _ walking_cospan.right


-- def classify_intersect

variables (j : Œ© C ‚ü∂ Œ© C) [topology.{v} C j]

namespace closure

variables {E A : C}

def closure (m : sub E) : sub E := classification.inv_fun (classification.to_fun m ‚â´ j)
lemma classify (m : sub E) : classification.to_fun (closure j m) = classification.to_fun m ‚â´ j :=
classification.right_inv _

def comm_pullback (m : sub E) (f : A ‚ü∂ E) : sub_map f (closure j m) = closure j (sub_map f m) :=
begin
  apply classification.left_inv.injective,
  rw [‚Üê classification_natural, classify, classify, ‚Üê classification_natural, assoc],
end

lemma less_than_closure : ‚àÄ (m : sub E), m ‚â§ closure j m :=
begin
  apply quotient.ind,
  intro m,
  haveI := m.2,
  refine ‚ü®pullback.lift (square.k m.1.hom) m.1.hom _, (pullback.lift_snd _ _ _).symm‚ü©,
  dsimp [classification_to_fun],
  rw [‚Üê reassoc_of (subobj.square.commutes m.1.hom), topology.ax1],
end

lemma idem (m : sub E) : closure j (closure j m) = closure j m :=
begin
  apply classification.left_inv.injective,
  rw [closure.classify, closure.classify, assoc, topology.ax2],
end

lemma transfer_le (m n : sub E) :
  m ‚â§ n ‚Üî prod.lift (classification.to_fun m) (classification.to_fun n) ‚â´ and_arrow C = classification.to_fun m :=
begin
  rw [property, function.injective.eq_iff classification.left_inv.injective], simp,
end

lemma monotone (m n : sub E) : m ‚â§ n ‚Üí closure j m ‚â§ closure j n :=
begin
  rw [transfer_le, transfer_le, closure.classify, closure.classify, ‚Üê prod.lift_map, assoc, ‚Üê topology.ax3],
  intro k, rw reassoc_of k
end

@[reassoc] lemma classify_postcompose' {A' : C} (n : A ‚ü∂ A') (m : A' ‚ü∂ E) [mono n] [mono m] :
  classifier_of n = m ‚â´ classifier_of (n ‚â´ m) :=
begin
  symmetry,
  apply has_subobject_classifier.uniquely,
  apply left_right_hpb_to_both_hpb (n ‚â´ m) (top_iso_has_pullback_top (ùüô _) _ _ m _) (subobj.classifies _),
  rw id_comp,
end

@[reassoc] lemma classify_postcompose {B E : C} (m : B ‚ü∂ E) [mono m] :
  ‚àÄ (n : sub B), classification.to_fun n = m ‚â´ classification.to_fun (postcompose m n) :=
begin
  apply quotient.ind,
  intro n,
  dsimp [postcompose],
  apply classify_postcompose',
end

def raise_le {B : C} {m‚ÇÅ m‚ÇÇ : sub' B} (h : m‚ÇÅ ‚â§ m‚ÇÇ) : m‚ÇÅ.1.left ‚ü∂ m‚ÇÇ.1.left :=
begin
  haveI := m‚ÇÇ.2,
  apply (subobj.square.is_pullback m‚ÇÇ.1.hom).lift (pullback_cone.mk (default _) m‚ÇÅ.1.hom _),
  cases h,
  rw [h_h, assoc, ‚Üê subobj.square.commutes m‚ÇÇ.1.hom, ‚Üê assoc, cancel_mono (truth C)],
  apply subsingleton.elim
end

@[reassoc] lemma raise_le_prop {B : C} {m‚ÇÅ m‚ÇÇ : sub' B} (h : m‚ÇÅ ‚â§ m‚ÇÇ) : raise_le h ‚â´ m‚ÇÇ.1.hom = m‚ÇÅ.1.hom :=
begin
  haveI := m‚ÇÇ.2,
  apply (subobj.square.is_pullback m‚ÇÇ.1.hom).fac _ walking_cospan.right,
end

def mediating_subobject {E : C} {m‚ÇÅ m‚ÇÇ : sub' E} (h : m‚ÇÅ ‚â§ m‚ÇÇ) : sub' m‚ÇÇ.1.left :=
‚ü®over.mk (raise_le h), begin haveI := m‚ÇÅ.2, apply mono_of_mono_fac (raise_le_prop h) end‚ü©

lemma mediating_subobject_prop {E : C} {m‚ÇÅ m‚ÇÇ : sub' E} (h : m‚ÇÅ ‚â§ m‚ÇÇ) :
  (mediating_subobject h).1.hom ‚â´ m‚ÇÇ.1.hom = m‚ÇÅ.1.hom :=
raise_le_prop _

-- def obj (m : A ‚ü∂ E) [mono m] : C := pullback (truth C) (classifier_of m ‚â´ j)

-- def arrow (m : A ‚ü∂ E) [mono m] : closure.obj j m ‚ü∂ E := pullback.snd

-- instance is_sub (m : A ‚ü∂ E) [mono m] : mono (closure.arrow j m) := pullback.snd_of_mono

-- def hat (m : A ‚ü∂ E) [mono m] : classifier_of (arrow j m) = classifier_of m ‚â´ j :=
-- (has_subobject_classifier.uniquely _ _ ‚ü®pullback.fst, pullback.condition, cone_is_pullback _ _‚ü©).symm

-- def less_than_closu
-- def less_than_closure (m : A ‚ü∂ E) [mono m] : A ‚ü∂ closure.obj j m :=
-- pullback.lift (square.k m) m (by rw [‚Üê reassoc_of (subobj.square.commutes m), topology.ax1])

-- lemma is_lt (m : A ‚ü∂ E) [mono m] : less_than_closure j m ‚â´ closure.arrow j m = m :=
-- pullback.lift_snd _ _ _

-- @[reassoc] def classify_subobj {A' : C} (n : A ‚ü∂ A') (m : A' ‚ü∂ E) [mono n] [mono m] :
--   classifier_of n = m ‚â´ classifier_of (n ‚â´ m) :=
-- begin
--   symmetry,
--   apply has_subobject_classifier.uniquely,
--   refine ‚ü®ùüô _ ‚â´ square.k (n ‚â´ m), _, _‚ü©,
--   { rw [‚Üê assoc, ‚Üê subobj.square.commutes (n ‚â´ m)], congr },
--   apply (pasting (ùüô A) _ n (n ‚â´ m) (truth C) m (classifier_of (n ‚â´ m)) _ _ (subobj.square.is_pullback (n ‚â´ m))).inv
--     (pullback_square_iso' _ _ _ _ _),
--   rw id_comp,
-- end

-- def idem (m : A ‚ü∂ E) [mono m] : obj j (arrow j m) ‚âÖ obj j m :=
-- begin
--   have: classifier_of (arrow j (arrow j m)) = classifier_of (arrow j m),
--     rw [hat, hat, assoc, topology.ax2],
--   exact how_inj_is_classifier _ _ this,
-- end

-- def monotone {B : C} (m : A ‚ü∂ E) (n : B ‚ü∂ E) [mono m] [mono n] (hk : ‚àÉ (k : A ‚ü∂ B), m = k ‚â´ n) : obj j m ‚ü∂ obj j n :=
-- begin
--   apply make_le (arrow j m) (arrow j n),
--   rw [hat, hat, ‚Üê prod.lift_map, assoc, ‚Üê topology.ax3, ‚Üê assoc, (c_leq_prop _ _).1 hk]
-- end

-- lemma monotone_comm {B : C} (m : A ‚ü∂ E) (n : B ‚ü∂ E) [mono m] [mono n] (hk : ‚àÉ (k : A ‚ü∂ B), m = k ‚â´ n) :
--   monotone j m n hk ‚â´ arrow j n = arrow j m :=
-- make_le_comm _ _ _

class dense (m : sub E) :=
(closure_eq_top : closure j m = ‚ä§)

def dense_of_classifier_eq (m : sub E) (hm : classification.to_fun m ‚â´ j = default _ ‚â´ truth C) : dense j m :=
begin
  rw [‚Üê closure.classify, ‚Üê classify_top] at hm,
  exact ‚ü®classification.left_inv.injective hm‚ü©,
end

instance dense_inclusion (m : sub' E) : dense j ‚ü¶mediating_subobject (less_than_closure j ‚ü¶m‚üß)‚üß :=
begin
  apply dense_of_classifier_eq,
  haveI := m.2,
  rw classify_postcompose (get_subobject (classifier_of m.val.hom ‚â´ j)),
  rw assoc,
  dsimp [postcompose, mediating_subobject],
  slice_lhs 2 2 {congr, erw raise_le_prop},
  convert (subobj.square.commutes (get_subobject (classifier_of m.val.hom ‚â´ j))).symm,
  rw classify_inv (classifier_of m.val.hom ‚â´ j),
end

lemma classifier_eq_of_dense (m : sub E) [d : dense j m] : classification.to_fun m ‚â´ j = default _ ‚â´ truth C :=
by rw [‚Üê classify_top, ‚Üê closure.classify, dense.closure_eq_top]

class closed (m : sub E) :=
(closure_eq_self : closure j m = m)

def closed_of_classifier_eq (m : sub E) (hm : classification.to_fun m ‚â´ j = classification.to_fun m) : closed j m :=
begin
  rw [‚Üê closure.classify] at hm,
  refine ‚ü®classification.left_inv.injective hm‚ü©,
end

lemma classifier_eq_of_closed (m : sub E) [c : closed j m] : classification.to_fun m ‚â´ j = classification.to_fun m :=
by rw [‚Üê closure.classify, closed.closure_eq_self]

instance is_closed (m : sub E) : closed j (closure j m) := ‚ü®idem j m‚ü©

def lifting_square {A B : C} (f : B ‚ü∂ A) (n : sub' B) (m : sub' A) (f' : n.1.left ‚ü∂ m.1.left)
  [c : closed j ‚ü¶m‚üß] [d : dense j ‚ü¶n‚üß] (comm : f' ‚â´ m.1.hom = n.1.hom ‚â´ f) :
  B ‚ü∂ m.1.left :=
begin
  have : ‚ä§ ‚â§ sub_map f ‚ü¶m‚üß,
    rw [‚Üê d.closure_eq_top, ‚Üê c.closure_eq_self, comm_pullback],
    apply monotone,
    refine ‚ü®pullback.lift _ _ comm, (pullback.lift_snd _ _ _).symm‚ü©,
  apply raise_le this ‚â´ pullback.fst,
end

def lifting_square_prop {A B : C} {f : B ‚ü∂ A} {n : sub' B} {m : sub' A} {f' : n.1.left ‚ü∂ m.1.left}
  [c : closed j ‚ü¶m‚üß] [d : dense j ‚ü¶n‚üß] (comm : f' ‚â´ m.1.hom = n.1.hom ‚â´ f) :
  lifting_square j _ _ _ _ comm ‚â´ m.1.hom = f :=
begin
  rw [lifting_square, assoc, pullback.condition, ‚Üê assoc],
  erw [raise_le_prop, id_comp],
end

-- def mono_of_pullback {E F A B : C} {m : A ‚ü∂ E} {f : F ‚ü∂ E} {l : B ‚ü∂ F} {t : B ‚ü∂ A} (comm : t ‚â´ m = l ‚â´ f)
--   (lim : is_limit (pullback_cone.mk _ _ comm)) [mono m] : mono l :=
-- begin
--   refine ‚ü®Œª Z g h eq, _‚ü©,
--   apply lim.hom_ext,
--   apply (pullback_cone.mk t l comm).equalizer_ext,
--   rw ‚Üê cancel_mono m,
--   erw [assoc, assoc, comm, reassoc_of eq],
--   exact eq
-- end

-- def dense_of_pullback {E F A B : C} {m : A ‚ü∂ E} {f : F ‚ü∂ E} {l : B ‚ü∂ F} {t : B ‚ü∂ A} (comm : t ‚â´ m = l ‚â´ f)
--   (lim : is_limit (pullback_cone.mk _ _ comm)) [dense j m] : dense j l :=
-- begin
--   haveI := mono_of_pullback comm lim,
--   apply dense_of_classifier_eq,
--   suffices: classifier_of l = f ‚â´ classifier_of m,
--     rw [this, assoc, classifier_eq_of_dense j m, ‚Üê assoc],
--     congr,
--   rw classify_pullback,
--   fapply class_lift_of_both_factor,
--   fapply pullback.lift t l comm,
--   fapply lim.lift (pullback_cone.mk pullback.fst pullback.snd pullback.condition),
--   rw pullback.lift_snd,
--   exact (lim.fac (pullback_cone.mk pullback.fst pullback.snd pullback.condition) walking_cospan.right).symm,
-- end

-- def mono_top_of_pullback {E F A B : C} {m : A ‚ü∂ E} {f : F ‚ü∂ E} {l : B ‚ü∂ F} {t : B ‚ü∂ A} (comm : t ‚â´ m = l ‚â´ f)
--   (lim : is_limit (pullback_cone.mk _ _ comm)) [mono f] : mono t :=
-- begin
--   refine ‚ü®Œª Z g h eq, _‚ü©,
--   apply lim.hom_ext,
--   apply (pullback_cone.mk t l comm).equalizer_ext,
--   exact eq,
--   rw ‚Üê cancel_mono f,
--   erw [assoc, assoc, ‚Üê comm, reassoc_of eq],
-- end

-- def dense_top_of_pullback {E F A B : C} {m : A ‚ü∂ E} {f : F ‚ü∂ E} {l : B ‚ü∂ F} {t : B ‚ü∂ A} (comm : t ‚â´ m = l ‚â´ f)
--   (lim : is_limit (pullback_cone.mk _ _ comm)) [dense j f] : dense j t :=
-- begin
--   haveI := mono_top_of_pullback comm lim,
--   apply dense_of_classifier_eq,
--   suffices: classifier_of t = m ‚â´ classifier_of f,
--     rw [this, assoc, classifier_eq_of_dense j f, ‚Üê assoc],
--     congr,
--   rw classify_pullback,
--   apply class_lift_of_both_factor _ _ _ _,
--   apply pullback.lift l t comm.symm,
--   apply lim.lift (pullback_cone.mk _ _ pullback.condition.symm),
--   rw pullback.lift_snd,
--   exact (lim.fac (pullback_cone.mk _ _ pullback.condition.symm) walking_cospan.left).symm,
-- end

-- This proof is a bit trash.
def characterised {m m' : sub' E} (hm : m ‚â§ m') [d : dense j ‚ü¶mediating_subobject hm‚üß] [c : closed j ‚ü¶m'‚üß] :
  closure j ‚ü¶m‚üß = ‚ü¶m'‚üß :=
begin
  rw [closure, classification_inv_fun],
  apply quotient.sound,
  resetI,
  refine ‚ü®_, ‚ü®_, _‚ü©‚ü©,
  cases hm,
  refine ‚ü®_, _‚ü©,
  refine lifting_square j (get_subobject _) (mediating_subobject (less_than_closure j ‚ü¶m‚üß)) m' hm_w _,
  rw ‚Üê hm_h, symmetry, apply mediating_subobject_prop,
  rw lifting_square_prop, refl,
  apply @lifting_square _ _ _ _ _ j _ _ _ m'.1.hom (mediating_subobject hm) _ (raise_le (less_than_closure j ‚ü¶m‚üß)) (id _) _ _,
  apply closed_of_classifier_eq, dsimp, rw classify_inv, rw assoc, rw topology.ax2,
  rw raise_le_prop, rw mediating_subobject_prop,
  rw lifting_square_prop,
end

-- def closure_intersection {m m' : sub E} : closure j (m ‚äì m') = closure j m ‚äì closure j m' :=
-- begin
--   obtain ‚ü®n, rfl‚ü© := quotient.exists_rep m,
--   obtain ‚ü®n', rfl‚ü© := quotient.exists_rep m',
--   refine @characterised _ _ _ _ _ j _ E _ _ _ _ (id _),
-- end

-- end closure

variable (C)
-- structure separated :=
-- (A : C)
-- (subsingleton_extend : Œ† B B' (m : B' ‚ü∂ B) f' [closure.dense j m],
--   subsingleton {f : B ‚ü∂ A // m ‚â´ f = f'})

-- def exists_lifting (A : C) : Prop := ‚àÄ {B B' : C} (m : B' ‚ü∂ B) (f' : B' ‚ü∂ A) [closure.dense j m],
-- nonempty {f : B ‚ü∂ A // m ‚â´ f = f'}

-- def make_lifting (A : C) (h : exists_lifting )

structure sheaf' :=
(A : C)
(unique_extend : Œ† {B} (m : sub' B) f' [closure.dense j ‚ü¶m‚üß], unique {f : B ‚ü∂ A // m.1.hom ‚â´ f = f'})

def forget_sheaf : sheaf'.{v} C j ‚Üí C := sheaf'.A

def sheaf := induced_category C (forget_sheaf C j)

instance sheaf_category.category : category (sheaf C j) := induced_category.category _
def forget : sheaf C j ‚•§ C := induced_functor _

variables {C j}

@[simps]
def sheaf.mk (A : C) (h : Œ† {B} (m : sub' B) f' [closure.dense j ‚ü¶m‚üß], unique {f : B ‚ü∂ A // m.1.hom ‚â´ f = f'}) : sheaf C j :=
{ A := A,
  unique_extend := Œª B m f' d, by exactI h m f' }

@[reducible]
def sheaf.mk' (A : C) (h : Œ† {B} (m : sub' B) f' [closure.dense j ‚ü¶m‚üß], {f : B ‚ü∂ A // m.1.hom ‚â´ f = f' ‚àß ‚àÄ a, m.1.hom ‚â´ a = f' ‚Üí a = f}) : sheaf C j :=
sheaf.mk A $ Œª B m f' d,
begin
  haveI := d,
  refine ‚ü®‚ü®‚ü®(h m f').1, (h m f').2.1‚ü©‚ü©, _‚ü©,
  rintro ‚ü®a, ha‚ü©,
  congr,
  apply (h m f').2.2 _ ha,
end

def sheaf.A (A : sheaf C j) : C := (forget C j).obj A

def sheaf.hom_mk (A B : sheaf C j) (f : A.A ‚ü∂ B.A) : A ‚ü∂ B := f

def extend_map (A : sheaf C j) {B : C} (m : sub' B) [closure.dense j ‚ü¶m‚üß] (f' : m.1.left ‚ü∂ A.A) : B ‚ü∂ A.A :=
(A.unique_extend m f').1.1.1

lemma extend_map_prop (A : sheaf C j) {B : C} (m : sub' B) [closure.dense j ‚ü¶m‚üß] (f' : m.1.left ‚ü∂ A.A) : m.1.hom ‚â´ extend_map A m f' = f' :=
(A.unique_extend m f').1.1.2

lemma unique_extension (A : sheaf C j) {B : C} (m : sub' B) (f' : m.1.left ‚ü∂ A.A) [closure.dense j ‚ü¶m‚üß]
  (f : B ‚ü∂ A.A) (h : m.1.hom ‚â´ f = f') :
f = extend_map A m f' :=
congr_arg subtype.val ((A.unique_extend m f').2 ‚ü®f, h‚ü©)

def unique_ext (A : sheaf C j) {B : C} (m : sub' B) (f' : m.1.left ‚ü∂ A.A) [closure.dense j ‚ü¶m‚üß]
  (f‚ÇÅ f‚ÇÇ : B ‚ü∂ A.A) (h‚ÇÅ : m.1.hom ‚â´ f‚ÇÅ = f') (h‚ÇÇ : m.1.hom ‚â´ f‚ÇÇ = f') :
  f‚ÇÅ = f‚ÇÇ :=
(unique_extension A m f' f‚ÇÅ h‚ÇÅ).trans (unique_extension A m f' f‚ÇÇ h‚ÇÇ).symm

instance sheaf_forget_reflects_limits : reflects_limits (forget C j) :=
forget_reflects_limits (forget_sheaf C j)

attribute [irreducible] sheaf

section biject
variables (j) (m : sub' A) [closure.dense j ‚ü¶m‚üß]

def bijection : {n : sub A // closure j n = n} ‚âÉ {n' : sub m.1.left // closure j n' = n'} :=
{ to_fun := Œª n,
  { val := sub_map m.1.hom n.val,
    property :=
    begin
      apply classification.left_inv.injective,
      rw [closure.classify, ‚Üê classification_natural, assoc, ‚Üê closure.classify, n.2],
    end },
  inv_fun := Œª n',
  { val :=
    begin
      haveI := m.2,
      apply closure j (postcompose m.1.hom n'.1),
    end,
    property := idem _ _ },
  left_inv :=
  begin
    rintro ‚ü®N, hN‚ü©,
    dsimp,
    revert hN,
    apply quotient.induction_on N,
    intros n hn,
    congr' 1,
    apply characterised j _,
    refine ‚ü®pullback.fst, pullback.condition.symm‚ü©,
    refine ‚ü®_‚ü©,
    rw ‚Üê top_le_iff,
    refine ‚ü®pullback.lift (default _) (ùüô _) _, _‚ü©,
    dsimp, rw [id_comp],
    dsimp [mediating_subobject],
    erw classify_postcompose,


    apply quotient.sound,

    sorry,
    refine ‚ü®hn‚ü©,
  end,
  right_inv :=
  begin
    rintro ‚ü®n', hn'‚ü©,
    dsimp, congr' 1,
    rw comm_pullback,
    haveI := m.2,
    rw ‚Üê postcompose_sub_comm (ùüô _) (ùüô _) m.val.hom m.val.hom rfl (pullback_square_iso _ _ _ _ _) n',
    rw [postcompose_map_id, sub_map_id, hn'],
  end
  -- { obj := sub_map m.1.hom n.obj,
  --   is_closed :=
  --   begin
  --     apply closed_of_classifier_eq,
  --     rw ‚Üê classification_natural,
  --     rw assoc,
  --     haveI := n.is_closed,
  --     rw classifier_eq_of_closed j n.obj,
  --   end },
  -- inv_fun := Œª n',
  -- { obj :=
  --   begin
  --     haveI := m.2,
  --     exact closure j (postcompose m.1.hom n'.obj),
  --   end },
  -- left_inv :=
  -- begin
  --   rintro ‚ü®n, hn‚ü©,
  --   dsimp,
  --   congr' 1,
  --   sorry,


  -- end

}
-- def pushforward_closed_subobject {B' : C} (n : B' ‚ü∂ B) [mono n] :
--   C :=
-- closure.obj j (n ‚â´ m)

-- def pushforward_closed_arrow {B' : C} (n : B' ‚ü∂ B) [mono n]:
--   pushforward_closed_subobject j m n ‚ü∂ A :=
-- closure.arrow j (n ‚â´ m)

-- instance {B' : C} (n : B' ‚ü∂ B) [mono n] :
--   mono (pushforward_closed_arrow j m n) :=
-- closure.is_sub j _

-- instance {B' : C} (n : B' ‚ü∂ B) [mono n] :
--   closure.closed j (pushforward_closed_arrow j m n) :=
-- closure.is_closed j _

-- lemma classify_pushforward_obj {B' : C} (n : B' ‚ü∂ B) [mono n] :
--   classifier_of (pushforward_closed_arrow j m n) = classifier_of (n ‚â´ m) ‚â´ j :=
-- closure.hat j _

-- def pullback_closed_subobject {A' : C} (n : A' ‚ü∂ A) [mono n] :
--   C :=
-- pullback n m

-- def pullback_closed_arrow {A' : C} (n : A' ‚ü∂ A) [mono n] :
--   pullback_closed_subobject m n ‚ü∂ B :=
-- pullback.snd

-- instance {A' : C} (n : A' ‚ü∂ A) [mono n] :
--   mono (pullback_closed_arrow m n) :=
-- pullback.snd_of_mono

-- instance {A' : C} (n : A' ‚ü∂ A) [closure.closed j n] :
--   closure.closed j (pullback_closed_arrow m n) :=
-- begin
--   apply closure.closed_of_classifier_eq,
--   erw [‚Üê classify_pullback, assoc, closure.classifier_eq_of_closed],
-- end

-- lemma classify_pullback_obj {A' : C} (n : A' ‚ü∂ A) [mono n] :
--   classifier_of (pullback_closed_arrow m n) = m ‚â´ classifier_of n :=
-- (classify_pullback _ _).symm

-- def classify_pullback_pushout {A' : C} (n : A' ‚ü∂ A) [closure.closed j n] :
--   pushforward_closed_subobject j m (pullback_closed_arrow m n) ‚âÖ A' :=
-- begin
--   apply closure.characterised j _ pullback.fst n pullback.condition,
--   apply closure.dense_top_of_pullback j pullback.condition (cone_is_pullback _ m),
-- end

-- lemma classify_pullback_pushout_comm {A' : C} (n : A' ‚ü∂ A) [closure.closed j n] :
--   (classify_pullback_pushout j m n).hom ‚â´ n = pushforward_closed_arrow j m (pullback_closed_arrow m n) :=
-- begin
--   rw classify_pullback_pushout,
--   rw closure.characterised,
--   dsimp,
--   rw closure.lifting_square_prop,
--   refl,
-- end

-- lemma classify_pullback_pushforward {A' : C} (n : A' ‚ü∂ A) [closure.closed j n] :
--   classifier_of (pushforward_closed_arrow j m (pullback_closed_arrow m n)) = classifier_of n :=
-- class_lift_of_iso _ (classify_pullback_pushout_comm j m n).symm

-- lemma classify_pushforward_pullback {B' : C} (n : B' ‚ü∂ B) [closure.closed j n] :
--   classifier_of (pullback_closed_arrow m (pushforward_closed_arrow j m n)) = classifier_of n :=
-- begin
--   rw [classify_pullback_obj, classify_pushforward_obj, ‚Üê assoc, ‚Üê closure.classify_subobj],
--   apply closure.classifier_eq_of_closed
-- end

-- @[simps]
-- def bijection (m : B ‚ü∂ A) [closure.dense j m] : {cm : B ‚ü∂ Œ© C // cm ‚â´ j = cm} ‚âÉ {cm' : A ‚ü∂ Œ© C // cm' ‚â´ j = cm'} :=
-- { to_fun :=
--   begin
--     intro a,
--     let Bsubobj : pullback (truth C) a.1 ‚ü∂ B := pullback.snd,
--     refine ‚ü®classifier_of (pushforward_closed_arrow j m Bsubobj), closure.classifier_eq_of_closed j _‚ü©,
--   end,
--   inv_fun :=
--   begin
--     intro a,
--     let Asubobj : pullback (truth C) a.1 ‚ü∂ A := pullback.snd,
--     have : a.1 = classifier_of Asubobj,
--       apply has_subobject_classifier.uniquely _ _ ‚ü®_, _, cone_is_pullback _ _‚ü©,
--     have : classifier_of Asubobj ‚â´ j = classifier_of Asubobj,
--       rw ‚Üê this,
--       exact a.2,
--     haveI : closure.closed j Asubobj := closure.closed_of_classifier_eq j _ this,
--     refine ‚ü®classifier_of (pullback_closed_arrow m Asubobj), closure.classifier_eq_of_closed j _‚ü©,
--   end,
--   left_inv :=
--   begin
--     rintro ‚ü®a, ha‚ü©,
--     dsimp,
--     congr,
--     rwa [classify_pullback_obj, classify_inv, classify_pushforward_obj, ‚Üê assoc, ‚Üê closure.classify_subobj, classify_inv a],
--   end,
--   right_inv :=
--   begin
--     rintro ‚ü®a, ha‚ü©,
--     dsimp,
--     congr,
--     let Asubobj : pullback (truth C) a ‚ü∂ A := pullback.snd,
--     have z : classifier_of Asubobj = a := classify_inv a,
--     have : classifier_of Asubobj ‚â´ j = classifier_of Asubobj,
--       rw [z, ha],
--     haveI := closure.closed_of_classifier_eq j _ this,
--     conv_rhs {rw ‚Üê z},
--     rw classify_pushforward_obj,
--     rw classify_pullback_obj,
--     have z‚ÇÅ : m ‚â´ classifier_of Asubobj = classifier_of (pullback.snd : pullback Asubobj m ‚ü∂ B) := classify_pullback Asubobj m,
--     have z‚ÇÇ : classifier_of (pullback.snd : pullback (truth C) (m ‚â´ classifier_of Asubobj) ‚ü∂ B) = m ‚â´ classifier_of Asubobj := classify_inv (m ‚â´ classifier_of Asubobj),
--     have : classifier_of (pullback.snd : pullback (truth C) (m ‚â´ classifier_of Asubobj) ‚ü∂ B) = classifier_of (pullback.snd : pullback Asubobj m ‚ü∂ B), cc,
--     have := pushforward_well_defined m _ _ this,
--     rw this,
--     change classifier_of (pullback_closed_arrow m Asubobj ‚â´ m) ‚â´ j = _,
--     rw ‚Üê classify_pushforward_obj,
--     rw classify_pullback_pushforward j m Asubobj,
--   end
-- }

end biject

namespace construct_limits


variables {C} {J : Type v} [ùí•‚ÇÅ : small_category J] {K : J ‚•§ sheaf C j} {c : cone (K ‚ãô forget C j)} (t : is_limit c)
variables {B : C} (m : sub' B) (f' : m.1.left ‚ü∂ c.X)

@[simps]
def alt_cone [closure.dense j ‚ü¶m‚üß] : cone (K ‚ãô forget C j) :=
{ X := B,
  œÄ :=
  { app := Œª i, extend_map (K.obj i) m (f' ‚â´ c.œÄ.app i),
    naturality' := Œª i‚ÇÅ i‚ÇÇ g,
    begin
      dsimp,
      rw [id_comp],
      symmetry,
      apply unique_extension (K.obj i‚ÇÇ) m (f' ‚â´ c.œÄ.app i‚ÇÇ),
      erw [‚Üê assoc, extend_map_prop, assoc, c.w g],
    end } }

instance sheaf_forget_creates_limits : creates_limits (forget C j) :=
{ creates_limits_of_shape := Œª J ùí•‚ÇÅ, by exactI
  { creates_limit := Œª K,
    { lifts := Œª c t,
      { lifted_cone :=
        { X := sheaf.mk' c.X $
          Œª B m f' d,
            begin
              refine ‚ü®t.lift (alt_cone m f'), _, _‚ü©,
              { apply t.hom_ext,
                intro i,
                rw [assoc, t.fac (alt_cone m f')],
                exact extend_map_prop (K.obj i) m (f' ‚â´ c.œÄ.app i) },
              { intros f‚ÇÇ hf‚ÇÇ,
                apply t.uniq (alt_cone m f'),
                intro i,
                apply unique_extension (K.obj i) m,
                rw [‚Üê hf‚ÇÇ, assoc] }
            end,
          œÄ :=
          { app := c.œÄ.app,
            naturality' := Œª X Y f, c.œÄ.naturality f } },
        valid_lift := cones.ext (iso.refl _) (Œª i, (id_comp _).symm) } } } }

end construct_limits

instance sheaf_has_finite_limits : has_finite_limits.{v} (sheaf C j) :=
{ has_limits_of_shape := Œª J ùí•‚ÇÅ ùí•‚ÇÇ, by exactI
  { has_limit := Œª F, has_limit_of_created F (forget C j) } }

set_option pp.beta false
set_option pp.implicit false

variables {C} (j)

-- def dense_prod_map_id (A : C) {B B' : C} (m : B' ‚ü∂ B) [closure.dense.{v} j m] :
--   closure.dense.{v} j (limits.prod.map (ùüô A) m) :=
-- closure.dense_of_pullback j _ (pullback_prod' m A)

-- def sheaf_exponential (A : C) (s : sheaf C j) : sheaf C j :=
-- sheaf.mk (exp A ((forget C j).obj s)) $ Œª B B' m f' d,
-- begin
--   haveI := d,
--   haveI := dense_prod_map_id j A m,
--   refine ‚ü®‚ü®‚ü®cart_closed.curry _, _‚ü©‚ü©, _‚ü©,
--   { exact extend_map s (limits.prod.map (ùüô A) m) (cart_closed.uncurry f') },
--   { rw [‚Üê curry_natural_left, extend_map_prop s],
--     apply curry_uncurry },
--   { rintro ‚ü®a, ha‚ü©,
--     congr,
--     rw eq_curry_iff,
--     apply unique_extension s,
--     rw [‚Üê uncurry_natural_left, ha] }
-- end

-- instance : is_cartesian_closed (sheaf C j) :=
-- { cart_closed := Œª A,
--   { is_adj :=
--     { right :=
--       { obj := Œª s, sheaf_exponential j A.A s,
--         map := Œª s‚ÇÅ s‚ÇÇ f, post (A.A) f,
--         map_id' := Œª s, (exp.functor A.A).map_id _,
--         map_comp' := Œª _ _ _ _ _, (exp.functor A.A).map_comp _ _ },
--       adj := adjunction.mk_of_hom_equiv
--       { hom_equiv := sorry,
--         hom_equiv_naturality_left_symm' := sorry,
--         hom_equiv_naturality_right' := sorry }
--     } } }

def subobject_of_closed_sheaf (A : sheaf C j) (m : sub' A.A) [c : closed j ‚ü¶m‚üß] : sheaf C j :=
sheaf.mk' m.1.left $
Œª B n f' d, by exactI
begin
  haveI := m.2,
  have comm := extend_map_prop A n (f' ‚â´ m.1.hom),
  refine ‚ü®closure.lifting_square j comm.symm, _, _‚ü©,
  { rwa [‚Üê cancel_mono m.1.hom, assoc, lifting_square_prop j comm.symm] },
  { rintro a ha,
    rw [‚Üê cancel_mono m.1.hom, lifting_square_prop j comm.symm],
    apply unique_extension A n (f' ‚â´ m.1.hom),
    simp [‚Üê ha] }
end

def closed_of_subsheaf (E A : sheaf C j) (m : A ‚ü∂ E) [hm : @mono C ùíû _ _ m] : closed j ‚ü¶‚ü®over.mk m, hm‚ü©‚üß :=
begin
  -- have hr := extend_map_prop A,
  sorry,
  -- have hr := extend_map_prop A (closure.less_than_closure j m) (ùüô _),
  -- refine ‚ü®‚ü®extend_map A (closure.less_than_closure j m) (ùüô _), hr, _‚ü©‚ü©,
  -- rw [auto_param_eq, ‚Üê cancel_mono_id (closure.arrow j m), assoc, closure.is_lt],
  -- apply unique_ext E (closure.less_than_closure j m) m,
  -- rw [‚Üê assoc, hr, id_comp],
  -- rw closure.is_lt,
end

def closed_classifier : C := equalizer j (ùüô _)

def eq_equiv (B : C) : (B ‚ü∂ closed_classifier j) ‚âÉ {cm : B ‚ü∂ Œ© C // cm ‚â´ j = cm} :=
{ to_fun := Œª f,
  begin
    refine ‚ü®f ‚â´ equalizer.Œπ _ _, _‚ü©,
    rw [assoc, equalizer.condition, comp_id],
  end,
  inv_fun := Œª f,
  begin
    apply equalizer.lift f.1 _,
    rw [f.2, comp_id]
  end,
  left_inv := Œª f,
  begin
    apply equalizer.hom_ext, rw equalizer.lift_Œπ,
  end,
  right_inv := Œª ‚ü®f, hf‚ü©,
  begin
    rw subtype.ext,
    apply equalizer.lift_Œπ,
  end
}

def closed_biject {A B : C} (m : A ‚ü∂ B) [closure.dense j m] : (B ‚ü∂ closed_classifier j) ‚âÉ (A ‚ü∂ closed_classifier j) :=
equiv.trans (eq_equiv j B) (equiv.trans (eq_equiv j A) (bijection j m)).symm

lemma closed_biject_prop {A B : C} (m : A ‚ü∂ B) [closure.dense j m] (f' : B ‚ü∂ closed_classifier j) : (closed_biject j m).to_fun f' = m ‚â´ f' :=
begin
  dsimp [closed_biject, equiv.trans, equiv.symm, eq_equiv, bijection],
  apply equalizer.hom_ext,
  rw equalizer.lift_Œπ,
  rw classify_pullback_obj,
  rw ‚Üê classify_pullback,
  have : ùüô _ = classifier_of (truth C),
    apply has_subobject_classifier.uniquely _ _ ‚ü®ùüô _, _, pullback_square_iso' (ùüô _) (truth C) (truth C) (ùüô _) _‚ü©,
    rw [id_comp, comp_id],
  rw [‚Üê this, comp_id, assoc],
end
lemma closed_biject_prop' {A B : C} (m : A ‚ü∂ B) [closure.dense j m] (f' : A ‚ü∂ closed_classifier j) : m ‚â´ (closed_biject j m).inv_fun f' = f' :=
begin
  symmetry,
  rw ‚Üê closed_biject_prop,
  rw (closed_biject j m).right_inv,
end

def sheaf_classifier : sheaf C j :=
sheaf.mk (closed_classifier j) $ Œª B B' m f' d,
begin
  haveI := d,
  refine ‚ü®‚ü®‚ü®_, closed_biject_prop' j m f'‚ü©‚ü©, _‚ü©,
  rintro ‚ü®a, ha‚ü©,
  rw ‚Üê closed_biject_prop at ha,
  congr,
  rw [‚Üê ha, (closed_biject j m).left_inv],
end

-- -- Define what it means for œá to classify the mono f.
-- structure classifying {Œ© Œ©‚ÇÄ U X : C} (true : Œ©‚ÇÄ ‚ü∂ Œ©) (f : U ‚ü∂ X) (œá : X ‚ü∂ Œ©) :=
-- (k : U ‚ü∂ Œ©‚ÇÄ)
-- (commutes : k ‚â´ true = f ‚â´ œá)
-- (forms_pullback' : is_limit (pullback_cone.mk _ _ commutes))
-- restate_axiom classifying.forms_pullback'

-- variable (C)
-- -- A subobject classifier is a mono which classifies every mono uniquely
-- class has_subobject_classifier :=
-- (Œ© Œ©‚ÇÄ : C)
-- (truth : Œ©‚ÇÄ ‚ü∂ Œ©)
-- (truth_mono' : @mono C ùíû _ _ truth)
-- (classifier_of : ‚àÄ {U X} (f : U ‚ü∂ X) [@mono C ùíû _ _ f], X ‚ü∂ Œ©)
-- (classifies' : ‚àÄ {U X} (f : U ‚ü∂ X) [mono f], classifying truth f (classifier_of f))
-- (uniquely' : ‚àÄ {U X} (f : U ‚ü∂ X) [@mono C ùíû _ _ f] (œá‚ÇÅ : X ‚ü∂ Œ©),
--             classifying truth f œá‚ÇÅ ‚Üí œá‚ÇÅ = classifier_of f)

instance : has_subobject_classifier.{v} (sheaf C j) :=
{ Œ© := sheaf_classifier j,


}