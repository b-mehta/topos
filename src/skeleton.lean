/- Author: E.W.Ayers
   Skeleton category.
   This should probably live in full_subcategory.lean
   -/
import .pullbacks
import category_theory.full_subcategory

namespace category_theory

universes u v
variables {C : Type u} [ùíû : category.{v} C] {X Y Z : C} {i : X ‚âÖ Y}
include ùíû

def are_iso (X Y : C) : Prop := nonempty (X ‚âÖ Y)

lemma are_iso.refl : are_iso X X := ‚ü®iso.refl X‚ü©

lemma are_iso.symm : are_iso X Y ‚Üí are_iso Y X
| ‚ü®i‚ü© := ‚ü®i.symm‚ü©

lemma are_iso.trans : are_iso X Y ‚Üí are_iso Y Z ‚Üí are_iso X Z
| ‚ü®a‚ü© ‚ü®b‚ü© := ‚ü®iso.trans a b‚ü©

variable (C)

def skeleton.setoid : setoid C :=
{ r := are_iso,
  iseqv :=‚ü®Œª _, are_iso.refl, Œª _ _, are_iso.symm, Œª _ _ _, are_iso.trans‚ü©
}

local attribute [instance] skeleton.setoid

/-- Quotient the given category on isomorphisms.
    Instead of defining this to be the category, we use this to construct a
    canonical set of representatives using choice and then define the skeleton
    as the full subcategory on these representatives. -/
def skeleton.q := quotient (skeleton.setoid C)

variable {C}

def skeleton.q.mk (X : C) : skeleton.q C := ‚ü¶X‚üß

noncomputable def skeleton.repr : C ‚Üí C := quotient.out ‚àò skeleton.q.mk

noncomputable def skeleton.repr_iso (X : C) : X ‚âÖ skeleton.repr X := iso.symm $ classical.choice $ @quotient.mk_out C (skeleton.setoid C) $ X

-- [TODO] should we use the definition of essentially surjective given in mathlib?
/-- A skeleton is an essentially surjective subset of objects in C such that none of them are iso to each other.  -/
structure is_skeleton (D : set C) : Prop :=
(eq_of_iso : ‚àÄ {X Y} (hx : X ‚àà D) (hy : Y ‚àà D), (X ‚âÖ Y) ‚Üí X = Y )
(ess_surj : ‚àÄ (X : C), ‚àÉ {Y:C}, Y ‚àà D ‚àß nonempty (X ‚âÖ Y))

instance {D : set C} : category { X : C // X ‚àà D } := by apply_instance

variable (C)

def skeleton.canonical : set C := set.image (skeleton.repr) (set.univ)

def skeleton : Type u := {X : C // X ‚àà skeleton.canonical C}

variable {C}

lemma skeleton.canonical.is_skel : @is_skeleton C ùíû (skeleton.canonical C) :=
begin
  refine ‚ü®_,_‚ü©,
  { rintros X Y ‚ü®XX,‚ü®‚ü©,rfl‚ü© ‚ü®YY,‚ü®‚ü©,rfl‚ü© i,
    suffices : skeleton.q.mk XX = skeleton.q.mk YY, rw [skeleton.repr], simp, rw this,
    apply quotient.sound',
    have h1, refine (skeleton.repr_iso XX),
    have h2, refine (skeleton.repr_iso YY),
    refine ‚ü®calc XX ‚âÖ _ : h1 ... ‚âÖ _ : i ... ‚âÖ YY : h2.symm‚ü© },
  { rintros X,
    refine ‚ü®skeleton.repr X,‚ü®X,‚ü®‚ü©,rfl‚ü©,‚ü®skeleton.repr_iso X‚ü©‚ü©}
end

lemma skeleton.canonical_has_repr (X : C) : skeleton.repr X ‚àà skeleton.canonical C :=
‚ü®X,‚ü®‚ü©,rfl‚ü©

instance skeleton.is_category : category.{v} (skeleton C) := show category.{v} {X : C // _}, by apply_instance

lemma skeleton.ess_surj : ‚àÄ (X : C), ‚àÉ (Y : skeleton C), are_iso X Y.1 :=
begin rintros X, refine ‚ü®‚ü®skeleton.repr X, skeleton.canonical_has_repr X‚ü©,‚ü®skeleton.repr_iso X‚ü©‚ü©  end

lemma skeleton.eq_of_iso : ‚àÄ (X Y : skeleton C), (X ‚âÖ Y) ‚Üí X = Y :=
begin
  rintros ‚ü®_,‚ü®X,‚ü®‚ü©,rfl‚ü©‚ü© ‚ü®_,‚ü®Y,‚ü®‚ü©,rfl‚ü©‚ü© i,
  apply subtype.ext.2,
  apply (skeleton.canonical.is_skel).eq_of_iso,
  apply skeleton.canonical_has_repr,
  apply skeleton.canonical_has_repr,
  cases i,
  refine ‚ü®i_hom,i_inv,_,_‚ü©, assumption, assumption
end

end category_theory