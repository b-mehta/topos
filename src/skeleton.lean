/- Author: E.W.Ayers
   Skeleton category. -/
import .pullbacks


namespace category_theory
universes u v

variables {C : Type u} [ùíû : category.{v} C] {X Y Z : C} {i : X ‚âÖ Y}
include ùíû
def are_iso (X Y : C) : Prop := nonempty (X ‚âÖ Y)
lemma are_iso.refl : are_iso X X := ‚ü®iso.refl X‚ü©
lemma are_iso.symm : are_iso X Y ‚Üí are_iso Y X
| ‚ü®i‚ü© := ‚ü®i.symm‚ü©
lemma are_iso.trans : are_iso X Y ‚Üí are_iso Y Z ‚Üí are_iso X Z
| ‚ü®a‚ü© ‚ü®b‚ü© := ‚ü®iso.trans a b‚ü©

variable (C)

def skeleton.setoid : setoid C :=
{ r := are_iso,
  iseqv :=‚ü®Œª _, are_iso.refl, Œª _ _, are_iso.symm, Œª _ _ _, are_iso.trans‚ü©
}

local attribute [instance] skeleton.setoid

def is_skeletal : Prop := ‚àÄ (X Y : C), ¬¨ are_iso X Y
def skeleton := quotient (skeleton.setoid C)


def skeleton.arrows.setoid : setoid (Œ£ (X Y : C), X ‚ü∂ Y) :=
{ r := Œª ‚ü®X‚ÇÅ,Y‚ÇÅ,f‚ÇÅ‚ü© ‚ü®X‚ÇÇ,Y‚ÇÇ,f‚ÇÇ‚ü©, ‚àÉ (x : X‚ÇÅ ‚âÖ X‚ÇÇ) (y : Y‚ÇÅ ‚âÖ Y‚ÇÇ), f‚ÇÅ ‚â´ y.hom = x.hom ‚â´ f‚ÇÇ,
  iseqv := begin
    refine ‚ü®_,_,_‚ü©,
    { rintro ‚ü®X,Y,f‚ü©, refine ‚ü®iso.refl X, iso.refl Y, _‚ü©,
      simp, },
    { rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®x,y,e‚ü©,
      refine ‚ü®x.symm,y.symm,_‚ü©,
      simp,
      rw [iso.eq_inv_comp, ‚Üê category.assoc, ‚Üêe,  iso.comp_inv_eq],},
    { rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®X3,Y3,f3‚ü© ‚ü®x12,y12,e12‚ü© ‚ü®x23,y23,e23‚ü©,
      refine ‚ü®iso.trans x12 x23,iso.trans y12 y23,_‚ü©,
      simp, rw [‚Üêcategory.assoc, e12, category.assoc, e23]}
  end
}
local attribute [instance] skeleton.arrows.setoid

def skeleton.arrows := quotient (skeleton.arrows.setoid C)

variable {C}

def skeleton.mk (X : C) : skeleton C := ‚ü¶X‚üß
def skeleton.arrows.mk {X Y : C} (f : X ‚ü∂ Y) : skeleton.arrows C := ‚ü¶‚ü®X,Y,f‚ü©‚üß

def skeleton.arrows.dom (f : skeleton.arrows C) : skeleton C :=
quotient.lift_on' f (Œª S, skeleton.mk S.1)
  (begin
    rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®x,y,e‚ü©,
    refine quotient.sound' ‚ü®x‚ü©,
  end)

def skeleton.arrows.cod (f : skeleton.arrows C) : skeleton C :=
quotient.lift_on' f (Œª S, skeleton.mk S.2.1)
  (begin
    rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®x,y,e‚ü©,
    refine quotient.sound' ‚ü®y‚ü©,
  end)

def skeleton.hom (XX YY : skeleton C) : Type (max u v) :=
{f : skeleton.arrows C // f.dom = XX ‚àß f.cod = YY }

set_option pp.proofs true

def skeleton.arrows.id (XX : skeleton C) : skeleton.arrows C :=
quotient.lift_on' XX (Œª X, skeleton.arrows.mk (ùüô X)) (
  begin
    rintros X1 X2 ‚ü®x‚ü©, refine quotient.sound' ‚ü®x,x,_‚ü©, simp
   end
)

def skeleton.id (XX : skeleton C) : skeleton.hom XX XX :=
begin
refine ‚ü®skeleton.arrows.id XX, _, _‚ü©,
repeat {induction XX, refine quotient.sound' ‚ü®_‚ü©, refl, refl,}
end

noncomputable def skeleton.arrows.comp (f g: skeleton.arrows C) : Œ† (e : f.cod = g.dom), skeleton.arrows C :=
begin
  induction f, rcases f with ‚ü®X,Y‚ÇÅ,f‚ü©,
  induction g, rcases g with ‚ü®Y‚ÇÇ,Z,g‚ü©,
  -- show ‚ü¶Y‚ÇÅ‚üß = ‚ü¶Y‚ÇÇ‚üß ‚Üí skeleton.arrows C,
  intro e,
  have y : Y‚ÇÅ ‚âÖ Y‚ÇÇ, apply classical.choice, apply quotient.exact' e,
  refine (skeleton.arrows.mk (f ‚â´ y.hom ‚â´ g)),

  intros,
end


end category_theory