/- Author: E.W.Ayers
   Skeleton category.
   This should probably live in full_subcategory.lean
   -/
import .pullbacks
import category_theory.full_subcategory

namespace category_theory
universes u v

variables {C : Type u} [ùíû : category.{v} C] {X Y Z : C} {i : X ‚âÖ Y}
include ùíû
def are_iso (X Y : C) : Prop := nonempty (X ‚âÖ Y)
lemma are_iso.refl : are_iso X X := ‚ü®iso.refl X‚ü©
lemma are_iso.symm : are_iso X Y ‚Üí are_iso Y X
| ‚ü®i‚ü© := ‚ü®i.symm‚ü©
lemma are_iso.trans : are_iso X Y ‚Üí are_iso Y Z ‚Üí are_iso X Z
| ‚ü®a‚ü© ‚ü®b‚ü© := ‚ü®iso.trans a b‚ü©

variable (C)

def skeleton.setoid : setoid C :=
{ r := are_iso,
  iseqv :=‚ü®Œª _, are_iso.refl, Œª _ _, are_iso.symm, Œª _ _ _, are_iso.trans‚ü©
}

local attribute [instance] skeleton.setoid

def skeleton_obj := quotient (skeleton.setoid C)
#check @quotient.rep
#check @set.image


-- def skeleton.arrows.setoid : setoid (Œ£ (X Y : C), X ‚ü∂ Y) :=
-- { r := Œª ‚ü®X‚ÇÅ,Y‚ÇÅ,f‚ÇÅ‚ü© ‚ü®X‚ÇÇ,Y‚ÇÇ,f‚ÇÇ‚ü©, ‚àÉ (x : X‚ÇÅ ‚âÖ X‚ÇÇ) (y : Y‚ÇÅ ‚âÖ Y‚ÇÇ), f‚ÇÅ ‚â´ y.hom = x.hom ‚â´ f‚ÇÇ,
--   iseqv := begin
--     refine ‚ü®_,_,_‚ü©,
--     { rintro ‚ü®X,Y,f‚ü©, refine ‚ü®iso.refl X, iso.refl Y, _‚ü©,
--       simp, },
--     { rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®x,y,e‚ü©,
--       refine ‚ü®x.symm,y.symm,_‚ü©,
--       simp,
--       rw [iso.eq_inv_comp, ‚Üê category.assoc, ‚Üêe,  iso.comp_inv_eq],},
--     { rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®X3,Y3,f3‚ü© ‚ü®x12,y12,e12‚ü© ‚ü®x23,y23,e23‚ü©,
--       refine ‚ü®iso.trans x12 x23,iso.trans y12 y23,_‚ü©,
--       simp, rw [‚Üêcategory.assoc, e12, category.assoc, e23]}
--   end
-- }
-- local attribute [instance] skeleton.arrows.setoid

-- def skeleton.arrows := quotient (skeleton.arrows.setoid C)

variable {C}
def skeleton_obj.mk (X : C) : skeleton_obj C := ‚ü¶X‚üß

structure is_skeleton (D : set C) : Prop :=
(skel_prop : ‚àÄ {X Y} (hx : X ‚àà D) (hy : Y ‚àà D), (X ‚âÖ Y) ‚Üí X = Y )
(ess_surj : ‚àÄ (X : C), ‚àÉ {Y:C}, Y ‚àà D ‚àß nonempty (X ‚âÖ Y))

instance {D : set C} : category { X : C // X ‚àà D } := by apply_instance

lemma skeleton_exists : ‚àÉ (D : set C), @is_skeleton C ùíû D :=
begin
  let D : set C := {X : C | ‚àÉ XX : quotient (skeleton.setoid C), quotient.out XX = X},
  refine ‚ü®D,_,_‚ü©,
  { rintros X Y ‚ü®XX,rfl‚ü© ‚ü®YY,rfl‚ü© i,
    congr,
    induction XX,
    induction YY,
    apply quotient.sound',
    have h1, refine (@quotient.mk_out C (skeleton.setoid C) XX), cases h1,
    have h2, refine (@quotient.mk_out C (skeleton.setoid C) YY), cases h2,
    refine ‚ü®calc XX ‚âÖ _ : h1.symm ... ‚âÖ _ : i ... ‚âÖ YY : h2‚ü©,
    refl, refl,},
  { rintros X,
    refine ‚ü®quotient.out ‚ü¶X‚üß,‚ü®‚ü¶X‚üß,rfl‚ü©,are_iso.symm (@quotient.mk_out C (skeleton.setoid C) X)‚ü©,
  }
end

def skeleton.under.setoid (X : C) : setoid (under X) :=
{ r := Œª f g, ‚àÉ (y : f.right ‚âÖ g.right), f.hom ‚â´ y.hom = g.hom
, iseqv := sorry
}

def skeleton.under (X : C) := quotient (skeleton.under.setoid X)
def skeleton.under.mk  (f : X ‚ü∂ Y)  : skeleton.under X := @quotient.mk _ (skeleton.under.setoid X) (under.mk f)


def skeleton.arrows.mk {X Y : C} (f : X ‚ü∂ Y) : skeleton.arrows C := ‚ü¶‚ü®X,Y,f‚ü©‚üß

def skeleton.arrows.dom (f : skeleton.arrows C) : skeleton C :=
quotient.lift_on' f (Œª S, skeleton.mk S.1)
  (begin
    rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®x,y,e‚ü©,
    refine quotient.sound' ‚ü®x‚ü©,
  end)

def skeleton.arrows.cod (f : skeleton.arrows C) : skeleton C :=
quotient.lift_on' f (Œª S, skeleton.mk S.2.1)
  (begin
    rintros ‚ü®X1,Y1,f1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®x,y,e‚ü©,
    refine quotient.sound' ‚ü®y‚ü©,
  end)


def skeleton.concrete_lemma : ‚àÄ (f : skeleton.arrows C) (x : f.dom = ‚ü¶X‚üß) (y : f.cod = ‚ü¶Y‚üß), ‚àÉ (f' : X ‚ü∂ Y), f = skeleton.arrows.mk f' :=
begin
  intros f,
  induction f,
  rcases f with ‚ü®A,B,f‚ü©,
  intros x y,
  have xx : A ‚âÖ X, refine (classical.choice (quotient.exact x)),
  have yy : B ‚âÖ Y, refine (classical.choice (quotient.exact y)),
  refine ‚ü®(xx.inv ‚â´ f ‚â´ yy.hom),_ ‚ü©,
  refine quotient.sound ‚ü®xx,yy,_‚ü©, simp,
  intros, refl
end
def skeleton.pinch  (f : skeleton.arrows C) (d : f.dom = ‚ü¶X‚üß): skeleton.under X := sorry -- [todo] this is the crux.

def skeleton.hom (XX YY : skeleton C) : Type (max u v) :=
{f : skeleton.arrows C // f.dom = XX ‚àß f.cod = YY }

-- [note] this doesn't work because it double-counts homs.
-- structure skeleton.hom (XX YY : skeleton C) : Type (max u v) :=
-- (dom : C)
-- (cod : C)
-- (hom : dom ‚ü∂ cod)
-- (dom_mem : ‚ü¶dom‚üß = XX)
-- (cod_mem : ‚ü¶cod‚üß = YY)



def hom_iso {X1 Y1 X2 Y2 : C} (f1 : X1 ‚ü∂ Y1) (f2 : X2 ‚ü∂ Y2) := ‚àÉ (x : X1 ‚âÖ X2) (y : Y1 ‚âÖ Y2), x.hom ‚â´ f2 = f1 ‚â´ y.hom

-- def skeleton.hom2 (XX YY : skeleton C) : Type (max u v) :=
-- quotient.lift_on‚ÇÇ' XX YY (Œª X Y, X ‚ü∂ Y)
-- (begin end)


set_option pp.proofs true

def skeleton.arrows.id (XX : skeleton C) : skeleton.arrows C :=
quotient.lift_on' XX (Œª X, skeleton.arrows.mk (ùüô X)) (
  begin
    rintros X1 X2 ‚ü®x‚ü©, refine quotient.sound' ‚ü®x,x,_‚ü©, simp
   end
)

def skeleton.id (XX : skeleton C) : skeleton.hom XX XX :=
begin
refine ‚ü®skeleton.arrows.id XX, _, _‚ü©,
repeat {induction XX, refine quotient.sound' ‚ü®_‚ü©, refl, refl,}
end

def skeleton.arrows.comp_prop (ff gg hh : skeleton.arrows C) : Prop :=
‚àÉ {X Y Z : C} {f : X ‚ü∂ Y} {g : Y ‚ü∂ Z}, skeleton.arrows.mk f = ff ‚àß skeleton.arrows.mk g = gg ‚àß skeleton.arrows.mk (f ‚â´ g) = hh

def skeleton.comp1 {XX YY ZZ : skeleton C} (f : skeleton.hom XX YY) (g : skeleton.hom YY ZZ) : skeleton.arrows C :=
begin
  induction XX with X,
  induction YY with Y,
  induction ZZ with Z,
  rcases f with ‚ü®f,fd,fc‚ü©,
  rcases g with ‚ü®g,gd,gc‚ü©,
  have hf, apply skeleton.concrete_lemma f fd fc,
  have hg, apply skeleton.concrete_lemma g gd gc,


end


def skeleton.arrows.comp [‚àÄ (X Y : C), decidable (are_iso X Y)] (f g: skeleton.arrows C) : skeleton.arrows C :=
quotient.lift_on‚ÇÇ' f g (Œª f g,
  @dite _ _ _ (Œª e : are_iso f.2.1 g.1, skeleton.arrows.mk (f.2.2 ‚â´ (classical.choice e).hom ‚â´ g.2.2)) (Œª _, skeleton.arrows.mk (ùüô f.1))
)
  (begin rintros ‚ü®X1,Y1,f1‚ü© ‚ü®Y1',Z1,g1‚ü© ‚ü®X2,Y2,f2‚ü© ‚ü®Y2',Z2,g1‚ü© ‚ü®x,y,e‚ü© ‚ü®y',z,e'‚ü©,
    simp,
    split_ifs with y1 y2,
    {cases y1, cases y2,
    refine quotient.sound' ‚ü®x,z,_‚ü©,
    simp, rw e',
    }

    have d : decidable (are_iso Y1 Y1'), by apply classical.dec _,
    cases d,
    rw dite.decidable,
    show dite (are_iso Y1 Y1')
      (Œª (e),
         skeleton.arrows.mk (f1 ‚â´ (classical.choice e).hom ‚â´ g1))
      (Œª (_x),
         skeleton.arrows.mk (ùüô X1)) =
    dite (are_iso Y2 Y2')
      (Œª (e),
         skeleton.arrows.mk (f2 ‚â´ (classical.choice e).hom ‚â´ g1))
      (Œª (_x),
         skeleton.arrows.mk (ùüô X2)),
    end)


end category_theory