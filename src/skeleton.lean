/- Author: E.W.Ayers
   Skeleton category.
   This should probably live in full_subcategory.lean
   -/
import category_theory.full_subcategory
import category_theory.comma

def logic.equivalence := @equivalence

namespace category_theory

universes v u

def is_thin (C : Type u) [category.{v} C] := ‚àÄ {X Y : C}, subsingleton (X ‚ü∂ Y)

section arrows
def arrows (C : Type u) [category.{v} C] := comma (ùü≠ C) (ùü≠ C)
variables {C : Type u} [category.{v} C] {X Y Z : C} {i : X ‚âÖ Y}

def are_iso (X Y : C) : Prop := nonempty (X ‚âÖ Y)

lemma are_iso.refl : are_iso X X := ‚ü®iso.refl X‚ü©

lemma are_iso.symm : are_iso X Y ‚Üí are_iso Y X
| ‚ü®i‚ü© := ‚ü®i.symm‚ü©

lemma are_iso.trans : are_iso X Y ‚Üí are_iso Y Z ‚Üí are_iso X Z
| ‚ü®a‚ü© ‚ü®b‚ü© := ‚ü®iso.trans a b‚ü©

lemma are_iso.equiv : logic.equivalence (are_iso : C ‚Üí C ‚Üí Prop) :=
‚ü®Œª _, are_iso.refl, Œª _ _, are_iso.symm, Œª _ _ _, are_iso.trans‚ü©

instance : category (arrows C) := show category (comma _ _), by apply_instance

def crush.setoid : setoid (arrows C) :=
{ r := Œª f g, nonempty (f ‚âÖ g),
  iseqv := are_iso.equiv
}

variable (C)

def crush := @quotient (arrows C) crush.setoid

end arrows

variables {C : Type u} [category.{v} C] {X Y Z : C} {i : X ‚âÖ Y}

/-- A map `r` induces a skeleton category. -/
structure skeleton_map (r : C ‚Üí C) :=
(repr_iso : ‚àÄ (X : C), r X ‚âÖ X)
(eq_of_iso : ‚àÄ {X Y : C}, (X ‚âÖ Y) ‚Üí r X = r Y)

open skeleton_map

def skeleton {r : C ‚Üí C} (sr : skeleton_map.{v} r) : Type u := {X : C // ‚àÉ (Y : C), r(Y) = X}

namespace skeleton
variables {r : C ‚Üí C} (sr : skeleton_map.{v} r)
instance skel_cat : category.{v} (skeleton sr) := category_theory.full_subcategory _

def forget : skeleton sr ‚•§ C := full_subcategory_inclusion _
instance : full (forget sr) := full_subcategory.full _
instance : faithful (forget sr) := full_subcategory.faithful _

@[simps]
def to_skeleton : C ‚•§ skeleton sr :=
{ obj := Œª X, ‚ü®r X, X, rfl‚ü©,
  map := Œª X Y f, (forget sr).preimage ((sr.repr_iso X).hom ‚â´ f ‚â´ (sr.repr_iso Y).inv),
  map_comp' := Œª X Y Z f g, by simp [‚Üê preimage_comp] }

-- @[simp] lemma to_skeleton_map_def {X Y : C} {f : X ‚ü∂ Y} : @functor.map _ _ _ _ (@to_skeleton _ _ r _) X Y f = ((@repr_iso C ùíû r _ X).hom ‚â´ f ‚â´ (@repr_iso C ùíû r _ Y).inv : r X ‚ü∂ r Y) := rfl
-- @[simp] lemma to_skeleton_obj_def {X : C}  : @functor.obj _ _ _ _ (@to_skeleton _ _ r _) X = ‚ü®r X, X, rfl‚ü© := rfl
-- @[simp] lemma forget_map_def {X Y : skeleton r} {f : X ‚ü∂ Y} : @functor.map _ _ _ _ (@forget _ _ r _) X Y f = f := rfl
@[simp] lemma forget_obj_def {X : skeleton sr} : (forget sr).obj X = X.val := rfl

def isequiv : C ‚âå skeleton sr :=
{ functor := to_skeleton sr,
  inverse := forget sr,
  unit_iso := nat_iso.of_components (Œª X, (sr.repr_iso X).symm) (by tidy),
  counit_iso :=
  begin
    refine nat_iso.of_components _ _,
    intro X,
    { refine @preimage_iso _ _ _ _ (forget sr) _ _ _ _ _,
      refine sr.repr_iso X.val },
    { intros,
      apply (forget sr).map_injective,
      dsimp, simp },
  end,
  functor_unit_iso_comp' := Œª X,
  begin
    apply (forget sr).map_injective,
    dsimp,
    simp,
  end }

/- Define a noncomputable skeleton using quotients. -/
namespace canonical

variable (C)

def q.setoid : setoid C :=
{ r := are_iso,
  iseqv := are_iso.equiv
}

local attribute [instance] q.setoid

/-- Quotient the given category on isomorphisms.
    Instead of defining this to be the category, we use this to construct a
    canonical set of representatives using choice and then define the skeleton
    as the full subcategory on these representatives. -/
def q := quotient (q.setoid C)

variable {C}

def q.mk (X : C) : q C := ‚ü¶X‚üß

noncomputable def re : C ‚Üí C := quotient.out ‚àò q.mk
noncomputable def re_iso (X : C) : re X ‚âÖ X := @classical.choice _ $ @quotient.mk_out C (q.setoid C) $ X

noncomputable def r_is_skeleton_map : skeleton_map.{v} (canonical.re : C ‚Üí C) :=
{ repr_iso := Œª X, re_iso X,
  eq_of_iso := Œª X Y xy,
  begin
    show quotient.out (q.mk X) = quotient.out (q.mk Y),
    congr' 1,
    apply quotient.sound,
    refine ‚ü®xy‚ü©,
  end,
}

end canonical

/-- For all categories, a skeleton exists but you might need choice to get it. -/
lemma has_skeleton : ‚àÉ (r : C ‚Üí C), nonempty (skeleton_map.{v} r) := ‚ü®canonical.re, ‚ü®canonical.r_is_skeleton_map‚ü©‚ü©

end skeleton

end category_theory
