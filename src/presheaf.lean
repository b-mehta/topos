import category_theory.monad.algebra
import pullbacks

namespace category_theory

open category_theory category_theory.category category_theory.limits comonad

universes v u

def mk_coalgebra_iso {D : Type u} [category.{v} D] {W : D ‚•§ D} [comonad.{v} W] {x y : coalgebra W}
  (h : x.A ‚âÖ y.A) (k : x.a ‚â´ W.map h.hom = h.hom ‚â´ y.a) : x ‚âÖ y :=
begin
  apply as_iso _,
  refine ‚ü®h.1, k‚ü©,
  refine ‚ü®‚ü®h.2, _‚ü©, _, _‚ü©,
  dsimp,
  rw [h.eq_inv_comp, ‚Üê reassoc_of k, ‚Üê W.map_comp, h.hom_inv_id, W.map_id, comp_id],
  ext1,
  simp,
  ext1,
  simp,
end

variables {C : Type u} [small_category C]

@[simps]
def inner_functor (Y : Type u) : C·µí·µñ ‚•§ Type u :=
{ obj := Œª X, Œ† T, (T ‚ü∂ X.unop) ‚Üí Y,
  map := Œª X Z f t T g, t T (g ‚â´ f.unop) }

variable (C)
@[simps]
def W : Type u ‚•§ Type u :=
{ obj := Œª Y, Œ£ (x : C·µí·µñ), (inner_functor Y).obj x,
  map := Œª Y Z f Ue, ‚ü®Ue.1, Œª T g, f (Ue.2 T g)‚ü© }.

instance : comonad (W C) :=
{ Œµ := { app := Œª Y Ue, Ue.2 Ue.1.unop (ùüô _) },
  Œ¥ := { app := Œª Y Ue, ‚ü®Ue.1, Œª T f, ‚ü®opposite.op T, Œª S g, Ue.2 S (g ‚â´ f)‚ü©‚ü© },
  -- left_counit' := sorry,
  right_counit' :=
  begin
    intro Y,
    ext1 ‚ü®U, e‚ü©,
    dsimp [W],
    simp,
  end,
  coassoc' :=
  begin
    intro Y,
    ext1 ‚ü®U, e‚ü©,
    dsimp [W],
    congr' 1,
    ext T f : 2,
    congr' 1,
    ext S g : 2,
    congr' 1,
    dsimp,
    ext k,
    simp,
  end }.

def presheaf_to_coalgebra : (C·µí·µñ ‚•§ Type u) ‚•§ coalgebra (W C) :=
{ obj := Œª F,
  { A := sigma F.obj,
    a := Œª y, ‚ü®y.1, Œª x f, ‚ü®opposite.op x, F.map f.op y.2‚ü©‚ü©,
    counit' :=
    begin
      ext1 ‚ü®y, hy‚ü©,
      refine sigma.eq rfl _,
      change F.map (ùüô y) hy = hy,
      rw F.map_id,
      refl,
    end,
    coassoc' :=
    begin
      ext1 ‚ü®Y, hY‚ü©,
      dsimp [W, comonad.Œ¥],
      congr' 1,
      ext X f : 2,
      congr' 1,
      ext Z g : 2,
      congr' 1,
      rw F.map_comp,
      refl,
    end },
  map := Œª F G Œ±,
  { f := Œª a, ‚ü®a.1, Œ±.app a.1 a.2‚ü©,
    h' :=
    begin
      ext1 ‚ü®Y, hY‚ü©,
      dsimp [W],
      congr' 1,
      ext X f : 2,
      congr' 1,
      apply congr_fun (Œ±.naturality f.op),
    end } }.

variables {C} (bar : coalgebra (W C)) (F : C·µí·µñ ‚•§ Type u)

-- Thanks to Chris Hughes for this idea!
lemma blah {Œ± Œ±' : Sort*} {Œ≤ : Œ± ‚Üí Sort*} {Œ≤' : Œ±' ‚Üí Sort*} {Œ≥ : Sort*}
  {f : Œ† a, Œ≤ a ‚Üí Œ≥} {f' : Œ† a, Œ≤' a ‚Üí Œ≥} {a : Œ±} {a' : Œ±'} {b : Œ≤ a} {b' : Œ≤' a'}
  (hf : f == f')
  (hŒ± : Œ± = Œ±') (hŒ≤ : Œ≤ == Œ≤') (ha : a == a') (hb : b == b') :
  f a b = f' a' b' :=
by { subst hŒ±, subst hŒ≤, subst ha, subst hf, subst hb }

lemma heq_eq_to_hom {X Y Z : C} (hYZ : Y = Z) (g : X ‚ü∂ Y) : g == g ‚â´ eq_to_hom hYZ :=
by { subst hYZ, simp }

@[simps]
def coalgebra_to_presheaf_obj (w : coalgebra (W C)) : C·µí·µñ ‚•§ Type u :=
{ obj := Œª X, {i : _ // (w.a i).1 = X},
  map := Œª X Y f a,
  begin
    refine ‚ü®_, _‚ü©,
    apply (w.a a.1).2 _ (f.unop ‚â´ eq_to_hom (opposite.op_injective a.2.symm)),
    have t := congr_fun w.coassoc a.1,
    dsimp [comonad.Œ¥, W] at t,
    injection t with t‚ÇÅ t‚ÇÇ,
    rw heq_iff_eq at t‚ÇÇ,
    replace t‚ÇÇ := congr_fun t‚ÇÇ Y.unop,
    replace t‚ÇÇ := congr_fun t‚ÇÇ (f.unop ‚â´ eq_to_hom (opposite.op_injective a.2.symm)),
    replace t‚ÇÇ := congr_arg sigma.fst t‚ÇÇ,
    apply t‚ÇÇ.symm
  end,
  map_id' := Œª X,
  begin
    ext1 ‚ü®a, ha‚ü©,
    dsimp,
    congr' 1,
    cases ha,
    rw id_comp,
    exact congr_fun w.counit a,
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext1 ‚ü®a, ha‚ü©,
    subst ha,
    dsimp,
    rw comp_id,
    rw comp_id,
    congr' 1,
    have t := congr_fun w.coassoc a,
    dsimp [comonad.Œ¥, W] at t,
    injection t with t‚ÇÅ t‚ÇÇ,
    rw heq_iff_eq at t‚ÇÇ,
    replace t‚ÇÇ := congr_fun t‚ÇÇ Y.unop,
    replace t‚ÇÇ := congr_fun t‚ÇÇ f.unop,
    dsimp at t‚ÇÇ,
    rw ‚Üê sigma.eta (w.a ((w.a a).snd Y.unop f.unop)) at t‚ÇÇ,
    have := sigma.mk.inj t‚ÇÇ,
    rcases this with ‚ü®t‚ÇÉ, t‚ÇÑ‚ü©,
    refine blah t‚ÇÑ rfl (heq_of_eq (by conv_lhs { rw t‚ÇÉ })) (heq.refl _) _,
    apply heq_eq_to_hom,
  end,

}

@[simps]
def coalgebra_to_presheaf : coalgebra (W C) ‚•§ C·µí·µñ ‚•§ Type u :=
{ obj := Œª w, coalgebra_to_presheaf_obj w,
  map := Œª X Y f,
  { app := Œª Z a,
    begin
      refine ‚ü®f.f a.1, _‚ü©,
      have := congr_fun f.h a.1,
      dsimp at *,
      rw ‚Üê this,
      apply a.2,
    end,
    naturality' :=
    begin
      intros A B g,
      ext1 ‚ü®X, hX‚ü©,
      dsimp [coalgebra_to_presheaf_obj],
      congr' 1,
      have := f.h,
      dsimp [W] at this,
      have := congr_fun this X,
      dsimp at this,
      rw ‚Üê sigma.eta (Y.a (f.f X)) at this_1,
      injection this_1,
      cases hX,
      rw eq_to_hom_refl,
      rw comp_id,
      cases hX,
      refine blah h_2 rfl _ (heq.refl _) _,
      rw heq_iff_eq,
      funext,
      rw h_1,
      apply heq_eq_to_hom,
    end },
  map_id' := Œª w,
  begin
    ext X ‚ü®_, _‚ü©,
    refl,
  end,
  map_comp' := Œª w‚ÇÅ w‚ÇÇ w‚ÇÉ f g,
  begin
    ext X ‚ü®_, _‚ü©,
    dsimp,
    refl,
  end }.

def presheaf_equiv_coalgebra : (C·µí·µñ ‚•§ Type u) ‚âå coalgebra (W C) :=
equivalence.mk (presheaf_to_coalgebra C) (coalgebra_to_presheaf)
  (begin
    refine nat_iso.of_components _ _,
    { intro P,
      apply nat_iso.of_components _ _,
      { intro X,
        refine ‚ü®Œª x, ‚ü®‚ü®X, x‚ü©, rfl‚ü©, Œª a, P.map (eq_to_hom a.2) a.1.2, _, _‚ü©,
        { ext1 x,
          exact congr_fun (P.map_id _) x },
        { dsimp,
          ext1 ‚ü®‚ü®_, _‚ü©, hx‚ü©,
          cases hx,
          dsimp,
          congr,
          apply congr_fun (P.map_id _) } },
      { intros X Y f,
        ext : 2,
        change (‚ü®Y, P.map (f) x‚ü© : Œ£ (x : _), _) = ‚ü®Y, P.map (ùüô X ‚â´ f) x‚ü©,
        rw id_comp } },
    { intros P Q Œ±,
      ext : 2,
      refl }
  end)
  (begin
    refine nat_iso.of_components _ _,
    { intro w,
      apply mk_coalgebra_iso _ _,
      { refine ‚ü®Œª i, i.2.1, _, _, _‚ü©,
        { intro i,
          refine ‚ü®_, _, rfl‚ü©,
          apply i },
        { ext1 ‚ü®i, hi, t‚ü©,
          cases t,
          refl },
        { ext x,
          refl } },
      { ext1 ‚ü®i, hi, t‚ü©,
        cases t,
        dsimp [W, presheaf_to_coalgebra],
        conv_rhs {rw ‚Üê sigma.eta (w.a hi)},
        congr' 1,
        ext : 2,
        change (w.a hi).snd x (x_1 ‚â´ ùüô _) = (w.a hi).snd x x_1,
        rw comp_id } },
    { intros w‚ÇÅ w‚ÇÇ f,
      ext ‚ü®i, hi, t‚ü© : 2,
      refl },
    end)

def tag (n : ‚Ñï) (Œ± : Sort*) (x : Œ±) := x

def nice_pb {X Y Z : Type u} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : Type u := {i : X √ó Y // f i.1 = g i.2}
def proj‚ÇÅ {X Y Z : Type u} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : nice_pb f g ‚ü∂ X := Œª (i : nice_pb _ _), i.1.1
def proj‚ÇÇ {X Y Z : Type u} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : nice_pb f g ‚ü∂ Y := Œª (i : nice_pb _ _), i.1.2
lemma square {X Y Z : Type u} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : proj‚ÇÅ f g ‚â´ f = proj‚ÇÇ f g ‚â´ g :=
begin
  ext ‚ü®i, hi‚ü©,
  apply hi,
end
def is_lim {X Y Z : Type u} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : is_limit (pullback_cone.mk _ _ (square f g)) :=
is_limit.mk' _ $ Œª s,
begin
  refine ‚ü®Œª i, _, _, _, _‚ü©,
  refine ‚ü®‚ü®s.fst i, s.snd i‚ü©, congr_fun s.condition i‚ü©,
  ext i,
  refl,
  ext i,
  refl,
  intros m m‚ÇÅ m‚ÇÇ,
  ext,
  dsimp, rw ‚Üê m‚ÇÅ, refl,
  dsimp, rw ‚Üê m‚ÇÇ, refl,
end

def construct_pb {W X Y Z : Type u} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} {h : W ‚ü∂ _} {k} (comm : h ‚â´ f = k ‚â´ g) :
  (Œ† Q (œÄ‚ÇÅ : Q ‚ü∂ _) œÄ‚ÇÇ, œÄ‚ÇÅ ‚â´ f = œÄ‚ÇÇ ‚â´ g ‚Üí {l // l ‚â´ h = œÄ‚ÇÅ ‚àß l ‚â´ k = œÄ‚ÇÇ ‚àß ‚àÄ m, m ‚â´ h = œÄ‚ÇÅ ‚Üí m ‚â´ k = œÄ‚ÇÇ ‚Üí m = l}) ‚Üí is_limit (pullback_cone.mk _ _ comm) :=
begin
  intro q,
  apply is_limit.mk' _ _,
  intro s,
  exact q s.X s.fst s.snd s.condition,
end

def construct_type_pb {W X Y Z : Type u} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} {h : W ‚ü∂ _} {k} (comm : h ‚â´ f = k ‚â´ g) :
  (‚àÄ (x : X) (y : Y), f x = g y ‚Üí {t // h t = x ‚àß k t = y ‚àß ‚àÄ t', h t' = x ‚Üí k t' = y ‚Üí t' = t}) ‚Üí is_limit (pullback_cone.mk _ _ comm) :=
begin
  intro z,
  apply is_limit.mk' _ _,
  intro s,
  refine ‚ü®Œª t, _, _, _, _‚ü©,
  refine (z (s.fst t) (s.snd t) (congr_fun s.condition t)).1,
  ext t,
  apply (z (s.fst t) (s.snd t) (congr_fun s.condition t)).2.1,
  ext t,
  apply (z (s.fst t) (s.snd t) (congr_fun s.condition t)).2.2.1,
  intros m m‚ÇÅ m‚ÇÇ,
  ext t,
  apply (z (s.fst t) (s.snd t) (congr_fun s.condition t)).2.2.2,
  apply congr_fun m‚ÇÅ t,
  apply congr_fun m‚ÇÇ t,
end

def W_preserves_cospan {X Y Z : Type u} {f : X ‚ü∂ Z} {g : Y ‚ü∂ Z} : preserves_limit (cospan f g) (W C) :=
begin
  apply preserves_walking_cospan_of_preserves_pb_cone _ _ (is_lim _ _),
  apply construct_type_pb,
  rintros ‚ü®A, A'‚ü© ‚ü®B, B'‚ü© c,
  dsimp [inner_functor] at A' B',
  dsimp [W] at c,
  injection c with c‚ÇÅ c‚ÇÇ,
  subst c‚ÇÅ,
  clear c,
  rw heq_iff_eq at c‚ÇÇ,
  have : ‚àÄ (T : C) (h : T ‚ü∂ A.unop), f (A' T h) = g (B' T h),
    intros T h,
    exact congr_fun (congr_fun c‚ÇÇ T) h,
  clear c‚ÇÇ,
  refine ‚ü®‚ü®A, Œª T h, ‚ü®‚ü®A' T h, B' T h‚ü©, this T h‚ü©‚ü©, rfl, rfl, _‚ü©,
  rintros ‚ü®M, M'‚ü© m‚ÇÅ m‚ÇÇ,
  dsimp [W, proj‚ÇÅ, proj‚ÇÇ] at m‚ÇÅ m‚ÇÇ,
  injection m‚ÇÅ with m‚ÇÉ m‚ÇÑ,
  subst m‚ÇÉ,
  rw heq_iff_eq at m‚ÇÑ,
  cases m‚ÇÑ,
  injection m‚ÇÇ with m‚ÇÖ m‚ÇÜ,
  rw heq_iff_eq at m‚ÇÜ,
  cases m‚ÇÜ,
  congr' 1,
  ext T h;
  refl,
end

def W_preserves_pullbacks : preserves_limits_of_shape walking_cospan (W C) :=
{ preserves_limit := Œª K,
  begin
    apply preserves_limit_of_iso _ (diagram_iso_cospan _).symm,
    apply W_preserves_cospan,
  end }

def weird_functor : (C·µí·µñ ‚•§ Type u) ‚•§ Type u :=
presheaf_to_coalgebra C ‚ãô comonad.forget _

lemma weird_functor_obj (P : C·µí·µñ ‚•§ Type u) : weird_functor.obj P = sigma P.obj :=
rfl

end category_theory
