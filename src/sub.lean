/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import pullbacks
import comma
import category_theory.opposites

universes u v

namespace category_theory

open category_theory.limits

variables {C : Type u} [ùíû : category.{v} C] {X Y : C}
include ùíû

def sub' (X : C) := {f : over X // mono f.hom}
def le : sub' X ‚Üí sub' X ‚Üí Prop := Œª f g, ‚àÉ (h : f.1.left ‚ü∂ g.1.left), f.1.hom = h ‚â´ g.1.hom
lemma le_refl : reflexive (@le _ _ X) := Œª f, ‚ü®ùüô _, (category.id_comp _ _).symm‚ü©
lemma le_trans : transitive (@le _ _ X) :=
begin
  rintros f g h ‚ü®k, r‚ü© ‚ü®l, s‚ü©,
  refine ‚ü®k ‚â´ l, r.trans _‚ü©,
  rw s, simp
end

@[simps]
def pullback_sub' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) (g : sub' Y) : sub' X :=
‚ü®over.mk (pullback.snd : pullback g.1.hom f ‚ü∂ X), @pullback.snd_of_mono _ _ _ _ _ _ _ _ g.2‚ü©

lemma pullback_preserves_le' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) {g‚ÇÅ g‚ÇÇ : sub' Y} (h : le g‚ÇÅ g‚ÇÇ) :
  le (pullback_sub' f g‚ÇÅ) (pullback_sub' f g‚ÇÇ) :=
begin
  cases h,
  refine ‚ü®_, _‚ü©,
  refine pullback.lift (pullback.fst ‚â´ h_w) pullback.snd _,
  slice_lhs 2 3 {rw ‚Üê h_h},
  apply pullback.condition,
  dsimp, simp,
end

def equiv (X : C) : sub' X ‚Üí sub' X ‚Üí Prop := Œª f g, le f g ‚àß le g f
lemma equiv_is_equivalence : _root_.equivalence (@equiv _ _ X) :=
begin
  refine ‚ü®Œª f, ‚ü®le_refl _, le_refl _‚ü©, Œª f g ‚ü®k, l‚ü©, ‚ü®l, k‚ü©, Œª f g h, _‚ü©,
  rintro ‚ü®a, b‚ü© ‚ü®c, d‚ü©,
  refine ‚ü®le_trans a c, le_trans d b‚ü©,
end

instance : setoid (sub' X) := ‚ü®equiv X, equiv_is_equivalence‚ü©
def sub (X : C) := quotient ‚ü®equiv X, equiv_is_equivalence‚ü©

instance : has_le (sub X) :=
begin
  split,
  refine quotient.lift‚ÇÇ _ _,
  exact le,
  rintros _ _ _ _ ‚ü®a‚ÇÅb‚ÇÅ, b‚ÇÅa‚ÇÅ‚ü© ‚ü®a‚ÇÇb‚ÇÇ, b‚ÇÇa‚ÇÇ‚ü©,
  rw eq_iff_iff,
  split,
    intro a‚ÇÅa‚ÇÇ, apply le_trans b‚ÇÅa‚ÇÅ (le_trans a‚ÇÅa‚ÇÇ a‚ÇÇb‚ÇÇ),
    intro b‚ÇÅb‚ÇÇ, apply le_trans a‚ÇÅb‚ÇÅ (le_trans b‚ÇÅb‚ÇÇ b‚ÇÇa‚ÇÇ)
end

instance : preorder (sub X) :=
{ le := has_le.le,
  le_refl := Œª Y, quotient.ind le_refl Y,
  le_trans := Œª A B C, begin apply quotient.induction_on‚ÇÉ A B C, intros a b c, apply le_trans end }

instance : partial_order (sub X) :=
{ le := has_le.le, le_refl := preorder.le_refl, le_trans := preorder.le_trans,
  le_antisymm :=
  begin
    intros A B,
    apply quotient.induction_on‚ÇÇ A B,
    rintros a b k l,
    apply quotient.sound,
    split, exact k, exact l
  end }

def sub_map [has_pullbacks.{v} C] {Y : C} (f : X ‚ü∂ Y) : sub Y ‚Üí sub X :=
begin
  refine quotient.lift (Œª g, quotient.mk (pullback_sub' f g)) _,
  rintros a b ‚ü®k, l‚ü©,
  apply quotient.sound,
  split,
  apply pullback_preserves_le' _ k,
  apply pullback_preserves_le' _ l
end

lemma sub_map_id [has_pullbacks.{v} C] (x : sub X) : sub_map (ùüô X) x = x :=
begin
  apply quotient.induction_on x,
  intro a,
  dsimp [sub_map], apply quotient.sound, split,
  { dsimp [pullback_sub'],
    refine ‚ü®pullback.fst, _‚ü©, dsimp, rw pullback.condition, simp },
  { dsimp [pullback_sub'],
    refine ‚ü®pullback.lift (ùüô _) a.val.hom _, _‚ü©, dsimp,
    simp, simp }
end
lemma sub_map_comp [has_pullbacks.{v} C] {Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : sub Z) : sub_map (f ‚â´ g) x = sub_map f (sub_map g x) :=
begin
  apply quotient.induction_on x,
  intro a,
  dsimp [sub_map], apply quotient.sound,
  split,
  { dsimp [pullback_sub'],
  refine ‚ü®pullback.lift (pullback.lift pullback.fst (pullback.snd ‚â´ f) _) pullback.snd _, _‚ü©,
  rw pullback.condition, simp,
  simp, simp },
  { dsimp [pullback_sub'],
  refine ‚ü®pullback.lift (pullback.fst ‚â´ pullback.fst) pullback.snd _, _‚ü©,
  slice_lhs 2 3 {rw pullback.condition},
  slice_lhs 1 2 {rw pullback.condition},
  simp,
  simp },
end

variable (C)

def sub.functor [has_pullbacks.{v} C] : C·µí·µñ ‚•§ Type (max u v) :=
{ obj := Œª X, sub (X.unop),
  map := Œª X Y f, sub_map f.unop,
  map_id' := Œª X,
  begin
    ext, apply sub_map_id
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext, apply sub_map_comp
  end
}

-- TODO: should be pretty easy to make this work without the pullbacks: use the map as just composition with the iso
def preserves_iso [has_pullbacks.{v} C] {X Y : C} (e : X ‚âÖ Y) : sub X ‚âÉ sub Y :=
{ to_fun := sub_map e.inv,
  inv_fun := sub_map e.hom,
  left_inv :=
  begin
    intro g, rw ‚Üê sub_map_comp,
    rw e.hom_inv_id, rw sub_map_id
  end,
  right_inv :=
  begin
    intro f, rw ‚Üê sub_map_comp,
    rw e.inv_hom_id, rw sub_map_id
  end
}
end category_theory
