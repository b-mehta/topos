/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.opposites
import category_theory.limits.lattice
import category_theory.limits.shapes.finite_products
import category_theory.limits.shapes.terminal
import category_theory.full_subcategory
import category_theory.limits.shapes.regular_mono
import category_theory.closed.cartesian
import category_theory.limits.shapes.pullbacks
import category_theory.limits.over
import pullbacks

universes v u

namespace category_theory

open category_theory category_theory.category category_theory.limits

variables {C : Type u} [category.{v} C] {X Y Z : C}

structure sub' (X : C) :=
(arrow : over X)
[is_mono : mono arrow.hom]

@[simps]
def sub'.mk' {X A : C} (f : A ‚ü∂ X) [hf : mono f] : sub'.{v} X := { arrow := over.mk f, is_mono := hf }

@[simp] lemma sub'_mk'_arrow {X A : C} (f : A ‚ü∂ X) [hf : mono f] : (sub'.mk' f).arrow.hom = f := rfl

attribute [instance] sub'.is_mono

def factors_through {X Y Z : C} (f : X ‚ü∂ Z) (g : Y ‚ü∂ Z) : Prop := ‚àÉ k, k ‚â´ g = f

instance preorder_sub' : preorder (sub'.{v} X) :=
{ le := Œª f g, factors_through f.1.hom g.1.hom,
  le_refl := Œª f, ‚ü®ùüô _, id_comp _‚ü©,
  le_trans :=
  begin
    rintros f g h ‚ü®k, r‚ü© ‚ü®l, s‚ü©,
    refine ‚ü®k ‚â´ l, by simp [s, r]‚ü©,
  end }

def pullback_sub' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) (g : sub'.{v} Y) : sub'.{v} X :=
sub'.mk' (pullback.snd : pullback g.1.hom f ‚ü∂ X)

@[simp] lemma pullback_sub'_arrow_hom [has_pullbacks.{v} C] (f : X ‚ü∂ Y) (g : sub'.{v} Y) :
(pullback_sub' f g).arrow.hom = pullback.snd := rfl

@[mono] lemma pullback_preserves_le' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) {g‚ÇÅ g‚ÇÇ : sub'.{v} Y} (h : g‚ÇÅ ‚â§ g‚ÇÇ) :
  pullback_sub' f g‚ÇÅ ‚â§ pullback_sub' f g‚ÇÇ :=
begin
  rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  refine ‚ü®pullback.lift (pullback.fst ‚â´ h‚ÇÅ) pullback.snd (by simp [h‚ÇÇ, pullback.condition]), pullback.lift_snd _ _ _‚ü©,
end

lemma pullback_sub'_monotone [has_pullbacks.{v} C] (f : X ‚ü∂ Y) : monotone (pullback_sub' f) := Œª _ _, pullback_preserves_le' f

attribute [instance] mono_comp

def postcompose_sub' (f : X ‚ü∂ Y) [mono.{v} f] (g : sub'.{v} X) : sub'.{v} Y :=
sub'.mk' (g.arrow.hom ‚â´ f)

@[simp] lemma postcompose_sub'_arrow_hom (f : X ‚ü∂ Y) [mono.{v} f] (g : sub'.{v} X) :
(postcompose_sub' f g).arrow.hom = g.arrow.hom ‚â´ f := rfl

@[mono] lemma postcompose_preserves_le' (f : X ‚ü∂ Y) [mono f] {g‚ÇÅ g‚ÇÇ : sub'.{v} X} (h : g‚ÇÅ ‚â§ g‚ÇÇ) :
  postcompose_sub' f g‚ÇÅ ‚â§ postcompose_sub' f g‚ÇÇ :=
begin
  rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ‚ü©,
  refine ‚ü®h‚ÇÅ, _‚ü©,
  apply reassoc_of h‚ÇÇ,
end

lemma pullback_is_le' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) [mono f] {g‚ÇÅ : sub'.{v} Y} : postcompose_sub' f (pullback_sub' f g‚ÇÅ) ‚â§ g‚ÇÅ :=
‚ü®pullback.fst, pullback.condition‚ü©

lemma pullback_is_le'' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) [mono f] {g‚ÇÅ : sub'.{v} X} : pullback_sub' f (postcompose_sub' f g‚ÇÅ) ‚â§ g‚ÇÅ :=
begin
  refine ‚ü®pullback.fst, _‚ü©,
  change pullback.fst ‚â´ g‚ÇÅ.arrow.hom = (pullback.snd : pullback (g‚ÇÅ.arrow.hom ‚â´ f) f ‚ü∂ X),
  rw [‚Üê cancel_mono f, assoc, pullback.condition],
end
lemma pullback_is_le''' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) [mono f] {g‚ÇÅ : sub'.{v} X} : g‚ÇÅ ‚â§ pullback_sub' f (postcompose_sub' f g‚ÇÅ) :=
begin
  refine ‚ü®pullback.lift (ùüô _) g‚ÇÅ.arrow.hom _, pullback.lift_snd _ _ _‚ü©,
  rw [id_comp], refl,
end

def equiv (X : C) : sub'.{v} X ‚Üí sub'.{v} X ‚Üí Prop := Œª f g, f ‚â§ g ‚àß g ‚â§ f

lemma equiv_is_equivalence : _root_.equivalence (@equiv _ _ X) :=
‚ü®Œª f, ‚ü®le_refl _, le_refl _‚ü©, Œª f g, and.symm, Œª f g h a b, ‚ü®le_trans a.1 b.1, le_trans b.2 a.2‚ü©‚ü©

instance : setoid (sub' X) := ‚ü®equiv X, equiv_is_equivalence‚ü©

lemma pullback_sub'_id [has_pullbacks.{v} C] (x) : pullback_sub' (ùüô X) x ‚âà x :=
‚ü®‚ü®pullback.fst, by simp [pullback.condition]‚ü©, ‚ü®pullback.lift (ùüô _) x.arrow.hom (by simp), pullback.lift_snd _ _ _‚ü©‚ü©

lemma pullback_sub'_comp [has_pullbacks.{v} C] {Y Z} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (a) :
  pullback_sub' (f ‚â´ g) a ‚âà pullback_sub' f (pullback_sub' g a) :=
begin
  split,
  { refine ‚ü®pullback.lift (pullback.lift pullback.fst (pullback.snd ‚â´ _) _) _ (pullback.lift_snd _ _ _), pullback.lift_snd _ _ _‚ü©,
    rw [pullback.condition, assoc] },
  { refine ‚ü®pullback.lift (pullback.fst ‚â´ pullback.fst) _ _, pullback.lift_snd _ _ _‚ü©,
    dsimp, rw [assoc, pullback.condition], apply pullback.condition_assoc, },
end

lemma postcompose_sub'_id (x) : postcompose_sub' (ùüô X) x ‚âà x :=
by split; exact ‚ü®ùüô _, by {dsimp, simp}‚ü©

local attribute [instance] mono_comp

lemma postcompose_sub'_comp (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [mono f] [mono g] (a) : postcompose_sub' (f ‚â´ g) a ‚âà postcompose_sub' g (postcompose_sub' f a) :=
by split; exact ‚ü®ùüô _, by {dsimp, simp}‚ü©

def sub (X : C) := quotient ‚ü®equiv X, equiv_is_equivalence‚ü©
def sub.mk {X A : C} (f : A ‚ü∂ X) [hf : mono f] : sub X := ‚ü¶sub'.mk' f‚üß

instance : has_le (sub X) :=
‚ü® quotient.lift‚ÇÇ (‚â§)
begin
  intros a‚ÇÅ a‚ÇÇ b‚ÇÅ b‚ÇÇ h‚ÇÅ h‚ÇÇ,
  apply propext,
  refine ‚ü®Œª a‚ÇÅa‚ÇÇ, le_trans h‚ÇÅ.2 (le_trans a‚ÇÅa‚ÇÇ h‚ÇÇ.1), Œª b‚ÇÅb‚ÇÇ, le_trans h‚ÇÅ.1 (le_trans b‚ÇÅb‚ÇÇ h‚ÇÇ.2)‚ü©,
end ‚ü©

def preorder_sub : preorder (sub X) :=
{ le := has_le.le,
  le_refl := Œª Y, quotient.ind le_refl Y,
  le_trans := Œª A B C, quotient.induction_on‚ÇÉ A B C (Œª a b c, le_trans) }

instance sub_partial : partial_order (sub X) :=
{ le_antisymm := Œª a b, quotient.induction_on‚ÇÇ a b (Œª _ _ h k, quotient.sound ‚ü®h, k‚ü©),
  ..preorder_sub }

def pullback_sub [has_pullbacks.{v} C] {Y : C} (f : X ‚ü∂ Y) : sub Y ‚Üí sub X :=
quotient.map (pullback_sub' f) $ Œª a b ‚ü®_, _‚ü©, by split; mono

lemma pullback_sub_id [has_pullbacks.{v} C] (x : sub X) : pullback_sub (ùüô X) x = x :=
quotient.induction_on x (Œª a, quotient.sound (pullback_sub'_id a))

lemma pullback_sub_comp [has_pullbacks.{v} C] {Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x) : pullback_sub (f ‚â´ g) x = pullback_sub f (pullback_sub g x) :=
quotient.induction_on x (Œª a, quotient.sound (pullback_sub'_comp f g a))

variable (C)

def sub.functor [has_pullbacks.{v} C] : C·µí·µñ ‚•§ Type (max u v) :=
{ obj := Œª X, sub X.unop,
  map := Œª X Y f, pullback_sub f.unop,
  map_id' := Œª X, funext pullback_sub_id,
  map_comp' := Œª X Y Z f g, funext (pullback_sub_comp g.unop f.unop) }

variable {C}

def postcompose {X Y : C} (f : X ‚ü∂ Y) [mono f] : sub X ‚Üí sub Y :=
quotient.map (postcompose_sub' f) $ Œª a b ‚ü®_, _‚ü©, by split; mono

lemma postcompose_map_id : ‚àÄ g, postcompose (ùüô X) g = g :=
begin
  apply quotient.ind,
  intro a,
  apply quotient.sound (postcompose_sub'_id a),
end

lemma postcompose_map_comp {Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [mono f] [mono g] : ‚àÄ h, postcompose (f ‚â´ g) h = postcompose g (postcompose f h) :=
begin
  apply quotient.ind,
  intro a,
  apply quotient.sound (postcompose_sub'_comp _ _ _),
end

@[simps]
def postcompose_sub_equiv_of_iso (e : X ‚âÖ Y) : sub X ‚âÉ sub Y :=
{ to_fun := postcompose e.hom,
  inv_fun := postcompose e.inv,
  left_inv := Œª g, by simp_rw [‚Üê postcompose_map_comp, e.hom_inv_id, postcompose_map_id],
  right_inv := Œª g, by simp_rw [‚Üê postcompose_map_comp, e.inv_hom_id, postcompose_map_id] }

lemma postcompose_pullback_comm' [has_pullbacks.{v} C] {X Y Z W : C} {f : X ‚ü∂ Y} {g : X ‚ü∂ Z} {h : Y ‚ü∂ W} {k : Z ‚ü∂ W} [mono h] [mono g]
  {comm : f ‚â´ h = g ‚â´ k} (t : is_limit (pullback_cone.mk f g comm)) (a) :
  postcompose_sub' g (pullback_sub' f a) ‚âà pullback_sub' k (postcompose_sub' h a) :=
begin
  split,
  refine ‚ü®pullback.lift pullback.fst _ _, pullback.lift_snd _ _ _‚ü©,
  dsimp,
  rw [assoc, ‚Üê comm, pullback.condition_assoc],
  refine ‚ü®pullback.lift
            pullback.fst
            (pullback_cone.is_limit.lift' t (pullback.fst ‚â´ a.arrow.hom) pullback.snd _).1
            (pullback_cone.is_limit.lift' _ _ _ _).2.1.symm, _‚ü©,
  { rw [‚Üê pullback.condition, assoc], refl },
  { erw [pullback.lift_snd_assoc], apply (pullback_cone.is_limit.lift' _ _ _ _).2.2 },
end

def postcompose_pullback_comm [has_pullbacks.{v} C] {X Y Z W : C} {f : X ‚ü∂ Y} {g : X ‚ü∂ Z} {h : Y ‚ü∂ W} {k : Z ‚ü∂ W} [mono h] [mono g]
  (comm : f ‚â´ h = g ‚â´ k) (t : is_limit (pullback_cone.mk f g comm)) :
  ‚àÄ p, postcompose g (pullback_sub f p) = pullback_sub k (postcompose h p) :=
begin
  apply quotient.ind,
  intro a,
  apply quotient.sound (postcompose_pullback_comm' t a),
end

lemma pullback_post [has_pullbacks.{v} C] (f : X ‚ü∂ Y) [mono f] : ‚àÄ g‚ÇÅ, pullback_sub f (postcompose f g‚ÇÅ) = g‚ÇÅ :=
begin
  apply quotient.ind,
  intro a,
  apply quotient.sound,
  refine ‚ü®_, _‚ü©,
  exact pullback_is_le'' f,
  exact pullback_is_le''' f,

end

instance over_mono {B : C} {f g : over B} (m : f ‚ü∂ g) [mono m] : mono m.left :=
‚ü®Œª A h k e,
begin
  let A' : over B := over.mk (k ‚â´ f.hom),
  have: h ‚â´ f.hom = k ‚â´ f.hom,
    rw ‚Üê over.w m, rw reassoc_of e,
  let h' : A' ‚ü∂ f := over.hom_mk h,
  let k' : A' ‚ü∂ f := over.hom_mk k,
  have : h' ‚â´ m = k' ‚â´ m := over.over_morphism.ext e,
  rw cancel_mono m at this,
  injection this
end‚ü©

def over_mono' {B : C} {f g : over B} (m : f ‚ü∂ g) [mono m.left] : mono m :=
{right_cancellation := Œª A h k e, over.over_morphism.ext ((cancel_mono m.left).1 (congr_arg comma_morphism.left e))}

@[simps]
def preorder_functor {Œ± Œ≤ : Type*} [preorder Œ±] [preorder Œ≤] (f : Œ± ‚Üí Œ≤) (hf : monotone f) : Œ± ‚•§ Œ≤ :=
{ obj := f,
  map := Œª X Y ‚ü®‚ü®h‚ü©‚ü©, ‚ü®‚ü®hf h‚ü©‚ü© }

@[simps]
def preorder_equivalence {Œ± Œ≤ : Type*} [preorder Œ±] [preorder Œ≤] (f : Œ± ‚âÉ Œ≤)
  (hf : ‚àÄ {x y}, x ‚â§ y ‚Üî f.to_fun x ‚â§ f.to_fun y) : Œ± ‚âå Œ≤ :=
{ functor := preorder_functor f.to_fun (Œª x y, hf.1),
  inverse := preorder_functor f.inv_fun (Œª a b h, by rwa [hf, f.right_inv, f.right_inv]),
  unit_iso := nat_iso.of_components (Œª X, eq_to_iso (f.left_inv _).symm) (Œª X Y f, rfl),
  counit_iso := nat_iso.of_components (Œª X, eq_to_iso (f.right_inv _)) (Œª X Y f, rfl) }

-- /!\ might be unstable
instance mono_term (A : C) : mono.{v} (‚ä§_ over A).hom :=
begin
  change mono (ùüô _),
  apply_instance
end

def sub_one_over [has_terminal.{v} C] (A : C) : sub A ‚âå sub (‚ä§_ (over A)) :=
begin
  refine preorder_equivalence _ _,
  { refine ‚ü®_, _, _, _‚ü©,
    { refine quotient.map _ _,
      { intro f,
        refine { arrow := over.mk (default (f.1 ‚ü∂ _)), is_mono := @category_theory.over_mono' _ _ _ _ _ _ (id _) },
        refine ‚ü®Œª Z g h eq, _‚ü©,
        apply f.is_mono.right_cancellation,
        exact eq },
      { rintros f‚ÇÅ f‚ÇÇ ‚ü®‚ü®e‚ÇÅ, he‚ÇÅ‚ü©, ‚ü®e‚ÇÇ, he‚ÇÇ‚ü©‚ü©,
        refine ‚ü®‚ü®over.hom_mk e‚ÇÅ he‚ÇÅ, _‚ü©, ‚ü®over.hom_mk e‚ÇÇ he‚ÇÇ, _‚ü©‚ü©,
        change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
        apply subsingleton.elim,
        change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
        apply subsingleton.elim } },
    { refine quotient.map _ _,
      { intro f,
        haveI := f.is_mono,
        refine { arrow := f.arrow.left, is_mono := _ },
        rw ‚Üê (show f.arrow.hom.left ‚â´ _ = f.arrow.left.hom, from over.w f.arrow.hom),
        apply mono_comp _ _,
        apply category_theory.over_mono,
        dsimp,
        apply category_theory.mono_term },
      { rintros f‚ÇÅ f‚ÇÇ ‚ü®‚ü®e‚ÇÅ, he‚ÇÅ‚ü©, ‚ü®e‚ÇÇ, he‚ÇÇ‚ü©‚ü©,
        exact ‚ü®‚ü®e‚ÇÅ.left, over.w e‚ÇÅ‚ü©, ‚ü®e‚ÇÇ.left, over.w e‚ÇÇ‚ü©‚ü© } },
    { intro f,
      apply quotient.induction_on f,
      intro f',
      apply quotient.sound,
      refine ‚ü®‚ü®ùüô _, id_comp _‚ü©, ‚ü®ùüô _, id_comp _‚ü©‚ü© },
    { intro f,
      apply quotient.induction_on f,
      intro f',
      apply quotient.sound,
      refine ‚ü®‚ü®ùüô _, _‚ü©, ‚ü®ùüô _, _‚ü©‚ü©,
      dsimp,
      apply subsingleton.elim,
      dsimp,
      apply subsingleton.elim } },
  { apply quotient.ind‚ÇÇ,
    intros a b,
    dsimp,
    refine ‚ü®_, _‚ü©,
    { rintro ‚ü®f, hf‚ü©,
      refine ‚ü®over.hom_mk f hf, _‚ü©,
      dsimp,
      apply subsingleton.elim },
    { rintro ‚ü®f, hf‚ü©,
      dsimp at f hf,
      refine ‚ü®f.left, (over.w f)‚ü© } },
end

def intersection' [has_pullbacks.{v} C] {A : C} (f‚ÇÅ f‚ÇÇ : sub'.{v} A) : sub'.{v} A :=
postcompose_sub' f‚ÇÇ.arrow.hom (pullback_sub' f‚ÇÇ.arrow.hom f‚ÇÅ)

lemma intersection'_le_left [has_pullbacks.{v} C] {A : C} (f‚ÇÅ f‚ÇÇ : sub'.{v} A) : intersection' f‚ÇÅ f‚ÇÇ ‚â§ f‚ÇÅ :=
pullback_is_le' f‚ÇÇ.arrow.hom

lemma intersection'_le_right [has_pullbacks.{v} C] {A : C} (f‚ÇÅ f‚ÇÇ : sub'.{v} A) : intersection' f‚ÇÅ f‚ÇÇ ‚â§ f‚ÇÇ :=
‚ü®pullback.snd, rfl‚ü©

lemma le_intersection' [has_pullbacks.{v} C] {A : C} {f‚ÇÅ f‚ÇÇ f‚ÇÉ : sub'.{v} A} (h‚ÇÅ : f‚ÇÉ ‚â§ f‚ÇÅ) (h‚ÇÇ : f‚ÇÉ ‚â§ f‚ÇÇ) : f‚ÇÉ ‚â§ intersection' f‚ÇÅ f‚ÇÇ :=
begin
  cases h‚ÇÅ, cases h‚ÇÇ,
  refine ‚ü®pullback.lift h‚ÇÅ_w h‚ÇÇ_w (by simp [h‚ÇÅ_h, h‚ÇÇ_h]), _‚ü©,
  erw [pullback.lift_snd_assoc, h‚ÇÇ_h],
end

def intersection [has_pullbacks.{v} C] {A : C} : sub A ‚Üí sub A ‚Üí sub A :=
begin
  refine quotient.map‚ÇÇ intersection' _,
  rintros a‚ÇÅ a‚ÇÇ ‚ü®a‚ÇÅ‚ÇÇ, a‚ÇÇ‚ÇÅ‚ü© b‚ÇÅ b‚ÇÇ ‚ü®b‚ÇÅ‚ÇÇ, b‚ÇÇ‚ÇÅ‚ü©,
  split;
  refine le_intersection' (le_trans (intersection'_le_left _ _) ‚Äπ_‚Ä∫) (le_trans (intersection'_le_right _ _) ‚Äπ_‚Ä∫),
end

def intersection_eq_post_pull [has_pullbacks.{v} C] {A : C} (f‚ÇÅ : sub A) (f‚ÇÇ : sub'.{v} A) :
  intersection f‚ÇÅ ‚ü¶f‚ÇÇ‚üß = postcompose f‚ÇÇ.arrow.hom (pullback_sub f‚ÇÇ.arrow.hom f‚ÇÅ) :=
begin
  apply quotient.induction_on f‚ÇÅ,
  intro a,
  refl,
end

def sub'_top (A : C) : sub'.{v} A := sub'.mk' (ùüô _)

@[simp]
lemma sub'_top_arrow_hom (A : C) : (sub'_top A).arrow.hom = ùüô _ := rfl

lemma sub'_le_top {A : C} (f : sub'.{v} A) : f ‚â§ sub'_top A :=
‚ü®f.arrow.hom, comp_id _‚ü©

def sub_top (A : C) : sub A := ‚ü¶sub'_top A‚üß

instance sub_order_top {A : C} : order_top (sub A) :=
{ top := sub_top A,
  le_top := Œª f, quotient.induction_on f sub'_le_top,
  ..category_theory.sub_partial }

instance [has_pullbacks.{v} C] {B : C} : semilattice_inf_top (sub B) :=
{ inf := intersection,
  inf_le_left := Œª m n, quotient.induction_on‚ÇÇ m n intersection'_le_left,
  inf_le_right := Œª m n, quotient.induction_on‚ÇÇ m n intersection'_le_right,
  le_inf := Œª k m n, quotient.induction_on‚ÇÉ k m n (Œª _ _ _, le_intersection'),
  ..category_theory.sub_order_top }

lemma prod_eq_inter {A : C} {f‚ÇÅ f‚ÇÇ : sub A} [has_pullbacks.{v} C] : (f‚ÇÅ ‚®Ø f‚ÇÇ) = f‚ÇÅ ‚äì f‚ÇÇ :=
begin
  change f‚ÇÅ ‚äì (f‚ÇÇ ‚äì ‚ä§) = f‚ÇÅ ‚äì f‚ÇÇ,
  rw inf_top_eq,
end

lemma inf_eq_intersection {B : C} (m m' : sub B) [has_pullbacks.{v} C] : m ‚äì m' = intersection m m' := rfl

lemma top_eq_top {B : C} : ‚ä§ = sub_top B := rfl

  -- (comm : f ‚â´ h = g ‚â´ k) (t : is_limit (pullback_cone.mk f g comm)) :
  -- ‚àÄ p, postcompose g (pullback_sub f p) = pullback_sub k (postcompose h p)

def intersect_pullback [has_pullbacks.{v} C] {X Y : C} (g : X ‚ü∂ Y) (f1 : sub Y) :
  ‚àÄ f‚ÇÇ, pullback_sub g (f1 ‚äì f‚ÇÇ) = pullback_sub g f1 ‚äì pullback_sub g f‚ÇÇ :=
quotient.ind $
begin
  intro f‚ÇÇ,
  erw [inf_eq_intersection, inf_eq_intersection, intersection_eq_post_pull,
       intersection_eq_post_pull, ‚Üêpullback_sub_comp,
       ‚Üêpostcompose_pullback_comm pullback.condition (cone_is_pullback f‚ÇÇ.arrow.hom g),
       ‚Üêpullback_sub_comp, pullback.condition],
  refl
end

lemma top_le_pullback_self' {A B : C} (f : A ‚ü∂ B) [mono f] [has_pullbacks.{v} C] : sub'_top A ‚â§ pullback_sub' f (sub'.mk' f) :=
‚ü®_, pullback.lift_snd _ _ rfl‚ü©

lemma pullback_self'_eq_top {A B : C} (f : A ‚ü∂ B) [mono f] [has_pullbacks.{v} C] : pullback_sub' f (sub'.mk' f) ‚âà sub'_top A :=
‚ü®sub'_le_top _, top_le_pullback_self' f‚ü©

lemma pullback_self_eq_top {A B : C} (f : A ‚ü∂ B) [mono f] [has_pullbacks.{v} C] : pullback_sub f (sub.mk f) = ‚ä§ :=
quotient.sound (pullback_self'_eq_top f)

lemma top_le_pullback'_top {A B : C} (f : A ‚ü∂ B) [has_pullbacks.{v} C] : sub'_top _ ‚â§ pullback_sub' f (sub'_top _) :=
‚ü®pullback.lift _ _ (by { dsimp, simp }), pullback.lift_snd _ _ _‚ü©

lemma pullback'_top_eq_top {A B : C} (f : A ‚ü∂ B) [has_pullbacks.{v} C] : pullback_sub' f (sub'_top _) ‚âà sub'_top _ :=
‚ü®sub'_le_top _, top_le_pullback'_top f‚ü©

lemma pullback_top {A B : C} (f : A ‚ü∂ B) [has_pullbacks.{v} C] : pullback_sub f ‚ä§ = ‚ä§ :=
quotient.sound (pullback'_top_eq_top f)

local attribute [instance] has_pullbacks_of_has_finite_limits

variable [has_finite_limits.{v} C]

instance mono_prod_lift_of_left {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) [mono f] : mono (limits.prod.lift f g) :=
begin
  split, intros W h k l,
  have := l =‚â´ limits.prod.fst,
  simp at this,
  rwa cancel_mono at this,
end

instance mono_prod_lift_of_right {X Y Z : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) [mono g] : mono (limits.prod.lift f g) :=
begin
  split, intros W h k l,
  have := l =‚â´ limits.prod.snd,
  simp at this,
  rwa cancel_mono at this,
end

def exponentiate' (B : C) [exponentiable B] (A : sub'.{v} (‚ä§_ C)) : sub'.{v} (‚ä§_ C) :=
{ arrow := over.mk (default (B ‚üπ A.1.left ‚ü∂ ‚ä§_ C)),
  is_mono :=
  ‚ü®begin
    intros Z f g eq,
    apply uncurry_injective,
    haveI := A.is_mono,
    rw ‚Üê cancel_mono (A.1.hom),
    change (_ : B ‚®Ø Z ‚ü∂ ‚ä§_ C) = _,
    apply subsingleton.elim,
  end‚ü© }

@[mono] def exponentiate'_le (B : C) [exponentiable B] {A‚ÇÅ A‚ÇÇ : sub'.{v} (‚ä§_ C)} (h : A‚ÇÅ ‚â§ A‚ÇÇ) : exponentiate' B A‚ÇÅ ‚â§ exponentiate' B A‚ÇÇ :=
begin
  cases h,
  refine ‚ü®(exp B).map h_w, _‚ü©,
  change (_ : _ ‚ü∂ ‚ä§_ C) = _,
  apply subsingleton.elim,
end

def exponentiate‚ÇÇ' [cartesian_closed C] (B A : sub'.{v} (‚ä§_ C)) : sub' (‚ä§_ C) :=
exponentiate' B.1.left A

lemma universal [cartesian_closed C] {A‚ÇÅ A‚ÇÇ A‚ÇÉ : sub'.{v} (‚ä§_ C)} : intersection' A‚ÇÅ A‚ÇÇ ‚â§ A‚ÇÉ ‚Üî A‚ÇÇ ‚â§ exponentiate‚ÇÇ' A‚ÇÅ A‚ÇÉ :=
begin
  refine ‚ü®Œª k, _, Œª k, _‚ü©,
  { cases k,
    dsimp [intersection'] at k_w k_h,
    refine ‚ü®cartesian_closed.curry (pullback.lift limits.prod.fst limits.prod.snd _ ‚â´ k_w), _‚ü©,
    change (_ : _ ‚ü∂ ‚ä§_ C) = _,
    apply subsingleton.elim,
    change (_ : _ ‚ü∂ ‚ä§_ C) = _,
    apply subsingleton.elim },
  { cases k,
    refine ‚ü®prod.lift pullback.fst pullback.snd ‚â´ cartesian_closed.uncurry k_w, _‚ü©,
    change (_ : _ ‚ü∂ ‚ä§_ C) = _,
    apply subsingleton.elim }
end

@[mono] def exponentiate‚ÇÇ'_ge [cartesian_closed C] {B‚ÇÅ B‚ÇÇ A : sub'.{v} (‚ä§_ C)} (h : B‚ÇÅ ‚â§ B‚ÇÇ) :
  exponentiate‚ÇÇ' B‚ÇÇ A ‚â§ exponentiate‚ÇÇ' B‚ÇÅ A :=
begin
  cases h,
  refine ‚ü®pre _ h_w, _‚ü©,
  change (_ : _ ‚ü∂ ‚ä§_ C) = _,
  apply subsingleton.elim,
end

def exponential [cartesian_closed C] : sub (‚ä§_ C) ‚Üí sub (‚ä§_ C) ‚Üí sub (‚ä§_ C) :=
begin
  refine quotient.map‚ÇÇ exponentiate‚ÇÇ' _,
  rintros a‚ÇÅ a‚ÇÇ ‚ü®a‚ÇÅ‚ÇÇ, a‚ÇÇ‚ÇÅ‚ü© b‚ÇÅ b‚ÇÇ ‚ü®b‚ÇÅ‚ÇÇ, b‚ÇÇ‚ÇÅ‚ü©,
  split;
  refine (le_trans (exponentiate'_le _ ‚Äπ_‚Ä∫) (exponentiate‚ÇÇ'_ge ‚Äπ_‚Ä∫)),
end

def exp_e [cartesian_closed C] (B X Y : sub (‚ä§_ C)) : ((prod_functor.obj B).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ exponential B Y) :=
{ to_fun := Œª k,
  ‚ü®‚ü®begin
    rcases k with ‚ü®‚ü®_‚ü©‚ü©,
    revert k,
    dsimp [prod_functor],
    rw [prod_eq_inter],
    apply quotient.induction_on‚ÇÉ B X Y,
    introv,
    apply universal.1,
  end‚ü©‚ü©,
  inv_fun := Œª k,
  ‚ü®‚ü®begin
      rcases k with ‚ü®‚ü®_‚ü©‚ü©,
      dsimp [prod_functor],
      rw [prod_eq_inter],
      revert k,
      apply quotient.induction_on‚ÇÉ B X Y,
      introv,
      apply universal.2,
  end‚ü©‚ü©,
  left_inv := Œª f, by ext,
  right_inv := Œª f, by ext }

def exp_e_nat [cartesian_closed C] (B : sub (‚ä§_ C)) (X' X Y : sub (‚ä§_ C)) (f : X' ‚ü∂ X) (g : (prod_functor.obj B).obj X ‚ü∂ Y) :
    (exp_e B X' Y).to_fun ((prod_functor.obj B).map f ‚â´ g) = f ‚â´ (exp_e B X Y).to_fun g :=
by ext

def exponentiable_sub [cartesian_closed C] (B : sub (‚ä§_ C)) : exponentiable B :=
{ is_adj :=
  { right := adjunction.right_adjoint_of_equiv (exp_e B) (Œª _ _ _ _ _, subsingleton.elim _ _),
    adj := adjunction.adjunction_of_equiv_right _ _ } }

instance cart_closed_one [cartesian_closed C] : cartesian_closed (sub (‚ä§_ C)) :=
{ closed := exponentiable_sub }

end category_theory
