/-
Copyright (c) 2020 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import category_theory.opposites
import category_theory.limits.lattice
import category_theory.limits.shapes.finite_products
import category_theory.limits.shapes.terminal
import category_theory.full_subcategory
import pullbacks
import comma
import cartesian_closed

universes u v

namespace category_theory

open category_theory category_theory.category category_theory.limits

variables {C : Type u} [ùíû : category.{v} C] {X Y : C}
include ùíû

def sub' (X : C) := {f : over X // mono f.hom}

instance : preorder (sub' X) :=
{ le := Œª f g, ‚àÉ (h : f.1.left ‚ü∂ g.1.left), f.1.hom = h ‚â´ g.1.hom,
  le_refl := Œª f, ‚ü®ùüô _, (id_comp _).symm‚ü©,
  le_trans :=
  begin
    rintros f g h ‚ü®k, r‚ü© ‚ü®l, s‚ü©,
    refine ‚ü®k ‚â´ l, r.trans _‚ü©,
    rw s, simp
  end }

@[simps]
def pullback_sub' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) (g : sub' Y) : sub' X :=
‚ü®over.mk (pullback.snd : pullback g.1.hom f ‚ü∂ X), @pullback.snd_of_mono _ _ _ _ _ _ _ _ g.2‚ü©

lemma pullback_preserves_le' [has_pullbacks.{v} C] (f : X ‚ü∂ Y) {g‚ÇÅ g‚ÇÇ : sub' Y} (h : g‚ÇÅ ‚â§ g‚ÇÇ) :
  (pullback_sub' f g‚ÇÅ) ‚â§ (pullback_sub' f g‚ÇÇ) :=
begin
  cases h,
  refine ‚ü®_, _‚ü©,
  refine pullback.lift (pullback.fst ‚â´ h_w) pullback.snd _,
  slice_lhs 2 3 {rw ‚Üê h_h},
  apply pullback.condition,
  dsimp, simp,
end

attribute [instance] mono_comp

@[simps]
def postcompose_sub' (f : X ‚ü∂ Y) [mono f] (g : sub' X) : sub' Y :=
‚ü®over.mk (g.1.hom ‚â´ f), begin haveI := g.2, apply mono_comp end‚ü©

lemma postcompose_preserves_le' (f : X ‚ü∂ Y) [mono f] {g‚ÇÅ g‚ÇÇ : sub' X} (h : g‚ÇÅ ‚â§ g‚ÇÇ) :
  postcompose_sub' f g‚ÇÅ ‚â§ postcompose_sub' f g‚ÇÇ :=
begin
  cases h with h k,
  use h,
  dsimp, simp [k]
end

def equiv (X : C) : sub' X ‚Üí sub' X ‚Üí Prop := Œª f g, f ‚â§ g ‚àß g ‚â§ f
lemma equiv_is_equivalence : _root_.equivalence (@equiv _ _ X) :=
begin
  refine ‚ü®Œª f, ‚ü®le_refl _, le_refl _‚ü©, Œª f g ‚ü®k, l‚ü©, ‚ü®l, k‚ü©, Œª f g h, _‚ü©,
  rintro ‚ü®a, b‚ü© ‚ü®c, d‚ü©,
  refine ‚ü®le_trans a c, le_trans d b‚ü©,
end

instance : setoid (sub' X) := ‚ü®equiv X, equiv_is_equivalence‚ü©
def sub (X : C) := quotient ‚ü®equiv X, equiv_is_equivalence‚ü©

instance : has_le (sub X) :=
begin
  split,
  refine quotient.lift‚ÇÇ _ _,
  exact (‚â§),
  rintros _ _ _ _ ‚ü®a‚ÇÅb‚ÇÅ, b‚ÇÅa‚ÇÅ‚ü© ‚ü®a‚ÇÇb‚ÇÇ, b‚ÇÇa‚ÇÇ‚ü©,
  rw eq_iff_iff,
  split,
    intro a‚ÇÅa‚ÇÇ, apply le_trans b‚ÇÅa‚ÇÅ (le_trans a‚ÇÅa‚ÇÇ a‚ÇÇb‚ÇÇ),
    intro b‚ÇÅb‚ÇÇ, apply le_trans a‚ÇÅb‚ÇÅ (le_trans b‚ÇÅb‚ÇÇ b‚ÇÇa‚ÇÇ)
end

def preorder_sub : preorder (sub X) :=
{ le := has_le.le,
  le_refl := Œª Y, quotient.ind le_refl Y,
  le_trans := Œª A B C, begin apply quotient.induction_on‚ÇÉ A B C, intros a b c, apply le_trans end }

instance sub_partial : partial_order (sub X) :=
{ le := has_le.le, le_refl := preorder_sub.le_refl, le_trans := preorder_sub.le_trans,
  le_antisymm :=
  begin
    intros A B,
    apply quotient.induction_on‚ÇÇ A B,
    rintros a b k l,
    apply quotient.sound,
    split, exact k, exact l
  end }

def sub_map [has_pullbacks.{v} C] {Y : C} (f : X ‚ü∂ Y) : sub Y ‚Üí sub X :=
begin
  refine quotient.lift (Œª g, quotient.mk (pullback_sub' f g)) _,
  rintros a b ‚ü®k, l‚ü©,
  apply quotient.sound,
  split,
  apply pullback_preserves_le' _ k,
  apply pullback_preserves_le' _ l
end

lemma sub_map_id [has_pullbacks.{v} C] (x : sub X) : sub_map (ùüô X) x = x :=
begin
  apply quotient.induction_on x,
  intro a,
  dsimp [sub_map], apply quotient.sound, split,
  { dsimp [pullback_sub'],
    refine ‚ü®pullback.fst, _‚ü©, dsimp, rw pullback.condition, simp },
  { dsimp [pullback_sub'],
    refine ‚ü®pullback.lift (ùüô _) a.val.hom _, _‚ü©, dsimp,
    simp, simp }
end
lemma sub_map_comp [has_pullbacks.{v} C] {Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) (x : sub Z) : sub_map (f ‚â´ g) x = sub_map f (sub_map g x) :=
begin
  apply quotient.induction_on x,
  intro a,
  dsimp [sub_map], apply quotient.sound,
  split,
  { dsimp [pullback_sub'],
  refine ‚ü®pullback.lift (pullback.lift pullback.fst (pullback.snd ‚â´ f) _) pullback.snd _, _‚ü©,
  rw pullback.condition, simp,
  simp, simp },
  { dsimp [pullback_sub'],
  refine ‚ü®pullback.lift (pullback.fst ‚â´ pullback.fst) pullback.snd _, _‚ü©,
  slice_lhs 2 3 {rw pullback.condition},
  slice_lhs 1 2 {rw pullback.condition},
  simp,
  simp },
end

variable (C)

def sub.functor [has_pullbacks.{v} C] : C·µí·µñ ‚•§ Type (max u v) :=
{ obj := Œª X, sub (X.unop),
  map := Œª X Y f, sub_map f.unop,
  map_id' := Œª X,
  begin
    ext, apply sub_map_id
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext, apply sub_map_comp
  end
}

variable {C}

def postcompose {X Y : C} (f : X ‚ü∂ Y) [mono f] : sub X ‚Üí sub Y :=
begin
  refine quotient.lift (Œª g, quotient.mk (postcompose_sub' f g)) _,
  intros a b k,
  apply quotient.sound,
  exact ‚ü®postcompose_preserves_le' f k.1, postcompose_preserves_le' f k.2‚ü©,
end

lemma postcompose_map_id (g : sub X) : postcompose (ùüô X) g = g :=
begin
  apply quotient.induction_on g,
  intro a,
  dsimp [postcompose],
  apply quotient.sound,
  split,
  use ùüô _,
  dsimp [postcompose_sub'], simp,
  use (ùüô _),
  dsimp [postcompose_sub'], simp,
end

lemma postcompose_map_comp {Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) [mono f] [mono g] (h : sub X) : postcompose (f ‚â´ g) h = postcompose g (postcompose f h) :=
begin
  apply quotient.induction_on h,
  intro a,
  dsimp [postcompose],
  apply quotient.sound,
  split,
  refine ‚ü®ùüô _, _‚ü©,
  dsimp, simp,
  refine ‚ü®ùüô _, _‚ü©, dsimp, simp
end

def sub_iso_compose (e : X ‚âÖ Y) : sub X ‚âÉ sub Y :=
{ to_fun := postcompose e.hom,
  inv_fun := postcompose e.inv,
  left_inv :=
  begin
    intro g,
    rw ‚Üê postcompose_map_comp,
    simp only [iso.hom_inv_id],
    rw postcompose_map_id
  end,
  right_inv :=
  begin
    intro g,
    rw ‚Üê postcompose_map_comp,
    simp only [iso.inv_hom_id],
    rw postcompose_map_id
  end
}

def postcompose_sub_comm [has_pullbacks.{v} C] {X Y Z W : C} (f : X ‚ü∂ Y) (g : X ‚ü∂ Z) (h : Y ‚ü∂ W) (k : Z ‚ü∂ W) [mono h] [mono g] (comm : f ‚â´ h = g ‚â´ k) (t : is_limit (pullback_cone.mk f g comm)) (p : sub Y) :
  postcompose g (sub_map f p) = sub_map k (postcompose h p) :=
begin
  apply quotient.induction_on p,
  intro a,
  dsimp [postcompose, sub_map],
  apply quotient.sound,
  split;
  refine ‚ü®_, _‚ü©,
  apply pullback.lift pullback.fst (pullback.snd ‚â´ g) _,
  slice_rhs 2 3 {rw ‚Üê comm},
  dsimp [postcompose_sub'],
  slice_lhs 1 2 {rw pullback.condition}, rw category.assoc,
  dsimp, rw limit.lift_œÄ,
  refl,
  apply pullback.lift pullback.fst _ _,
  apply t.lift (pullback_cone.mk (pullback.fst ‚â´ a.val.hom) pullback.snd _),
  rw ‚Üê pullback.condition,
  rw category.assoc, refl,
  erw t.fac (pullback_cone.mk (pullback.fst ‚â´ a.val.hom) pullback.snd _) walking_cospan.left, refl,
  dsimp,
  rw ‚Üê category.assoc,
  rw limit.lift_œÄ, dsimp,
  erw t.fac _ walking_cospan.right, refl,
end

instance over_mono {B : C} {f g : over B} (m : f ‚ü∂ g) [mono m] : mono m.left :=
begin
  refine ‚ü®Œª A h k e, _‚ü©,
  let A' : over B := over.mk (k ‚â´ f.hom),
  have: h ‚â´ f.hom = k ‚â´ f.hom,
    rw ‚Üê over.w m, rw reassoc_of e,
  let h' : A' ‚ü∂ f := over.hom_mk h,
  let k' : A' ‚ü∂ f := over.hom_mk k,
  have: h' ‚â´ m = k' ‚â´ m,
    ext, dsimp, exact e,
  rw cancel_mono m at this,
  injection this
end

def over_mono' {B : C} {f g : over B} (m : f ‚ü∂ g) [mono m.left] : mono m :=
{right_cancellation := Œª A h k e, over.over_morphism.ext ((cancel_mono m.left).1 (congr_arg comma_morphism.left e))}

omit ùíû
@[simps]
def preorder_functor {Œ± Œ≤ : Type*} [preorder Œ±] [preorder Œ≤] (f : Œ± ‚Üí Œ≤) (hf : monotone f) : Œ± ‚•§ Œ≤ :=
{ obj := f,
  map := Œª X Y ‚ü®‚ü®h‚ü©‚ü©, ‚ü®‚ü®hf h‚ü©‚ü© }

@[simps]
def preorder_equivalence {Œ± Œ≤ : Type*} [preorder Œ±] [preorder Œ≤] (f : Œ± ‚âÉ Œ≤)
  (hf : ‚àÄ {x y}, x ‚â§ y ‚Üî f.to_fun x ‚â§ f.to_fun y) : Œ± ‚âå Œ≤ :=
{ functor := preorder_functor f.to_fun (Œª x y, hf.1),
  inverse := preorder_functor f.inv_fun (Œª a b h, by rwa [hf, f.right_inv, f.right_inv]),
  unit_iso := nat_iso.of_components (Œª X, eq_to_iso (f.left_inv _).symm) (Œª X Y f, rfl),
  counit_iso := nat_iso.of_components (Œª X, eq_to_iso (f.right_inv _)) (Œª X Y f, rfl) }

include ùíû

def forward (A : C) : sub A ‚•§ sub (‚ä§_ (over A)) :=
begin
  refine preorder_functor _ _,
  { refine quotient.map (Œª f, _) _,
    { haveI := f.2,
      refine ‚ü®over.mk (default (f.1 ‚ü∂ _)), @category_theory.over_mono' _ _ _ _ _ _ (id _)‚ü©,
      refine ‚ü®Œª Z g h eq, _‚ü©,
      apply f.2.right_cancellation,
      exact eq },
    { rintros f‚ÇÅ f‚ÇÇ ‚ü®‚ü®e‚ÇÅ, he‚ÇÅ‚ü©, ‚ü®e‚ÇÇ, he‚ÇÇ‚ü©‚ü©,
      refine ‚ü®‚ü®over.hom_mk e‚ÇÅ he‚ÇÅ.symm, _‚ü©, over.hom_mk e‚ÇÇ he‚ÇÇ.symm, _‚ü©,
      change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
      apply subsingleton.elim,
      change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
      apply subsingleton.elim } },
  { rintros a b,
    apply quotient.induction_on‚ÇÇ a b,
    rintros ‚ü®f‚ÇÅ, hf‚ÇÅ‚ü© ‚ü®f‚ÇÇ, hf‚ÇÇ‚ü© ‚ü®t, ht‚ü©,
    refine ‚ü®over.hom_mk t ht.symm, _‚ü©,
    change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
    apply subsingleton.elim }
end

-- /!\ might be unstable
instance mono_term (A : C) : mono.{v} (‚ä§_ over A).hom :=
begin
  change mono (ùüô _),
  apply_instance
end

def backward (A : C) : sub (‚ä§_ over A) ‚•§ sub A :=
begin
  refine preorder_functor _ _,
  { refine quotient.map (Œª f, _) _,
    { haveI := f.2,
      refine ‚ü®f.1.left, _‚ü©,
      rw ‚Üê (show f.1.hom.left ‚â´ _ = f.1.left.hom, from over.w f.1.hom),
      apply mono_comp _ _,
      apply category_theory.over_mono,
      dsimp,
      apply category_theory.mono_term },
    { rintros f‚ÇÅ f‚ÇÇ ‚ü®‚ü®e‚ÇÅ, he‚ÇÅ‚ü©, ‚ü®e‚ÇÇ, he‚ÇÇ‚ü©‚ü©,
      exact ‚ü®‚ü®e‚ÇÅ.left, (over.w e‚ÇÅ).symm‚ü©, ‚ü®e‚ÇÇ.left, (over.w e‚ÇÇ).symm‚ü©‚ü© } },
  { rintros a b,
    apply quotient.induction_on‚ÇÇ a b,
    rintros ‚ü®f‚ÇÅ, hf‚ÇÅ‚ü© ‚ü®f‚ÇÇ, hf‚ÇÇ‚ü© ‚ü®t, ht‚ü©,
    refine ‚ü®t.left, (over.w t).symm‚ü© },
end

def sub_one_over [has_terminal.{v} C] (A : C) : sub A ‚âå sub (‚ä§_ (over A)) :=
begin
  refine preorder_equivalence _ _,
  { refine ‚ü®_, _, _, _‚ü©,
    { refine quotient.map _ _,
      { intro f,
        haveI := f.2,
        refine ‚ü®over.mk (default (f.1 ‚ü∂ _)), @category_theory.over_mono' _ _ _ _ _ _ (id _)‚ü©,
        refine ‚ü®Œª Z g h eq, _‚ü©,
        apply f.2.right_cancellation,
        exact eq },
      { rintros f‚ÇÅ f‚ÇÇ ‚ü®‚ü®e‚ÇÅ, he‚ÇÅ‚ü©, ‚ü®e‚ÇÇ, he‚ÇÇ‚ü©‚ü©,
        refine ‚ü®‚ü®over.hom_mk e‚ÇÅ he‚ÇÅ.symm, _‚ü©, over.hom_mk e‚ÇÇ he‚ÇÇ.symm, _‚ü©,
        change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
        apply subsingleton.elim,
        change (_ : _ ‚ü∂ ‚ä§_ (over A)) = _,
        apply subsingleton.elim } },
    { refine quotient.map _ _,
      { intro f,
        haveI := f.2,
        refine ‚ü®f.1.left, _‚ü©,
        rw ‚Üê (show f.1.hom.left ‚â´ _ = f.1.left.hom, from over.w f.1.hom),
        apply mono_comp _ _,
        apply category_theory.over_mono,
        dsimp,
        apply category_theory.mono_term },
      { rintros f‚ÇÅ f‚ÇÇ ‚ü®‚ü®e‚ÇÅ, he‚ÇÅ‚ü©, ‚ü®e‚ÇÇ, he‚ÇÇ‚ü©‚ü©,
        exact ‚ü®‚ü®e‚ÇÅ.left, (over.w e‚ÇÅ).symm‚ü©, ‚ü®e‚ÇÇ.left, (over.w e‚ÇÇ).symm‚ü©‚ü© } },
    { intro f,
      apply quotient.induction_on f,
      intro f',
      apply quotient.sound,
      refine ‚ü®‚ü®ùüô _, (id_comp _).symm‚ü©, ‚ü®ùüô _, (id_comp _).symm‚ü©‚ü© },
    { intro f,
      apply quotient.induction_on f,
      intro f',
      apply quotient.sound,
      refine ‚ü®‚ü®ùüô _, _‚ü©, ‚ü®ùüô _, _‚ü©‚ü©,
      dsimp,
      apply subsingleton.elim,
      dsimp,
      apply subsingleton.elim } },
  { apply quotient.ind‚ÇÇ,
    intros a b,
    dsimp,
    refine ‚ü®_, _‚ü©,
    { rintro ‚ü®f, hf‚ü©,
      refine ‚ü®over.hom_mk f hf.symm, _‚ü©,
      dsimp,
      apply subsingleton.elim },
    { rintro ‚ü®f, hf‚ü©,
      dsimp at f hf,
      refine ‚ü®f.left, (over.w f).symm‚ü© } },
end

def intersection [has_pullbacks.{v} C] {A : C} : sub A ‚Üí sub A ‚Üí sub A :=
begin
  refine quotient.lift (Œª (f : sub' A), _) _,
  { exact (@postcompose _ _ _ _ f.1.hom f.2 ‚àò sub_map f.1.hom) },
  { rintros a b ‚ü®‚ü®ab, hab‚ü©, ‚ü®ba, hba‚ü©‚ü©,
    ext x,
    apply quotient.induction_on x,
    intro y,
    dsimp [postcompose, sub_map],
    apply quotient.sound,
    split,
    { refine ‚ü®pullback.lift pullback.fst (pullback.snd ‚â´ ab) _, _‚ü©,
      { slice_rhs 2 3 {rw ‚Üê hab},
        apply pullback.condition },
      { dsimp,
        slice_rhs 1 2 {rw limit.lift_œÄ},
        simp [hab] } },
    { refine ‚ü®pullback.lift pullback.fst (pullback.snd ‚â´ ba) (by simp [pullback.condition, hba]), _‚ü©,
      { dsimp,
        slice_rhs 1 2 {rw limit.lift_œÄ},
        simp [hba] } } }
end

def is_le_left [has_pullbacks.{v} C] {A : C} : ‚àÄ (m n : sub A), intersection m n ‚â§ m :=
begin
  apply quotient.ind‚ÇÇ,
  intros m n,
  exact ‚ü®pullback.snd, rfl‚ü©,
end

def is_le_right [has_pullbacks.{v} C] {A : C} : ‚àÄ (m n : sub A), intersection m n ‚â§ n :=
begin
  apply quotient.ind‚ÇÇ,
  intros m n,
  exact ‚ü®pullback.fst, pullback.condition.symm‚ü©,
end

def universal [has_pullbacks.{v} C] {A : C} : ‚àÄ {k m n : sub A}, k ‚â§ m ‚Üí k ‚â§ n ‚Üí k ‚â§ intersection m n :=
begin
  intros k m n,
  apply quotient.induction_on‚ÇÉ k m n,
  clear k m n,
  intros k m n,
  rintros ‚ü®km, hkm‚ü© ‚ü®kn, hkn‚ü©,
  refine ‚ü®pullback.lift kn km (eq.trans hkn.symm hkm), _‚ü©,
  dsimp,
  simp [hkm]
end

def sub_top (B : C) : sub B := ‚ü¶‚ü®over.mk (ùüô B), by { dsimp, apply_instance }‚ü©‚üß

instance sub_order_top {B : C} : order_top (sub B) :=
{ top := sub_top B,
  le_top :=
  begin
    apply quotient.ind, intro a,
    refine ‚ü®a.1.hom, (comp_id _).symm‚ü©,
  end,
  ..category_theory.sub_partial }

instance [has_pullbacks.{v} C] {B : C} : semilattice_inf_top (sub B) :=
{ inf := intersection,
  inf_le_left := is_le_left,
  inf_le_right := is_le_right,
  le_inf := by apply universal,
  top := sub_top B,
  le_top := quotient.ind
  begin
    intro a,
    refine ‚ü®a.1.hom, (comp_id _).symm‚ü©,
  end,
  ..category_theory.sub_partial }

lemma top_eq_top {B : C} : ‚ä§ = sub_top B := rfl

lemma pullback_top {A B : C} (f : A ‚ü∂ B) [has_pullbacks.{v} C] : sub_map f ‚ä§ = ‚ä§ :=
begin
  rw eq_top_iff,
  refine ‚ü®pullback.lift f (ùüô _) (by { dsimp, simp }), (pullback.lift_snd _ _ _).symm‚ü©,
end

lemma inf_eq_intersection {B : C} (m m' : sub B) [has_pullbacks.{v} C] : m ‚äì m' = intersection m m' := rfl

local attribute [instance] has_pullbacks_of_has_finite_limits

def exponentiate' [has_finite_limits.{v} C] (B : C) [exponentiable B] (A : sub' (‚ä§_ C)) : sub' (‚ä§_ C) :=
begin
  refine ‚ü®over.mk (default (exp B A.1.left ‚ü∂ ‚ä§_ C)), _‚ü©,
  dsimp,
  refine ‚ü®Œª Z f g eq, _‚ü©,
  apply uncurry_injective,
  haveI := A.2,
  rw ‚Üê cancel_mono (A.1.hom : _ ‚ü∂ ‚ä§_ C),
  change (_ : B ‚®Ø Z ‚ü∂ ‚ä§_ C) = _,
  apply subsingleton.elim,
end

def exponentiate'_le [has_finite_limits.{v} C] (B : C) [exponentiable B] {A‚ÇÅ A‚ÇÇ : sub' (‚ä§_ C)} (h : A‚ÇÅ ‚â§ A‚ÇÇ) : exponentiate' B A‚ÇÅ ‚â§ exponentiate' B A‚ÇÇ :=
begin
  cases h,
  refine ‚ü®post B h_w, _‚ü©,
  change (_ : _ ‚ü∂ ‚ä§_ C) = _,
  apply subsingleton.elim,
end

def exponentiate‚ÇÇ' [has_finite_limits.{v} C] [is_cartesian_closed C] (B : sub' (‚ä§_ C)) (A : sub' (‚ä§_ C)) : sub' (‚ä§_ C) :=
exponentiate' B.1.left A

def exponentiate‚ÇÇ'_ge [has_finite_limits.{v} C] [is_cartesian_closed C] {B‚ÇÅ B‚ÇÇ : sub' (‚ä§_ C)} (A : sub' (‚ä§_ C)) (h : B‚ÇÅ ‚â§ B‚ÇÇ) :
  exponentiate‚ÇÇ' B‚ÇÇ A ‚â§ exponentiate‚ÇÇ' B‚ÇÅ A :=
begin
  cases h,
  refine ‚ü®pre _ h_w, _‚ü©,
  change (_ : _ ‚ü∂ ‚ä§_ C) = _,
  apply subsingleton.elim,
end

def exponential [has_finite_limits.{v} C] [is_cartesian_closed C] : sub (‚ä§_ C) ‚Üí sub (‚ä§_ C) ‚Üí sub (‚ä§_ C) :=
begin
  apply quotient.map‚ÇÇ exponentiate‚ÇÇ' (Œª B‚ÇÅ B‚ÇÇ hB A‚ÇÅ A‚ÇÇ hA, _),
  apply_instance,
  exact ‚ü®le_trans (exponentiate'_le _ hA.1) (exponentiate‚ÇÇ'_ge _ hB.2), le_trans (exponentiate'_le _ hA.2) (exponentiate‚ÇÇ'_ge _ hB.1)‚ü©,
end

def exp_e [has_finite_limits.{v} C] [is_cartesian_closed C] (B X Y : sub (‚ä§_ C)) : ((prod_functor.obj B).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ exponential B Y) :=
{ to_fun :=
  begin
    refine quotient.rec_on B _ _,
    refine quotient.rec_on X _ _,
    refine quotient.rec_on Y _ _,
    intros b x y h,
    refine ‚ü®‚ü®_‚ü©‚ü©,
    rcases h with ‚ü®‚ü®_, _‚ü©‚ü©,
    dsimp at h_w,
    dsimp at h_h,
    refine ‚ü®_, _‚ü©,
    apply cart_closed.curry,
    apply pullback.lift (pullback.lift (default _) limits.prod.snd (subsingleton.elim _ _)) limits.prod.fst (subsingleton.elim _ _) ‚â´ h_w,
    change (_ : _ ‚ü∂ ‚ä§_ C) = _,
    apply subsingleton.elim,
    intros y‚ÇÅ y‚ÇÇ p,
    apply subsingleton.elim,
    intros _ _ _,
    apply subsingleton.elim,
    intros _ _ _,
    apply subsingleton.elim,
  end,
  inv_fun :=
  begin
    refine quotient.rec_on B _ _,
    refine quotient.rec_on X _ _,
    refine quotient.rec_on Y _ _,
    intros b x y h,
    refine ‚ü®‚ü®_‚ü©‚ü©,
    rcases h with ‚ü®‚ü®_, _‚ü©‚ü©,
    dsimp [exponentiate‚ÇÇ', exponentiate'] at h_w,
    refine ‚ü®prod.lift pullback.snd (pullback.fst ‚â´ pullback.snd) ‚â´ cart_closed.uncurry h_w, _‚ü©,
    change (_ : _ ‚ü∂ ‚ä§_ C) = _,
    apply subsingleton.elim,
    intros _ _ _,
    apply subsingleton.elim,
    intros _ _ _,
    apply subsingleton.elim,
    intros _ _ _,
    apply subsingleton.elim,
  end,
  left_inv := Œª f, by ext,
  right_inv := Œª f, by ext }

def exp_e_nat [has_finite_limits.{v} C] [is_cartesian_closed C] (B : sub (‚ä§_ C)) (X' X Y : sub (‚ä§_ C)) (f : X' ‚ü∂ X) (g : (prod_functor.obj B).obj X ‚ü∂ Y) :
    (exp_e B X' Y).to_fun ((prod_functor.obj B).map f ‚â´ g) = f ‚â´ (exp_e B X Y).to_fun g :=
begin
  intros,
  ext
end

def exponentiable_sub [has_finite_limits.{v} C] [is_cartesian_closed C] (B : sub (‚ä§_ C)) : exponentiable B :=
{ is_adj :=
  { right := adjunction.right_adjoint_of_equiv (exp_e B) (Œª _ _ _ _ _, subsingleton.elim _ _),
    adj := adjunction.adjunction_of_equiv_right _ _ } }

instance cart_closed_one [has_finite_limits.{v} C] [is_cartesian_closed C] : is_cartesian_closed (sub (‚ä§_ C)) :=
{ cart_closed := exponentiable_sub }

end category_theory
