import category_theory.limits.shapes
import category_theory.limits.types
import category_theory.types
import category_theory.limits.shapes.binary_products
import category_theory.limits.functor_category
import category_theory.functor_category
import sieve
import subobject_classifier
import sheaf

universes v u

open category_theory category_theory.category category_theory.limits

section reflects
variables {C : Type u} [category.{v} C]

variables {J K : Type v} [small_category J] [small_category K]

variables {F : J ‚•§ K ‚•§ C}

@[simps]
def cone_of_pointwise_limit (c : Œ† k, cone (F.flip.obj k)) (t : Œ† k, is_limit (c k)) : cone F :=
{ X :=
  { obj := Œª k, (c k).X,
    map := Œª k‚ÇÅ k‚ÇÇ f, (t k‚ÇÇ).lift { X := (c k‚ÇÅ).X, œÄ := (c k‚ÇÅ).œÄ ‚â´ F.flip.map f },
    map_id' := Œª k, ((t k).uniq _ _ (by simp)).symm,
    map_comp' := Œª k‚ÇÅ k‚ÇÇ k‚ÇÉ f‚ÇÅ f‚ÇÇ, ((t k‚ÇÉ).uniq _ _ (by simp)).symm },
  œÄ :=
  { app := Œª j,
    { app := Œª k, (c k).œÄ.app j },
    naturality' := Œª j‚ÇÅ j‚ÇÇ f,
    begin
      ext x,
      exact (c x).œÄ.naturality f,
    end } }.

def pointwise_cone_forms_limit (c : Œ† k, cone (F.flip.obj k)) (t : Œ† k, is_limit (c k)) :
  is_limit (cone_of_pointwise_limit c t) :=
{ lift := Œª s,
  { app := Œª k,
    begin
      refine (t k).lift ‚ü®s.X.obj k, _‚ü©,
      refine ‚ü®Œª j, (s.œÄ.app j).app k, Œª j‚ÇÅ j‚ÇÇ f, _‚ü©,
      erw [functor.flip_obj_map, functor.const.obj_map, cone.functor_w, id_comp],
    end,
    naturality' := Œª k‚ÇÅ k‚ÇÇ f,
    begin
      apply (t k‚ÇÇ).hom_ext _,
      simp,
    end },
  uniq' := Œª s m w,
  begin
    ext,
    dsimp,
    apply (t x).hom_ext,
    simp [(t x).fac, ‚Üê w],
  end }.

@[simps]
def pointwise_cone (k : K) (c : cone F) : cone (F.flip.obj k) :=
{ X := c.X.obj k,
  œÄ := { app := Œª j, (c.œÄ.app j).app k } }.

def jointly_reflects (c : cone F) (t : Œ† k, is_limit (pointwise_cone k c)) : is_limit c :=
{ lift := Œª s,
  { app := Œª k,
    begin
      apply (t k).lift ‚ü®s.X.obj k, _‚ü©,
      refine ‚ü®Œª j, (s.œÄ.app j).app k, _‚ü©,
      dsimp, intros,
      simp only [cone.functor_w, id_comp],
    end,
    naturality' :=
    begin
      intros,
      apply (t Y).hom_ext,
      intro j,
      rw [assoc, (t Y).fac],
      simp only [nat_trans.naturality, assoc, pointwise_cone_œÄ_app],
      change _ = _ ‚â´ (pointwise_cone _ _).œÄ.app _ ‚â´ _,
      rw (t X).fac_assoc _ j,
    end },
  fac' := Œª s j,
  begin
    ext k,
    apply (t k).fac,
  end,
  uniq' := Œª s m w,
  begin
    ext1,
    ext1,
    apply (t x).hom_ext,
    intro j,
    rw (t x).fac,
    simp [(t x).fac, ‚Üê w],
  end }

end reflects

variables {C : Type u} [small_category C]

def jointly_reflects_pullback {W X Y Z : C·µí·µñ ‚•§ Type u} (f : W ‚ü∂ X) (g : W ‚ü∂ Y) (h : X ‚ü∂ Z) (k : Y ‚ü∂ Z) (comm : f ‚â´ h = g ‚â´ k)
  (t : ‚àÄ (c : C), is_limit (pullback_cone.mk (f.app (opposite.op c)) (g.app (opposite.op c)) (begin change (f ‚â´ h).app _ = _, rw comm, refl end) : pullback_cone (h.app (opposite.op c)) (k.app (opposite.op c)))) :
 is_limit (pullback_cone.mk _ _ comm) :=
begin
  apply jointly_reflects,
  intro c',
  specialize t c'.unop,
  apply is_limit.of_iso_limit (is_limit.of_cone_equiv (cones.postcompose_equivalence (diagram_iso_cospan ((cospan h k).flip.obj c'))).inverse _) _,
  swap,
  apply t,
  apply cones.ext _ _,
  apply iso.refl _,
  intro j,
  cases j,
  dsimp [diagram_iso_cospan], simp,
  cases j,
  dsimp [diagram_iso_cospan], simp,
  dsimp [diagram_iso_cospan], simp,
end

@[simps]
def exponential_functor (F G : C ‚•§ Type u) : C ‚•§ Type u :=
{ obj := Œª A, coyoneda.obj (opposite.op A) ‚®Ø F ‚ü∂ G,
  map := Œª X Y f g, limits.prod.map (coyoneda.map f.op) (ùüô _) ‚â´ g,
  map_comp' := Œª X Y Z f g,
  begin
    ext1,
    simp [prod_map_comp_id],
  end }.

variable (C)
@[simps]
def presheaf.classifier : C·µí·µñ ‚•§ Type u :=
{ obj := Œª A, sieve A.unop,
  map := Œª A B f S, S.pullback f.unop,
  map_id' := Œª A,
  begin
    ext1 S,
    dsimp,
    ext1,
    ext1,
    erw [sieve.mem_pullback2, category.comp_id],
    simpa,
  end,
  map_comp' := Œª X Y Z f g,
  begin
    ext1 S,
    dsimp,
    ext1,
    ext1,
    erw [sieve.mem_pullback2],
    simp only [sieve.mem_pullback2, sieve.mem_pullback],
    rw ‚Üê assoc,
    apply iff.rfl, -- it should be possible to shuffle definitions so both of these are simp
  end }

@[simps]
def one : C·µí·µñ ‚•§ Type u :=
{ obj := Œª T, punit,
  map := Œª T‚ÇÅ T‚ÇÇ f, id }

@[simps]
def presheaf.truth : one C ‚ü∂ presheaf.classifier C :=
{ app := Œª X _, (‚ä§ : sieve _) }

instance : mono (presheaf.truth C) :=
begin
  refine ‚ü®Œª Z g h eq, _‚ü©,
  ext,
  apply subsingleton.elim _ _,
  dsimp,
  apply_instance,
end

@[simps]
def presheaf.classify (Q P : C·µí·µñ ‚•§ Type u) (i : Q ‚ü∂ P) [mono i] : P ‚ü∂ presheaf.classifier C :=
{ app := Œª c x,
  begin
    refine ‚ü®Œª f, ‚àÉ y, i.app (opposite.op f.left) y = P.map f.hom.op x, _‚ü©,
    rintros f ‚ü®_, _‚ü© Z g,
    refine ‚ü®Q.map g.op w, _‚ü©,
    dsimp,
    rw P.map_comp,
    change _ = P.map _ _,
    rw ‚Üê h,
    exact congr_fun (i.naturality g.op) w,
  end }.

-- lemma set_classifier_u {U X : Type u} {f : U ‚ü∂ X} {œá‚ÇÅ : X ‚ü∂ ulift Prop} (q : classifying truth f œá‚ÇÅ) :
  -- ‚àÄ x, (œá‚ÇÅ x).down ‚Üî ‚àÉ (a : U), f a = x :=
-- begin
  -- obtain ‚ü®ka, la, ma‚ü© := q,
  -- intro x,
  -- split, rintro,
  -- { let g := ma.lift (pullback_cone.mk (ùüô _) (Œª _, x) (by simp [ulift.ext_iff, function.funext_iff, a, truth])),
    -- refine ‚ü®g punit.star, _‚ü©,
    -- have : (g ‚â´ f) _ = (Œª _, x) _ := congr_fun (ma.fac _ walking_cospan.right) punit.star,
    -- exact this },
  -- rintro ‚ü®t, rfl‚ü©, have : _ = _ := congr_fun la t, simp at this, rw ‚Üê this, trivial,
-- end

noncomputable def presheaf.is_classifier : is_subobject_classifier (presheaf.truth C) :=
{ classifier_of := presheaf.classify C,
  classifies' := Œª Q P i hi,
  { top := { app := Œª _ _, punit.star },
    comm :=
    begin
      ext A x f,
      change true ‚Üî _,
      rw true_iff,
      exact ‚ü®Q.map f.hom.op x, congr_fun (i.naturality f.hom.op) x‚ü©,
    end,
    is_pb :=
    begin
      apply jointly_reflects_pullback,
      intro c,
      apply is_limit.mk''' _ _ _,
      refine ‚ü®Œª Z g h eq, _‚ü©,
      funext, apply subsingleton.elim _ _,
      dsimp, apply_instance,
      change mono (i.app (opposite.op c)),
      resetI,
      exact preserves_mono_of_preserves_pullback ((evaluation _ (Type u)).obj (opposite.op c)) Q P i,
      intro s,
      refine ‚ü®_, _‚ü©,
      intro z,
      dsimp,
      have := congr_fun s.condition z,
      dsimp only [types_comp_apply, presheaf.classify] at this,
      have := congr_arg sieve.arrows this,
      dsimp at this,
      have q : _ = _ := congr_fun this_1 (over.mk (ùüô c)),
      dsimp at q,
      change true = _ at q,
      rw [eq_iff_iff, P.map_id, true_iff, types_id_apply] at q,
      apply (classical.indefinite_description _ q).1,
      dsimp,
      change _ ‚â´ i.app _ = _,
      funext z,
      dsimp,
      refine (classical.indefinite_description (Œª x, i.app (opposite.op c) x = s.snd z) _).2,
    end },
  uniquely' := Œª Q P i hi œá hœá,
  begin
    ext1,
    ext1 c,
    change has_pullback_top _ _ _ at hœá,
    ext1,
    ext1,
    ext1 f,
    have hœác : has_pullback_top (i.app c) (œá.app c) ((presheaf.truth C).app c) := preserves_hpb ((evaluation _ (Type u)).obj c) hœá,
    dsimp at hœác,
    have hœáf := preserves_hpb ((evaluation _ (Type u)).obj (opposite.op f.left)) hœá,
    dsimp at hœáf,
    dsimp [presheaf.classify],
    change (‚àÉ (y : Q.obj (opposite.op f.left)), i.app (opposite.op f.left) y = P.map f.hom.op x) ‚Üî f ‚àà (œá.app c x).arrows,
    obtain ‚ü®kac, lac, mac‚ü© := hœác,
    obtain ‚ü®kaf, laf, maf‚ü© := hœáf,
    split,
      rintro ‚ü®y, hy‚ü©,
      have hy‚ÇÇ := congr_fun laf y,
      dsimp at hy‚ÇÇ,
      rw hy at hy‚ÇÇ,
      have hy‚ÇÉ := congr_fun (œá.naturality f.hom.op) x,
      dsimp at hy‚ÇÉ,
      rw hy‚ÇÉ at hy‚ÇÇ,
      have : over.mk (ùüô f.left) ‚àà sieve.pullback (œá.app c x) f.hom,
        rw ‚Üêhy‚ÇÇ,
        trivial,
      change over.mk (ùüô f.left ‚â´ f.hom) ‚àà (œá.app c x).arrows at this,
      rwa [id_comp, over.mk_hom_id] at this,
    intro hf,
    obtain ‚ü®l, hl‚ÇÅ, hl‚ÇÇ‚ü© := pullback_cone.is_limit.lift' maf (ùüô _) (Œª _, P.map f.hom.op x) _,
    refine ‚ü®l punit.star, _‚ü©,
    have := congr_fun hl‚ÇÇ punit.star,
    exact this,
    ext1 ‚ü®‚ü©,
    dsimp,
    have hy‚ÇÉ := congr_fun (œá.naturality f.hom.op) x,
    dsimp at hy‚ÇÉ,
    rw hy‚ÇÉ,
    symmetry,
    rw eq_top_iff,
    intros t ht,
    rw sieve.mem_pullback2,
    apply sieve.subs,
    exact hf,
  end }.

noncomputable def presheaf_has_subobj_classifier : has_subobject_classifier.{u} (C·µí·µñ ‚•§ Type u) :=
{ Œ© := _, Œ©‚ÇÄ := _, truth := _, is_subobj_classifier := presheaf.is_classifier C }

-- def subfunctor (P : C·µí·µñ ‚•§ Type u)
-- def make_subfunctor (P R : C·µí·µñ ‚•§ Type u) (Œ∏ : R ‚ü∂ P) [mono Œ∏] : C·µí·µñ ‚•§ Type u

-- def make_equivalence (F G H : C ‚•§ Type u‚ÇÅ) : ((prod_functor.obj F).obj H ‚ü∂ G) ‚âÉ (H ‚ü∂ exponential_functor G F) :=
-- { to_fun := Œª f,
--   { app := Œª c,
--     begin
--       intro x,
--       dsimp,
--       refine ‚ü®Œª d i, _, _‚ü©,
--     end,
--     naturality' := sorry

--   }

-- }

-- def exponentiables (F : C ‚•§ Type u‚ÇÅ) : exponentiable F :=
-- { is_adj :=
--   { right := adjunction.right_adjoint_of_equiv (Œª H G, make_equivalence F G H)
--       begin
--         intros X' X Y f g,

--       end

--   }

-- }
-- instance : is_cartesian_closed.{u} (C ‚•§ Type u) :=
-- { cart_closed := Œª F, _

-- }