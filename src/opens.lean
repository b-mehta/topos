/- Author: E.W.Ayers
   Show that the open covers for a topological space form a basis for a grothendieck topology.
 -/
import topology.category.Top.opens
import category_theory.limits.lattice
import category_theory.limits.limits
import category_theory.limits.shapes.pullbacks
import .grothendieck

universes u
open category_theory
open topological_space
open category_theory.limits

namespace topological_space.opens

/- [TODO] this is probably in mathlib somewhere. -/
/-- `covers X U ‚Ñ±` means that ‚Ñ± is an open cover of U. -/
def covers (X : Top) : arrow_set (opens X) :=
Œª U ‚Ñ±, ‚àÄ (x : X) (xU : x ‚àà U), ‚àÉ (V : over U), V ‚àà ‚Ñ± ‚àß x ‚àà V.left

variables {X : Top}

instance opens_has_limits : @has_limits (opens X) (opens.opens_category) := 
limits.has_limits_of_complete_lattice

instance opens_has_pullbacks : @has_pullbacks (opens X) (opens.opens_category) :=
‚ü®@has_limits.has_limits_of_shape _ _ opens.opens_has_limits _ _‚ü©

instance opens_has_cospan_limits {U V W : opens X} {f : U ‚ü∂ W} {g : V ‚ü∂ W} : has_limit (cospan f g) :=
@has_limits_of_shape.has_limit _ _ _ _ (@has_limits.has_limits_of_shape _ _ opens.opens_has_limits _ _) _

variables {U V W : opens X}

/- [todo] this can be moved to category_theory/limits/lattice -/
lemma eq_of_iso (e : U ‚âÖ W) : U = W :=
begin
    rcases e with ‚ü®‚ü®‚ü®_‚ü©‚ü©,‚ü®‚ü®_‚ü©‚ü©,_,_‚ü©, 
    apply partial_order.le_antisymm,
    assumption,
    assumption
end

lemma over_eq_of_left_eq : Œ† {f g : over U}, f.left = g.left ‚Üí f = g 
| ‚ü®_,‚ü®‚ü©,‚ü®‚ü®_‚ü©‚ü©‚ü© ‚ü®_,‚ü®‚ü©,‚ü®‚ü®_‚ü©‚ü©‚ü© rfl := rfl

open lattice
/- [todo] this can be moved to category_theory/limits/lattice -/
lemma pullback_is_inter {f : U ‚ü∂ W} {g : V ‚ü∂ W} : pullback f g = U ‚äì V :=
begin
    apply eq_of_iso,
    rcases (pullback.fst : pullback f g ‚ü∂ U) with ‚ü®‚ü®œÄ1‚ü©‚ü©,
    rcases (pullback.snd : pullback f g ‚ü∂ V) with ‚ü®‚ü®œÄ2‚ü©‚ü©,
    refine ‚ü®‚ü®‚ü®le_inf œÄ1 œÄ2‚ü©‚ü©,pullback.lift ‚ü®‚ü®inf_le_left‚ü©‚ü© ‚ü®‚ü®inf_le_right‚ü©‚ü© rfl,rfl,rfl‚ü©,
end

instance : grothendieck.basis (covers X) :=
{ has_isos :=
    begin 
        -- all isos in opens U are equality.
        intros U V e x xU,
        refine ‚ü®over.mk e.hom, _,_‚ü©, 
        simp, 
        have : U = V, apply eq_of_iso e, 
        simpa [this],
    end, 
  has_pullbacks :=
    begin
        -- idea: ‚Ñ± is covering for U 
        -- ‚áí {V ‚à© W | W ‚àà ‚Ñ±} is a covering for V
        intros U V ‚Ñ± h‚ÇÅ g, 
        intros x xV,
        rcases g with ‚ü®‚ü®g‚ü©‚ü©,
        rcases h‚ÇÅ x (g xV) with ‚ü®f,fF,xf‚ü©, 
        refine ‚ü®over.mk ‚ü®‚ü®inf_le_right‚ü©‚ü©,‚ü®f,fF,_‚ü©,‚ü®xf,xV‚ü©‚ü©,
        apply over_eq_of_left_eq, 
            simp [over.pullback],
            rw pullback_is_inter,
            rw inf_comm, refl,
    end,
  trans := 
    begin
        -- idea: ‚Ñ± covers U and ùí¢ U covers V for each V ‚àà ‚Ñ± 
        -- ‚áí ‚ãÉ ùí¢ covers U
        intros U, 
        rintros _ FcU _ GcF x xU,
        rcases FcU x xU with ‚ü®V,VF,xV‚ü©,
        rcases GcF VF x xV with ‚ü®W,WG,xW‚ü©, 
        refine ‚ü®over.mk (W.hom ‚â´ V.hom),‚ü®_,VF,‚ü®W,WG,rfl‚ü©‚ü©,xW‚ü©,
    end
}

def covering_sieve (X : Top):= sieve_set.generate (covers X)

instance : grothendieck (covering_sieve X) :=
grothendieck.of_basis

end topological_space.opens
