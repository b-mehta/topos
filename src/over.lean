import category_theory.comma
import category_theory.adjunction.basic
import category_theory.limits.shapes
import cartesian_closed
import comma

/-!
# Properties of the over category.

We can interpret the forgetful functor `forget : over B ‚•§ C` as dependent sum,
(written `Œ£_B`)
and when C has binary products, it has a right adjoint `B*` given by
`A ‚Ü¶ (œÄ‚ÇÇ : A √ó B ‚Üí B)`, denoted `star` in Lean.

TODO: prove everything below this line.
Furthermore, if the original category C has pullbacks and terminal object (i.e.
all finite limits), `B*` has a right adjoint iff `B` is exponentiable in `C`.
This right adjoint is written `Œ†_B` and is interpreted as dependent product.

Under the same conditions, if `A` is exponentiable in `C`, then `B* A` is
exponentiable in `C/B` for any `B`, and `B*` preserves exponentials.

We say `C` is locally cartesian closed if it has all finite limits, and each
`C/B` is cartesian closed.

Given `f : A ‚ü∂ B` in `C/B`, the iterated slice `(C/B)/f` is isomorphic to
`C/A`, and so `f* : C/B ‚•§ (C/B)/f` is 'the same thing' as pulling back
morphisms along `f`. In particular, `C` is locally cartesian closed iff
it has finite limits and `f* : C/B ‚•§ C/A` has a right adjoint (for each
`f : A ‚ü∂ B`).

From here, we can show that if `C` is locally cartesian closed and has
reflexive coequalizers, then every morphism factors into a regular epic
and monic.
-/
namespace category_theory
open category limits

universes v u
variables {C : Type u} [ùíû : category.{v} C]
include ùíû

variable (B : C)
variable [has_binary_products.{v} C]

section
local attribute [tidy] tactic.case_bash

@[reducible]
def star : C ‚•§ over B :=
{ obj := Œª A, @over.mk _ _ _ (limits.prod A B) limits.prod.snd,
  map := Œª X Y f, begin apply over.hom_mk _ _, apply limits.prod.map f (ùüô _), simp end}

end

def forget_adj_star : over.forget ‚ä£ star B :=
adjunction.mk_of_hom_equiv
{ hom_equiv := Œª g A, { to_fun := Œª f, begin apply over.hom_mk _ _, apply prod.lift f g.hom, simp end,
                        inv_fun := Œª k, k.left ‚â´ limits.prod.fst,
                        left_inv := Œª f, begin dsimp, simp end,
                        right_inv := Œª k, begin apply over.over_morphism.ext, dsimp, apply prod.hom_ext, simp, simp, rw ‚Üê over.w k, refl end},
  hom_equiv_naturality_left_symm' := Œª X X' Y f g, begin dsimp, simp end,
  hom_equiv_naturality_right' := Œª X Y Y' f g, begin simp, apply over.over_morphism.ext, simp, dsimp, apply prod.hom_ext, simp, simp, dsimp, simp end}
end category_theory
