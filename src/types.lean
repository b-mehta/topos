import category_theory.limits.shapes
import category_theory.limits.types
import category_theory.types
import category_theory.limits.shapes.binary_products
import pullbacks
import subobject_classifier
import cartesian_closed

universes v v‚ÇÇ u

/-!
# Types

Show that Type has a subobject classifier (assuming unique choice).
-/

open category_theory category_theory.category category_theory.limits

instance types_has_pullbacks: has_pullbacks.{u} (Type u) := ‚ü®limits.has_limits_of_shape_of_has_limits‚ü©

lemma set_classifier {U X : Type} {f : U ‚ü∂ X} {œá‚ÇÅ : X ‚ü∂ Prop} (q : @classifying _ category_theory.types _ unit _ _ (Œª _, true) f œá‚ÇÅ) :
  ‚àÄ x, œá‚ÇÅ x ‚Üî ‚àÉ a, f a = x :=
begin
  obtain ‚ü®ka, la, ma‚ü© := q,
  intro x,
  split, intro,
    have: ((ùüô _ : unit ‚ü∂ unit) ‚â´ Œª (_ : unit), true) = (Œª (_ : unit), x) ‚â´ œá‚ÇÅ,
      ext y, simp, show true ‚Üî œá‚ÇÅ x, simpa,
    set new_cone := pullback_cone.mk (ùüô unit) (Œª _, x) this,
    set g := ma.lift new_cone,
    use g (),
    have := ma.fac new_cone walking_cospan.right, simp at this,
    have := congr_fun this (), simp at this,
    exact this,
  rintro ‚ü®t, rfl‚ü©, have := congr_fun la t, simp at this, exact this,
end

-- Note this is obviously implied by full choice.
axiom unique_choice {Œ± : Sort u} [subsingleton Œ±] : nonempty Œ± ‚Üí Œ±

noncomputable def get_unique {Œ± : Sort u} (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ a, p a) (h‚ÇÇ : ‚àÄ a b, p a ‚Üí p b ‚Üí a = b) : {a // p a} :=
begin
  haveI: subsingleton {a // p a} := _,
  apply unique_choice,
    cases h‚ÇÅ,
    split, exact ‚ü®h‚ÇÅ_w, h‚ÇÅ_h‚ü©,
  split,
    rintros ‚ü®a, ha‚ü© ‚ü®b, hb‚ü©,
    congr,
    apply h‚ÇÇ a b ha hb,
end

noncomputable def get_unique_value {Œ± : Sort u} (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ a, p a) (h‚ÇÇ : ‚àÄ a b, p a ‚Üí p b ‚Üí a = b) : Œ± := (get_unique p h‚ÇÅ h‚ÇÇ).val
lemma get_unique_property {Œ± : Sort u} (p : Œ± ‚Üí Prop) (h‚ÇÅ : ‚àÉ a, p a) (h‚ÇÇ : ‚àÄ a b, p a ‚Üí p b ‚Üí a = b) : p (get_unique_value p h‚ÇÅ h‚ÇÇ) := (get_unique p h‚ÇÅ h‚ÇÇ).property

noncomputable instance types_has_subobj_classifier : @has_subobject_classifier Type category_theory.types :=
{ Œ© := Prop,
  Œ©‚ÇÄ := unit,
  truth := Œª _, true,
  truth_mono' := ‚ü®Œª A f g _, begin ext i, apply subsingleton.elim end‚ü©,
  classifier_of := Œª A B f mon b, ‚àÉ (a : A), f a = b,
  classifies' :=
  begin
    intros A B f mon,
    refine {top := Œª _, (), comm := _, is_pb := _},
    funext, simp, use x,
    refine pullback_cone.is_limit.mk _ _ _ _ _,
    intros c i,
    show A,
    have: pullback_cone.fst c ‚â´ _ = pullback_cone.snd c ‚â´ _ := pullback_cone.condition c,
    have: (pullback_cone.snd c ‚â´ (Œª (b : B), ‚àÉ (a : A), f a = b)) i,
      rw ‚Üê this, dsimp, trivial,
    dsimp at this,
    apply get_unique_value _ this_1 _,
    intros,
    rw ‚Üê a_2 at a_1,
    rw mono_iff_injective at mon,
    apply mon a_1,
    intros c,
    dsimp,
    apply subsingleton.elim,
    intros c,
    ext, dunfold pullback_cone.snd pullback_cone.mk, simp,
    exact get_unique_property (Œª (a : A), f a = c.œÄ.app walking_cospan.right x) _ _,
    intros c m J,
    dsimp,
    resetI,
    rw ‚Üê cancel_mono f,
    ext,
    simp,
    have := get_unique_property (Œª (a : A), f a = c.œÄ.app walking_cospan.right x) _ _,
    rw this,
    erw ‚Üê congr_fun (J walking_cospan.right) x,
    refl
  end,
  uniquely' :=
  begin
    introv _ fst, ext x,
    rw set_classifier fst x
  end }

noncomputable def invert_mono {U X : Type u} (m : U ‚ü∂ X) [mon : mono m] (t : X) (h : ‚àÉ i, m i = t) : {i : U // m i = t} :=
begin
  apply get_unique _ h _,
  intros,
  rw mono_iff_injective at mon,
  apply mon,
  rw [a_1, a_2]
end

-- instance types_has_subobj_classifier : @has_subobject_classifier (Type u) category_theory.types :=
-- { Œ© := ulift Prop,
--   Œ©‚ÇÄ := punit,
--   truth := Œª _, ulift.up true,
--   truth_mono' := ‚ü®Œª A f g h, by { ext i, apply subsingleton.elim }‚ü©,
--   classifier_of := Œª A B f mon b, ulift.up (‚àÉ (a : A), f a = b),
--   classifies' := Œª U X m hm,
--   { top := Œª _, punit.star,
--     comm :=
--     begin
--       ext1,
--       dsimp,
--       congr' 1,
--       rw [eq_iff_iff, true_iff],
--       exact ‚ü®x, rfl‚ü©,
--     end,
--     is_pb :=
--     begin
--       haveI := hm,
--       refine is_limit.mk' _ _,
--       intro s,
--       refine ‚ü®_, subsingleton.elim _ _, _, _‚ü©,
--       { change s.X ‚ü∂ U,
--         intro i,
--         refine (invert_mono m (s.snd i) _).1,
--         have a := congr_fun s.condition i,
--         dsimp at a,
--         replace a : true = ‚àÉ (a : U), m a = s.snd i := congr_arg ulift.down a,
--         rw ‚Üê a,
--         trivial },
--       { dsimp,
--         ext i,
--         dsimp,
--         have := (invert_mono m (s.snd i) _).2,
--       },




--     end
--   }
-- }

@[simps]
def currying_equiv (A X Y : Type u) : ((prod_functor.obj A).obj X ‚ü∂ Y) ‚âÉ (X ‚ü∂ A ‚Üí Y) :=
{ to_fun := Œª f b a,
  begin
    refine f ‚ü®Œª j, walking_pair.cases_on j a b, Œª j‚ÇÅ j‚ÇÇ, _‚ü©,
    rintros ‚ü®‚ü®rfl‚ü©‚ü©, refl
  end,
  inv_fun := Œª g ab, g (ab.1 walking_pair.right) (ab.1 walking_pair.left),
  left_inv := Œª f, by { ext ‚ü®ba‚ü©, dsimp, congr, ext ‚ü®j‚ü©, simp },
  right_inv := Œª _, rfl }

instance type_exponentiable (A : Type u) : exponentiable A :=
{ is_adj :=
  { right := adjunction.right_adjoint_of_equiv (currying_equiv A) (
    begin
      intros X X' Y f g,
      dsimp [currying_equiv],
      ext,
      congr,
      dunfold limits.prod.map,
      rw types.types_limit_map,
      congr, ext ‚ü®j‚ü©,
      simp,
      simp,
    end),
    adj := adjunction.adjunction_of_equiv_right _ _ } }

instance type_cc : is_cartesian_closed (Type u) :=
begin
  split,
  intro A,
  apply_instance
end
